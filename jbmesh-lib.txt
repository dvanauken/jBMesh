Project Structure Summary:

package ch.alchemists.jbmesh.data.property
IntAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class IntAttribute public void IntAttribute(String name) public int get(E element) public void set(E element, int value) @Override
    public boolean equals(E a, E b) @Override
    protected int[] alloc(int size) public static IntAttribute<E> get(String name, BMeshData<E> meshData) class E class E class E class E
ByteAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element class ByteAttribute public void ByteAttribute(String name) public byte get(E element) public void set(E element, byte value) @Override
    public boolean equals(E a, E b) @Override
    protected byte[] alloc(int size) public static ByteAttribute<E> get(String name, BMeshData<E> meshData) public static ByteAttribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
Vec2Attribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Func, com.jme3.math.Vector2f class Vec2Attribute public void Vec2Attribute(String name) public Vector2f get(E element) public Vector2f get(E element, Vector2f store) public void set(E element, Vector2f vec) public void set(E element, float x, float y) public float getX(E element) public void setX(E element, float x) public float getY(E element) public void setY(E element, float y) public void addLocal(Vector2f store, E element) public void addLocal(E element, Vector2f v) public void subtractLocal(Vector2f store, E element) public void subtractLocal(E element, Vector2f v) public void execute(E element, Unary<Vector2f> op) public void execute(E element1, E element2, Binary<Vector2f> op) public void forEach(Iterable<E> elements, Unary<Vector2f> op) public void modify(E element, Unary<Vector2f> op) public void modify(E element1, E element2, Binary<Vector2f> op) public void forEachModify(Iterable<E> elements, Unary<Vector2f> op) public static Vec2Attribute<E> get(String name, BMeshData<E> meshData) public static Vec2Attribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
Vec3Attribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Func, com.jme3.math.Vector3f class Vec3Attribute public void Vec3Attribute(String name) public Vector3f get(E element) public Vector3f get(E element, Vector3f store) public void set(E element, Vector3f vec) public void set(E element, float x, float y, float z) public float getX(E element) public void setX(E element, float x) public float getY(E element) public void setY(E element, float y) public float getZ(E element) public void setZ(E element, float z) public void addLocal(Vector3f store, E element) public void addLocal(E element, Vector3f v) public void subtractLocal(Vector3f store, E element) public void subtractLocal(E element, Vector3f v) public void execute(E element, Unary<Vector3f> op) public void execute(E element1, E element2, Binary<Vector3f> op) public void forEach(Iterable<E> elements, Unary<Vector3f> op) public void modify(E element, Unary<Vector3f> op) public void modify(E element1, E element2, Binary<Vector3f> op) public void forEachModify(Iterable<E> elements, Unary<Vector3f> op) public static Vec3Attribute<E> get(String name, BMeshData<E> meshData) public static Vec3Attribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
Vec4Attribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Func, com.jme3.math.Vector3f, com.jme3.math.Vector4f class Vec4Attribute public void Vec4Attribute(String name) public Vector4f get(E element) public Vector4f get(E element, Vector4f store) public void set(E element, Vector4f vec) public void set(E element, float x, float y, float z, float w) public float getX(E element) public void setX(E element, float x) public float getY(E element) public void setY(E element, float y) public float getZ(E element) public void setZ(E element, float z) public float getW(E element) public void setW(E element, float w) public void addLocal(Vector4f store, E element) public void addLocal(E element, Vector4f v) public void subtractLocal(Vector4f store, E element) public void subtractLocal(E element, Vector4f v) public void execute(E element, Unary<Vector4f> op) public void execute(E element1, E element2, Binary<Vector4f> op) public void forEach(Iterable<E> elements, Unary<Vector4f> op) public void modify(E element, Unary<Vector4f> op) public void modify(E element1, E element2, Binary<Vector4f> op) public void forEachModify(Iterable<E> elements, Unary<Vector4f> op) public static Vec4Attribute<E> get(String name, BMeshData<E> meshData) public static Vec4Attribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
ColorAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, com.jme3.math.ColorRGBA class ColorAttribute public void ColorAttribute(String name) public ColorRGBA get(E element) public void get(E element, ColorRGBA store) public void set(E element, ColorRGBA color) public void set(E element, float r, float g, float b, float a) public static ColorAttribute<E> get(String name, BMeshData<E> meshData) public static ColorAttribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
FloatAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class FloatAttribute private static final float EPSILON public void FloatAttribute(String name) public float get(E element) public void set(E element, float value) @Override
    public boolean equals(E a, E b) @Override
    protected float[] alloc(int size) public static FloatAttribute<E> get(String name, BMeshData<E> meshData) public static FloatAttribute<E> getOrCreate(String name, BMeshData<E> meshData) public static boolean floatEquals(float a, float b) class E class E class E class E class E class E
ObjectAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class ObjectAttribute private final ArrayAllocator<T> allocator public void ObjectAttribute(String name, ArrayAllocator<T> allocator) public void set(E element, T value) public T get(E element) @Override
    public boolean equals(E a, E b) @Override
    protected T[] alloc(int size) public static ObjectAttribute<E, T> get(String name, BMeshData<E> meshData, Class<T[]> arrayType) public static ObjectAttribute<E, T> getOrCreate(String name, BMeshData<E> meshData, Class<T[]> arrayType, ArrayAllocator<T> allocator) class E class T interface ArrayAllocator  T[] alloc(int size) class T class T class E class T class E class T class E class T interface ArrayAllocator  T[] alloc(int size) class T class T class E class T class E class T
BooleanAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class BooleanAttribute public void BooleanAttribute(String name) public boolean get(E element) public void set(E element, boolean value) @Override
    public boolean equals(E a, E b) @Override
    protected boolean[] alloc(int size) public static BooleanAttribute<E> get(String name, BMeshData<E> meshData) public static BooleanAttribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
IntTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class IntTupleAttribute public void IntTupleAttribute(String name, int components) public int getComponent(E element, int component) public void setComponent(E element, int component, int value) public void setValues(E element, int... values) @Override
    public boolean equals(E a, E b) @Override
    protected int[] alloc(int size) public static IntTupleAttribute<E> get(String name, BMeshData<E> meshData) public static IntTupleAttribute<E> getOrCreate(String name, int components, BMeshData<E> meshData) class E class E class E class E class E class E
FloatTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class FloatTupleAttribute public void FloatTupleAttribute(String name, int components) public float getComponent(E element, int component) public void setComponent(E element, int component, float value) public void setValues(E element, float... values) @Override
    public boolean equals(E a, E b) @Override
    protected float[] alloc(int size) public static FloatTupleAttribute<E> get(String name, BMeshData<E> meshData) public static FloatTupleAttribute<E> getOrCreate(String name, int components, BMeshData<E> meshData) class E class E class E class E class E class E
ShortTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class ShortTupleAttribute public void ShortTupleAttribute(String name, int components) public short getComponent(E element, int component) public void setComponent(E element, int component, short value) public void setComponent(E element, int component, int value) public void setValues(E element, short... values) public void setValues(E element, int... values) @Override
    public boolean equals(E a, E b) @Override
    protected short[] alloc(int size) public static ShortTupleAttribute<E> get(String name, BMeshData<E> meshData) public static ShortTupleAttribute<E> getOrCreate(String name, int components, BMeshData<E> meshData) class E class E class E class E class E class E
ObjectTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element class ObjectTupleAttribute private final ArrayAllocator<T> allocator public void ObjectTupleAttribute(String name, int components, ArrayAllocator<T> allocator) public T getComponent(E element, int component) public void setComponent(E element, int component, T value) public void setValues(E element, T... values) @Override
    public boolean equals(E a, E b) @Override
    protected T[] alloc(int size) public static ObjectTupleAttribute<E, T> get(String name, BMeshData<E> meshData, Class<T[]> arrayType) public static ObjectTupleAttribute<E, T> getOrCreate(String name, int components, BMeshData<E> meshData, Class<T[]> arrayType, ArrayAllocator<T> allocator) class E class T class E class T class E class T class E class T class E class T class E class T
IntAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class IntAttribute public void IntAttribute(String name) public int get(E element) public void set(E element, int value) @Override
    public boolean equals(E a, E b) @Override
    protected int[] alloc(int size) public static IntAttribute<E> get(String name, BMeshData<E> meshData) class E class E class E class E
ByteAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element class ByteAttribute public void ByteAttribute(String name) public byte get(E element) public void set(E element, byte value) @Override
    public boolean equals(E a, E b) @Override
    protected byte[] alloc(int size) public static ByteAttribute<E> get(String name, BMeshData<E> meshData) public static ByteAttribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
Vec2Attribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Func, com.jme3.math.Vector2f class Vec2Attribute public void Vec2Attribute(String name) public Vector2f get(E element) public Vector2f get(E element, Vector2f store) public void set(E element, Vector2f vec) public void set(E element, float x, float y) public float getX(E element) public void setX(E element, float x) public float getY(E element) public void setY(E element, float y) public void addLocal(Vector2f store, E element) public void addLocal(E element, Vector2f v) public void subtractLocal(Vector2f store, E element) public void subtractLocal(E element, Vector2f v) public void execute(E element, Unary<Vector2f> op) public void execute(E element1, E element2, Binary<Vector2f> op) public void forEach(Iterable<E> elements, Unary<Vector2f> op) public void modify(E element, Unary<Vector2f> op) public void modify(E element1, E element2, Binary<Vector2f> op) public void forEachModify(Iterable<E> elements, Unary<Vector2f> op) public static Vec2Attribute<E> get(String name, BMeshData<E> meshData) public static Vec2Attribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
Vec3Attribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Func, com.jme3.math.Vector3f class Vec3Attribute public void Vec3Attribute(String name) public Vector3f get(E element) public Vector3f get(E element, Vector3f store) public void set(E element, Vector3f vec) public void set(E element, float x, float y, float z) public float getX(E element) public void setX(E element, float x) public float getY(E element) public void setY(E element, float y) public float getZ(E element) public void setZ(E element, float z) public void addLocal(Vector3f store, E element) public void addLocal(E element, Vector3f v) public void subtractLocal(Vector3f store, E element) public void subtractLocal(E element, Vector3f v) public void execute(E element, Unary<Vector3f> op) public void execute(E element1, E element2, Binary<Vector3f> op) public void forEach(Iterable<E> elements, Unary<Vector3f> op) public void modify(E element, Unary<Vector3f> op) public void modify(E element1, E element2, Binary<Vector3f> op) public void forEachModify(Iterable<E> elements, Unary<Vector3f> op) public static Vec3Attribute<E> get(String name, BMeshData<E> meshData) public static Vec3Attribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
Vec4Attribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Func, com.jme3.math.Vector3f, com.jme3.math.Vector4f class Vec4Attribute public void Vec4Attribute(String name) public Vector4f get(E element) public Vector4f get(E element, Vector4f store) public void set(E element, Vector4f vec) public void set(E element, float x, float y, float z, float w) public float getX(E element) public void setX(E element, float x) public float getY(E element) public void setY(E element, float y) public float getZ(E element) public void setZ(E element, float z) public float getW(E element) public void setW(E element, float w) public void addLocal(Vector4f store, E element) public void addLocal(E element, Vector4f v) public void subtractLocal(Vector4f store, E element) public void subtractLocal(E element, Vector4f v) public void execute(E element, Unary<Vector4f> op) public void execute(E element1, E element2, Binary<Vector4f> op) public void forEach(Iterable<E> elements, Unary<Vector4f> op) public void modify(E element, Unary<Vector4f> op) public void modify(E element1, E element2, Binary<Vector4f> op) public void forEachModify(Iterable<E> elements, Unary<Vector4f> op) public static Vec4Attribute<E> get(String name, BMeshData<E> meshData) public static Vec4Attribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
ColorAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, com.jme3.math.ColorRGBA class ColorAttribute public void ColorAttribute(String name) public ColorRGBA get(E element) public void get(E element, ColorRGBA store) public void set(E element, ColorRGBA color) public void set(E element, float r, float g, float b, float a) public static ColorAttribute<E> get(String name, BMeshData<E> meshData) public static ColorAttribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
FloatAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class FloatAttribute private static final float EPSILON public void FloatAttribute(String name) public float get(E element) public void set(E element, float value) @Override
    public boolean equals(E a, E b) @Override
    protected float[] alloc(int size) public static FloatAttribute<E> get(String name, BMeshData<E> meshData) public static FloatAttribute<E> getOrCreate(String name, BMeshData<E> meshData) public static boolean floatEquals(float a, float b) class E class E class E class E class E class E
ObjectAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class ObjectAttribute private final ArrayAllocator<T> allocator public void ObjectAttribute(String name, ArrayAllocator<T> allocator) public void set(E element, T value) public T get(E element) @Override
    public boolean equals(E a, E b) @Override
    protected T[] alloc(int size) public static ObjectAttribute<E, T> get(String name, BMeshData<E> meshData, Class<T[]> arrayType) public static ObjectAttribute<E, T> getOrCreate(String name, BMeshData<E> meshData, Class<T[]> arrayType, ArrayAllocator<T> allocator) class E class T interface ArrayAllocator  T[] alloc(int size) class T class T class E class T class E class T class E class T interface ArrayAllocator  T[] alloc(int size) class T class T class E class T class E class T
BooleanAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class BooleanAttribute public void BooleanAttribute(String name) public boolean get(E element) public void set(E element, boolean value) @Override
    public boolean equals(E a, E b) @Override
    protected boolean[] alloc(int size) public static BooleanAttribute<E> get(String name, BMeshData<E> meshData) public static BooleanAttribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
IntTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class IntTupleAttribute public void IntTupleAttribute(String name, int components) public int getComponent(E element, int component) public void setComponent(E element, int component, int value) public void setValues(E element, int... values) @Override
    public boolean equals(E a, E b) @Override
    protected int[] alloc(int size) public static IntTupleAttribute<E> get(String name, BMeshData<E> meshData) public static IntTupleAttribute<E> getOrCreate(String name, int components, BMeshData<E> meshData) class E class E class E class E class E class E
FloatTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class FloatTupleAttribute public void FloatTupleAttribute(String name, int components) public float getComponent(E element, int component) public void setComponent(E element, int component, float value) public void setValues(E element, float... values) @Override
    public boolean equals(E a, E b) @Override
    protected float[] alloc(int size) public static FloatTupleAttribute<E> get(String name, BMeshData<E> meshData) public static FloatTupleAttribute<E> getOrCreate(String name, int components, BMeshData<E> meshData) class E class E class E class E class E class E
ShortTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class ShortTupleAttribute public void ShortTupleAttribute(String name, int components) public short getComponent(E element, int component) public void setComponent(E element, int component, short value) public void setComponent(E element, int component, int value) public void setValues(E element, short... values) public void setValues(E element, int... values) @Override
    public boolean equals(E a, E b) @Override
    protected short[] alloc(int size) public static ShortTupleAttribute<E> get(String name, BMeshData<E> meshData) public static ShortTupleAttribute<E> getOrCreate(String name, int components, BMeshData<E> meshData) class E class E class E class E class E class E
ObjectTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element class ObjectTupleAttribute private final ArrayAllocator<T> allocator public void ObjectTupleAttribute(String name, int components, ArrayAllocator<T> allocator) public T getComponent(E element, int component) public void setComponent(E element, int component, T value) public void setValues(E element, T... values) @Override
    public boolean equals(E a, E b) @Override
    protected T[] alloc(int size) public static ObjectTupleAttribute<E, T> get(String name, BMeshData<E> meshData, Class<T[]> arrayType) public static ObjectTupleAttribute<E, T> getOrCreate(String name, int components, BMeshData<E> meshData, Class<T[]> arrayType, ArrayAllocator<T> allocator) class E class T class E class T class E class T class E class T class E class T class E class T
IntAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class IntAttribute public void IntAttribute(String name) public int get(E element) public void set(E element, int value) @Override
    public boolean equals(E a, E b) @Override
    protected int[] alloc(int size) public static IntAttribute<E> get(String name, BMeshData<E> meshData) class E class E class E class E
ByteAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element class ByteAttribute public void ByteAttribute(String name) public byte get(E element) public void set(E element, byte value) @Override
    public boolean equals(E a, E b) @Override
    protected byte[] alloc(int size) public static ByteAttribute<E> get(String name, BMeshData<E> meshData) public static ByteAttribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
Vec2Attribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Func, com.jme3.math.Vector2f class Vec2Attribute public void Vec2Attribute(String name) public Vector2f get(E element) public Vector2f get(E element, Vector2f store) public void set(E element, Vector2f vec) public void set(E element, float x, float y) public float getX(E element) public void setX(E element, float x) public float getY(E element) public void setY(E element, float y) public void addLocal(Vector2f store, E element) public void addLocal(E element, Vector2f v) public void subtractLocal(Vector2f store, E element) public void subtractLocal(E element, Vector2f v) public void execute(E element, Unary<Vector2f> op) public void execute(E element1, E element2, Binary<Vector2f> op) public void forEach(Iterable<E> elements, Unary<Vector2f> op) public void modify(E element, Unary<Vector2f> op) public void modify(E element1, E element2, Binary<Vector2f> op) public void forEachModify(Iterable<E> elements, Unary<Vector2f> op) public static Vec2Attribute<E> get(String name, BMeshData<E> meshData) public static Vec2Attribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
Vec3Attribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Func, com.jme3.math.Vector3f class Vec3Attribute public void Vec3Attribute(String name) public Vector3f get(E element) public Vector3f get(E element, Vector3f store) public void set(E element, Vector3f vec) public void set(E element, float x, float y, float z) public float getX(E element) public void setX(E element, float x) public float getY(E element) public void setY(E element, float y) public float getZ(E element) public void setZ(E element, float z) public void addLocal(Vector3f store, E element) public void addLocal(E element, Vector3f v) public void subtractLocal(Vector3f store, E element) public void subtractLocal(E element, Vector3f v) public void execute(E element, Unary<Vector3f> op) public void execute(E element1, E element2, Binary<Vector3f> op) public void forEach(Iterable<E> elements, Unary<Vector3f> op) public void modify(E element, Unary<Vector3f> op) public void modify(E element1, E element2, Binary<Vector3f> op) public void forEachModify(Iterable<E> elements, Unary<Vector3f> op) public static Vec3Attribute<E> get(String name, BMeshData<E> meshData) public static Vec3Attribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
Vec4Attribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Func, com.jme3.math.Vector3f, com.jme3.math.Vector4f class Vec4Attribute public void Vec4Attribute(String name) public Vector4f get(E element) public Vector4f get(E element, Vector4f store) public void set(E element, Vector4f vec) public void set(E element, float x, float y, float z, float w) public float getX(E element) public void setX(E element, float x) public float getY(E element) public void setY(E element, float y) public float getZ(E element) public void setZ(E element, float z) public float getW(E element) public void setW(E element, float w) public void addLocal(Vector4f store, E element) public void addLocal(E element, Vector4f v) public void subtractLocal(Vector4f store, E element) public void subtractLocal(E element, Vector4f v) public void execute(E element, Unary<Vector4f> op) public void execute(E element1, E element2, Binary<Vector4f> op) public void forEach(Iterable<E> elements, Unary<Vector4f> op) public void modify(E element, Unary<Vector4f> op) public void modify(E element1, E element2, Binary<Vector4f> op) public void forEachModify(Iterable<E> elements, Unary<Vector4f> op) public static Vec4Attribute<E> get(String name, BMeshData<E> meshData) public static Vec4Attribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
ColorAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, com.jme3.math.ColorRGBA class ColorAttribute public void ColorAttribute(String name) public ColorRGBA get(E element) public void get(E element, ColorRGBA store) public void set(E element, ColorRGBA color) public void set(E element, float r, float g, float b, float a) public static ColorAttribute<E> get(String name, BMeshData<E> meshData) public static ColorAttribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
FloatAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class FloatAttribute private static final float EPSILON public void FloatAttribute(String name) public float get(E element) public void set(E element, float value) @Override
    public boolean equals(E a, E b) @Override
    protected float[] alloc(int size) public static FloatAttribute<E> get(String name, BMeshData<E> meshData) public static FloatAttribute<E> getOrCreate(String name, BMeshData<E> meshData) public static boolean floatEquals(float a, float b) class E class E class E class E class E class E
ObjectAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class ObjectAttribute private final ArrayAllocator<T> allocator public void ObjectAttribute(String name, ArrayAllocator<T> allocator) public void set(E element, T value) public T get(E element) @Override
    public boolean equals(E a, E b) @Override
    protected T[] alloc(int size) public static ObjectAttribute<E, T> get(String name, BMeshData<E> meshData, Class<T[]> arrayType) public static ObjectAttribute<E, T> getOrCreate(String name, BMeshData<E> meshData, Class<T[]> arrayType, ArrayAllocator<T> allocator) class E class T interface ArrayAllocator  T[] alloc(int size) class T class T class E class T class E class T class E class T interface ArrayAllocator  T[] alloc(int size) class T class T class E class T class E class T
BooleanAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class BooleanAttribute public void BooleanAttribute(String name) public boolean get(E element) public void set(E element, boolean value) @Override
    public boolean equals(E a, E b) @Override
    protected boolean[] alloc(int size) public static BooleanAttribute<E> get(String name, BMeshData<E> meshData) public static BooleanAttribute<E> getOrCreate(String name, BMeshData<E> meshData) class E class E class E class E class E class E
IntTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class IntTupleAttribute public void IntTupleAttribute(String name, int components) public int getComponent(E element, int component) public void setComponent(E element, int component, int value) public void setValues(E element, int... values) @Override
    public boolean equals(E a, E b) @Override
    protected int[] alloc(int size) public static IntTupleAttribute<E> get(String name, BMeshData<E> meshData) public static IntTupleAttribute<E> getOrCreate(String name, int components, BMeshData<E> meshData) class E class E class E class E class E class E
FloatTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class FloatTupleAttribute public void FloatTupleAttribute(String name, int components) public float getComponent(E element, int component) public void setComponent(E element, int component, float value) public void setValues(E element, float... values) @Override
    public boolean equals(E a, E b) @Override
    protected float[] alloc(int size) public static FloatTupleAttribute<E> get(String name, BMeshData<E> meshData) public static FloatTupleAttribute<E> getOrCreate(String name, int components, BMeshData<E> meshData) class E class E class E class E class E class E
ShortTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element class ShortTupleAttribute public void ShortTupleAttribute(String name, int components) public short getComponent(E element, int component) public void setComponent(E element, int component, short value) public void setComponent(E element, int component, int value) public void setValues(E element, short... values) public void setValues(E element, int... values) @Override
    public boolean equals(E a, E b) @Override
    protected short[] alloc(int size) public static ShortTupleAttribute<E> get(String name, BMeshData<E> meshData) public static ShortTupleAttribute<E> getOrCreate(String name, int components, BMeshData<E> meshData) class E class E class E class E class E class E
ObjectTupleAttribute.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element class ObjectTupleAttribute private final ArrayAllocator<T> allocator public void ObjectTupleAttribute(String name, int components, ArrayAllocator<T> allocator) public T getComponent(E element, int component) public void setComponent(E element, int component, T value) public void setValues(E element, T... values) @Override
    public boolean equals(E a, E b) @Override
    protected T[] alloc(int size) public static ObjectTupleAttribute<E, T> get(String name, BMeshData<E> meshData, Class<T[]> arrayType) public static ObjectTupleAttribute<E, T> getOrCreate(String name, int components, BMeshData<E> meshData, Class<T[]> arrayType, ArrayAllocator<T> allocator) class E class T class E class T class E class T class E class T class E class T class E class T

package ch.alchemists.jbmesh.data
Element.java: Imports:  class Element public static final int FLAG_VIRTUAL private int index private int flags protected void Element() public final int getIndex() final void setIndex(int index) public final boolean isAlive() final boolean isListed() final void release() protected abstract void releaseElement() final void setFlags(int flags) final void unsetFlags(int flags) final boolean checkFlags(int flags)
BMeshData.java: Imports: java.lang.reflect.Array, java.nio.Buffer, java.util class BMeshData private final ElementFactory<E> factory private final ArrayList<E> elements private static final int INITIAL_ARRAY_SIZE private static final float GROW_FACTOR private int arraySize private int numVirtual private int modCount private final Map<String, BMeshAttribute<E, ?>> attributes public void BMeshData(ElementFactory<E> factory) @Override
    public Iterator<E> iterator() public int size() public int totalSize() public E get(int index) public C getAll(C dest) public List<E> getAll() public void clear() public E create() public E createVirtual() public void destroy(E element) public void addAttribute(BMeshAttribute<E, ?> attribute) public void addAttribute(BMeshAttribute<E, TArray> attribute, TArray data) public BMeshAttribute<E, ?> getAttribute(String name) @SuppressWarnings("unchecked")
    public BMeshAttribute<E, TArray> getAttribute(String name, Class<TArray> arrayType) public void removeAttribute(BMeshAttribute<E, ?> attribute) public BMeshAttribute<E, ?> removeAttribute(String name) public void clearAttributes() public void ensureCapacity(int minCapacity) public void reserveCapacity(int count) private void resize(int size, int copyLength) public void compactData() public TArray getCompactData(BMeshAttribute<E, TArray> attribute) public void putCompactData(BMeshAttribute<E, TArray> attribute, Buffer buffer) public void sort(Comparator<E> comparator) public boolean equals(E a, E b) public void copyAttributes(E from, E to) class E interface ElementFactory  E createElement() class E class E class C class TArray class TArray class TArray class TArray class ElementIterator private final int expectedModCount private int index private void ElementIterator() @Override
        public boolean hasNext() @Override
        public E next() private void skipToNextListed() class E interface ElementFactory  E createElement() class E class E class C class TArray class TArray class TArray class TArray class ElementIterator private final int expectedModCount private int index private void ElementIterator() @Override
        public boolean hasNext() @Override
        public E next() private void skipToNextListed()
BMeshAttribute.java: Imports:  class BMeshAttribute public static final String Position public static final String Normal public static final String Tangent public static final String Binormal public static final String Color public static final String Size public static final String Index public static final String InstanceData public static final String TexCoord public static final String TexCoord2 public static final String TexCoord3 public static final String TexCoord4 public static final String TexCoord5 public static final String TexCoord6 public static final String TexCoord7 public static final String TexCoord8 public static final String BindPosePosition public static final String BindPoseNormal public static final String BoneWeight public static final String BoneIndex public static final String BindPoseTangent public static final String HWBoneWeight public static final String HWBoneIndex public static final String MorphTarget0 public static final String MorphTarget1 public static final String MorphTarget2 public static final String MorphTarget3 public static final String MorphTarget4 public static final String MorphTarget5 public static final String MorphTarget6 public static final String MorphTarget7 public static final String MorphTarget8 public static final String MorphTarget9 public static final String MorphTarget10 public static final String MorphTarget11 public static final String MorphTarget12 public static final String MorphTarget13 public static final String VertexMap public final String name public final int numComponents protected TArray data private boolean comparable protected void BMeshAttribute(String name, int numComponents) protected void BMeshAttribute(String name) @SuppressWarnings("unchecked")
    protected static BMeshAttribute<E, TArray> getAttribute(String name, BMeshData<E> meshData, Class<TArray> arrayType) public final int indexOf(E element) public final int indexOf(E element, int component) public void copy(E from, E to) public void copy(E from, BMeshAttribute<E2, ?> otherAttribute, E2 otherTo) public abstract boolean equals(E a, E b) public void setComparable(boolean comparable) public boolean isComparable() public boolean isAttached() public TArray array() protected abstract TArray alloc(int size) final TArray allocReplace(int size) final void realloc(int size, int copyLength)  void release() class E class TArray class E class TArray class E2 class E class TArray class E class TArray class E2
BMeshDataTest.java: Imports: ch.alchemists.jbmesh.data.property.FloatAttribute, ch.alchemists.jbmesh.data.property.IntTupleAttribute, org.junit.jupiter.api.Test class BMeshDataTest @Test
    public void testElementReference() @Test
    public void testAttributeAddRemove() @Test
    public void testCompact() @Test
    public void testCompactFirstSegment() private void assertValues(IntTupleAttribute<TestElement> attr, TestElement[] elements) class TestElement @Override
        protected void releaseElement() class TestElement @Override
        protected void releaseElement()
Element.java: Imports:  class Element public static final int FLAG_VIRTUAL private int index private int flags protected void Element() public final int getIndex() final void setIndex(int index) public final boolean isAlive() final boolean isListed() final void release() protected abstract void releaseElement() final void setFlags(int flags) final void unsetFlags(int flags) final boolean checkFlags(int flags)
BMeshData.java: Imports: java.lang.reflect.Array, java.nio.Buffer, java.util class BMeshData private final ElementFactory<E> factory private final ArrayList<E> elements private static final int INITIAL_ARRAY_SIZE private static final float GROW_FACTOR private int arraySize private int numVirtual private int modCount private final Map<String, BMeshAttribute<E, ?>> attributes public void BMeshData(ElementFactory<E> factory) @Override
    public Iterator<E> iterator() public int size() public int totalSize() public E get(int index) public C getAll(C dest) public List<E> getAll() public void clear() public E create() public E createVirtual() public void destroy(E element) public void addAttribute(BMeshAttribute<E, ?> attribute) public void addAttribute(BMeshAttribute<E, TArray> attribute, TArray data) public BMeshAttribute<E, ?> getAttribute(String name) @SuppressWarnings("unchecked")
    public BMeshAttribute<E, TArray> getAttribute(String name, Class<TArray> arrayType) public void removeAttribute(BMeshAttribute<E, ?> attribute) public BMeshAttribute<E, ?> removeAttribute(String name) public void clearAttributes() public void ensureCapacity(int minCapacity) public void reserveCapacity(int count) private void resize(int size, int copyLength) public void compactData() public TArray getCompactData(BMeshAttribute<E, TArray> attribute) public void putCompactData(BMeshAttribute<E, TArray> attribute, Buffer buffer) public void sort(Comparator<E> comparator) public boolean equals(E a, E b) public void copyAttributes(E from, E to) class E interface ElementFactory  E createElement() class E class E class C class TArray class TArray class TArray class TArray class ElementIterator private final int expectedModCount private int index private void ElementIterator() @Override
        public boolean hasNext() @Override
        public E next() private void skipToNextListed() class E interface ElementFactory  E createElement() class E class E class C class TArray class TArray class TArray class TArray class ElementIterator private final int expectedModCount private int index private void ElementIterator() @Override
        public boolean hasNext() @Override
        public E next() private void skipToNextListed()
BMeshAttribute.java: Imports:  class BMeshAttribute public static final String Position public static final String Normal public static final String Tangent public static final String Binormal public static final String Color public static final String Size public static final String Index public static final String InstanceData public static final String TexCoord public static final String TexCoord2 public static final String TexCoord3 public static final String TexCoord4 public static final String TexCoord5 public static final String TexCoord6 public static final String TexCoord7 public static final String TexCoord8 public static final String BindPosePosition public static final String BindPoseNormal public static final String BoneWeight public static final String BoneIndex public static final String BindPoseTangent public static final String HWBoneWeight public static final String HWBoneIndex public static final String MorphTarget0 public static final String MorphTarget1 public static final String MorphTarget2 public static final String MorphTarget3 public static final String MorphTarget4 public static final String MorphTarget5 public static final String MorphTarget6 public static final String MorphTarget7 public static final String MorphTarget8 public static final String MorphTarget9 public static final String MorphTarget10 public static final String MorphTarget11 public static final String MorphTarget12 public static final String MorphTarget13 public static final String VertexMap public final String name public final int numComponents protected TArray data private boolean comparable protected void BMeshAttribute(String name, int numComponents) protected void BMeshAttribute(String name) @SuppressWarnings("unchecked")
    protected static BMeshAttribute<E, TArray> getAttribute(String name, BMeshData<E> meshData, Class<TArray> arrayType) public final int indexOf(E element) public final int indexOf(E element, int component) public void copy(E from, E to) public void copy(E from, BMeshAttribute<E2, ?> otherAttribute, E2 otherTo) public abstract boolean equals(E a, E b) public void setComparable(boolean comparable) public boolean isComparable() public boolean isAttached() public TArray array() protected abstract TArray alloc(int size) final TArray allocReplace(int size) final void realloc(int size, int copyLength)  void release() class E class TArray class E class TArray class E2 class E class TArray class E class TArray class E2
BMeshDataTest.java: Imports: ch.alchemists.jbmesh.data.property.FloatAttribute, ch.alchemists.jbmesh.data.property.IntTupleAttribute, org.junit.jupiter.api.Test class BMeshDataTest @Test
    public void testElementReference() @Test
    public void testAttributeAddRemove() @Test
    public void testCompact() @Test
    public void testCompactFirstSegment() private void assertValues(IntTupleAttribute<TestElement> attr, TestElement[] elements) class TestElement @Override
        protected void releaseElement() class TestElement @Override
        protected void releaseElement()
BMeshDataTest.java: Imports: ch.alchemists.jbmesh.data.property.FloatAttribute, ch.alchemists.jbmesh.data.property.IntTupleAttribute, org.junit.jupiter.api.Test class BMeshDataTest @Test
    public void testElementReference() @Test
    public void testAttributeAddRemove() @Test
    public void testCompact() @Test
    public void testCompactFirstSegment() private void assertValues(IntTupleAttribute<TestElement> attr, TestElement[] elements) class TestElement @Override
        protected void releaseElement() class TestElement @Override
        protected void releaseElement()
Element.java: Imports:  class Element public static final int FLAG_VIRTUAL private int index private int flags protected void Element() public final int getIndex() final void setIndex(int index) public final boolean isAlive() final boolean isListed() final void release() protected abstract void releaseElement() final void setFlags(int flags) final void unsetFlags(int flags) final boolean checkFlags(int flags)
BMeshData.java: Imports: java.lang.reflect.Array, java.nio.Buffer, java.util class BMeshData private final ElementFactory<E> factory private final ArrayList<E> elements private static final int INITIAL_ARRAY_SIZE private static final float GROW_FACTOR private int arraySize private int numVirtual private int modCount private final Map<String, BMeshAttribute<E, ?>> attributes public void BMeshData(ElementFactory<E> factory) @Override
    public Iterator<E> iterator() public int size() public int totalSize() public E get(int index) public C getAll(C dest) public List<E> getAll() public void clear() public E create() public E createVirtual() public void destroy(E element) public void addAttribute(BMeshAttribute<E, ?> attribute) public void addAttribute(BMeshAttribute<E, TArray> attribute, TArray data) public BMeshAttribute<E, ?> getAttribute(String name) @SuppressWarnings("unchecked")
    public BMeshAttribute<E, TArray> getAttribute(String name, Class<TArray> arrayType) public void removeAttribute(BMeshAttribute<E, ?> attribute) public BMeshAttribute<E, ?> removeAttribute(String name) public void clearAttributes() public void ensureCapacity(int minCapacity) public void reserveCapacity(int count) private void resize(int size, int copyLength) public void compactData() public TArray getCompactData(BMeshAttribute<E, TArray> attribute) public void putCompactData(BMeshAttribute<E, TArray> attribute, Buffer buffer) public void sort(Comparator<E> comparator) public boolean equals(E a, E b) public void copyAttributes(E from, E to) class E interface ElementFactory  E createElement() class E class E class C class TArray class TArray class TArray class TArray class ElementIterator private final int expectedModCount private int index private void ElementIterator() @Override
        public boolean hasNext() @Override
        public E next() private void skipToNextListed() class E interface ElementFactory  E createElement() class E class E class C class TArray class TArray class TArray class TArray class ElementIterator private final int expectedModCount private int index private void ElementIterator() @Override
        public boolean hasNext() @Override
        public E next() private void skipToNextListed()
BMeshAttribute.java: Imports:  class BMeshAttribute public static final String Position public static final String Normal public static final String Tangent public static final String Binormal public static final String Color public static final String Size public static final String Index public static final String InstanceData public static final String TexCoord public static final String TexCoord2 public static final String TexCoord3 public static final String TexCoord4 public static final String TexCoord5 public static final String TexCoord6 public static final String TexCoord7 public static final String TexCoord8 public static final String BindPosePosition public static final String BindPoseNormal public static final String BoneWeight public static final String BoneIndex public static final String BindPoseTangent public static final String HWBoneWeight public static final String HWBoneIndex public static final String MorphTarget0 public static final String MorphTarget1 public static final String MorphTarget2 public static final String MorphTarget3 public static final String MorphTarget4 public static final String MorphTarget5 public static final String MorphTarget6 public static final String MorphTarget7 public static final String MorphTarget8 public static final String MorphTarget9 public static final String MorphTarget10 public static final String MorphTarget11 public static final String MorphTarget12 public static final String MorphTarget13 public static final String VertexMap public final String name public final int numComponents protected TArray data private boolean comparable protected void BMeshAttribute(String name, int numComponents) protected void BMeshAttribute(String name) @SuppressWarnings("unchecked")
    protected static BMeshAttribute<E, TArray> getAttribute(String name, BMeshData<E> meshData, Class<TArray> arrayType) public final int indexOf(E element) public final int indexOf(E element, int component) public void copy(E from, E to) public void copy(E from, BMeshAttribute<E2, ?> otherAttribute, E2 otherTo) public abstract boolean equals(E a, E b) public void setComparable(boolean comparable) public boolean isComparable() public boolean isAttached() public TArray array() protected abstract TArray alloc(int size) final TArray allocReplace(int size) final void realloc(int size, int copyLength)  void release() class E class TArray class E class TArray class E2 class E class TArray class E class TArray class E2

package ch.alchemists.jbmesh.util
Func.java: Imports: ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class Func interface Unary  void exec(T v) class T class T interface Binary  void exec(T a, T b) class T class T interface MapVec3  Vector3f get(T element, Vector3f store) class T class T interface MapVertex  Vertex get(T element) class T class T interface Unary  void exec(T v) class T class T interface Binary  void exec(T a, T b) class T class T interface MapVec3  Vector3f get(T element, Vector3f store) class T class T interface MapVertex  Vertex get(T element) class T class T
HashGrid.java: Imports: com.jme3.math.Vector3f, java.util.Collection, java.util.HashMap, java.util.Map class HashGrid public static final float DEFAULT_CELLSIZE private final float coordScale private final Map<Long, T> grid public void HashGrid() public void HashGrid(float cellSize) public Index getIndexForCoords(Vector3f coords) public Index getIndexForCoords(float x, float y, float z) public T get(Index cellPos) public T getNeighbor(Index cellPos, int walkX, int walkY, int walkZ) public T getAndSet(Index cellPos, T value) public T set(Index cellPos, T value) public T remove(Index cellPos) public int size() public C getAll(C dest) public void clear() class T class C class Index private static final long KEY_OFFSET private static final long KEY_MASK public final int x public final int y public final int z private final long key private void Index(float x, float y, float z) private void Index(int x, int y, int z) public Index walk(int x, int y, int z) private static long key(long x, long y, long z) @Override
        public String toString() class T class C class Index private static final long KEY_OFFSET private static final long KEY_MASK public final int x public final int y public final int z private final long key private void Index(float x, float y, float z) private void Index(int x, int y, int z) public Index walk(int x, int y, int z) private static long key(long x, long y, long z) @Override
        public String toString()
Profiler.java: Imports: java.util.Arrays, java.util.HashMap, java.util.Map class Profiler private static boolean ENABLED private static final double NANO2MILLI private static final Entry ROOT private static final ThreadLocal<Profiler> CURRENT private long tStart private final Entry entry private final Profiler parent private void Profiler(String name, Profiler parent) private void start() public static Profiler start(String name) public static Profiler disabled(String name) public static void setEnabled(boolean enabled) @Override
    public void close() public static void print() public static void printAndClear() private static void printEntry(int level, Entry entry) private static String formatDouble(double val) private static String formatPercent(double val) private static void print(int level, String name, double timeMs, double percent, double avgMs, double minMs, double maxMs, long runs) class Entry public Map<String, Entry> children public final String name public final int order public long time public long min public long max public long runs public void Entry(String name, int order) public void clear() @Override
        public int compareTo(Entry other) class Entry public Map<String, Entry> children public final String name public final int order public long time public long min public long max public long runs public void Entry(String name, int order) public void clear() @Override
        public int compareTo(Entry other)
Vector3i.java: Imports:  class Vector3i public int x public int y public int z public void Vector3i() public void Vector3i(int x, int y, int z) public void Vector3i(Vector3i copy) public Vector3i set(Vector3i vect) public Vector3i set(int x, int y, int z) public Vector3i addLocal(Vector3i other) public Vector3i addLocal(int x, int y, int z) public Vector3i subtractLocal(Vector3i other) public Vector3i subtractLocal(int x, int y, int z) public Vector3i multLocal(Vector3i other) public Vector3i multLocal(int x, int y, int z) public Vector3i multLocal(int scalar) public Vector3i divideLocal(Vector3i other) public Vector3i divideLocal(int x, int y, int z) public Vector3i divideLocal(int scalar) @Override
    public String toString() @Override
    public boolean equals(Object o) @Override
    public int hashCode()
ColorUtil.java: Imports: com.jme3.math.ColorRGBA, com.jme3.math.FastMath class ColorUtil public static ColorRGBA hsv(float h, float s, float v) public static ColorRGBA hsv(float h, float s, float v, ColorRGBA store) public static ColorRGBA getRandomColor(float hue, float hueVariance, float saturation, float value)
DebugVisual.java: Imports: ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.conversion.TriangleExport, ch.alchemists.jbmesh.lookup.ExactHashDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.asset.AssetManager, com.jme3.font.BitmapFont, com.jme3.font.BitmapText, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.FastMath, com.jme3.math.Quaternion, com.jme3.math.Vector3f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.shape.Sphere, java.util.ArrayList, java.util.List, java.util.concurrent.ConcurrentHashMap class DebugVisual private static final ConcurrentHashMap<String, List<DebugVisual>> visuals private static final ConcurrentHashMap<String, PointTransformation> transforms private static final ConcurrentHashMap<Integer, ColorRGBA> colors public static float colorHue public static float colorHueVariance public static float colorSaturation public static float colorBrightness public static float colorAlpha private final List<Vector3f> points public ColorRGBA pointColor public float pointSize private final List<Line> lines public ColorRGBA lineColor public float arrowLength private final List<Text> texts public ColorRGBA textColor public float textSize private final List<Vector3f[]> faces private final List<ColorRGBA> faceColors private final String name private void DebugVisual(String name) public static DebugVisual get(String name) public static DebugVisual get(String name, int index) public static List<DebugVisual> getAll(String name) public static DebugVisual next(String name) public static void clear(String name) public static void setPointTransformation(String name, PointTransformation transform) public static ColorRGBA getColor(int index) public void addPoint(Vector3f p) public void addLine(Vector3f start, Vector3f end) public void addArrow(Vector3f start, Vector3f end) public void addArrow(Vector3f start, Vector3f end, Vector3f normal) private void addLine(Vector3f start, Vector3f end, List<Line> list) public void addText(Vector3f p, String text) public void addFace(Vector3f... vertices) public void addFace(ColorRGBA color, Vector3f... vertices) public Node createNode(AssetManager assetManager) private void createPoints(AssetManager assetManager, Node node) private void createLines(AssetManager assetManager, Node node) private void createTexts(AssetManager assetManager, Node node) private void createFaces(AssetManager assetManager, Node node) public Vector3f transform(Vector3f p) interface PointTransformation  Vector3f transform(Vector3f p) class Line public final Vector3f start public final Vector3f end class Text public final Vector3f p public String text interface PointTransformation  Vector3f transform(Vector3f p) class Line public final Vector3f start public final Vector3f end class Text public final Vector3f p public String text
LoopMapIterator.java: Imports: ch.alchemists.jbmesh.structure.Loop, java.util.Iterator, java.util.function.Function class LoopMapIterator private final Iterator<Loop> it private final Function<Loop, E> mapFunc public void LoopMapIterator(Iterator<Loop> it, Function<Loop, E> mapFunc) @Override
    public final boolean hasNext() @Override
    public final E next() class E class E
DebugVisualState.java: Imports: com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.app.state.BaseAppState, com.jme3.input.InputManager, com.jme3.input.KeyInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.InputListener, com.jme3.input.controls.KeyTrigger, com.jme3.scene.Node, com.jme3.scene.Spatial class DebugVisualState private static final String ACTION_HISTORY_NEXT private static final String ACTION_HISTORY_PREV private final Node node private Spatial currentVis private int currentIndex private final InputListener listener public void DebugVisualState(String name) @Override
    protected void initialize(Application app) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() public void reset() public void updateVis() private void updateVis(int index)
PlanarCoordinateSystem.java: Imports: ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.normalgen.NewellNormal, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Quaternion, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.Iterator class PlanarCoordinateSystem private static final float AXIS_LENGTH_EPSILON private static final float AXIS_LENGTH_EPSILON_SQUARED private static final float MIN_VERTEX_DISTANCE private static final float MIN_VERTEX_DISTANCE_SQUARED public final Vector3f p public final Vector3f x public final Vector3f y public void PlanarCoordinateSystem() public static PlanarCoordinateSystem XY() public static PlanarCoordinateSystem XZ() public static PlanarCoordinateSystem YZ() private void validate() public PlanarCoordinateSystem withX(Vector3f x, Vector3f n) public PlanarCoordinateSystem withXAt(Vector3f p, Vector3f x, Vector3f n) public PlanarCoordinateSystem withXDifference(Vector3f xStart, Vector3f xEnd, Vector3f n) public PlanarCoordinateSystem withY(Vector3f y, Vector3f n) public PlanarCoordinateSystem withYAt(Vector3f p, Vector3f y, Vector3f n) public PlanarCoordinateSystem withYDifference(Vector3f yStart, Vector3f yEnd, Vector3f n) public PlanarCoordinateSystem forFace(Face face, Vec3Attribute<Vertex> positions) public PlanarCoordinateSystem forPolygon(Iterable<T> elements, MapVec3<T> positionMap) public Vector2f project(float vx, float vy, float vz, Vector2f store) public Vector2f project(float vx, float vy, float vz) public Vector2f project(Vector3f v, Vector2f store) public Vector2f project(Vector3f v) public Vector3f unproject(float vx, float vy, Vector3f store) public Vector3f unproject(float vx, float vy) public Vector3f unproject(Vector2f v, Vector3f store) public Vector3f unproject(Vector2f v) public PlanarCoordinateSystem move(float xOffset, float yOffset, float zOffset) public PlanarCoordinateSystem move(Vector3f offset) public PlanarCoordinateSystem rotate(float angleRad) public PlanarCoordinateSystem scale(float xScale, float yScale) public PlanarCoordinateSystem scale(float scale) public PlanarCoordinateSystem scale(Vector2f scale) @Override
    public String toString() @Override
    public PlanarCoordinateSystem clone() class T class T
Func.java: Imports: ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class Func interface Unary  void exec(T v) class T class T interface Binary  void exec(T a, T b) class T class T interface MapVec3  Vector3f get(T element, Vector3f store) class T class T interface MapVertex  Vertex get(T element) class T class T interface Unary  void exec(T v) class T class T interface Binary  void exec(T a, T b) class T class T interface MapVec3  Vector3f get(T element, Vector3f store) class T class T interface MapVertex  Vertex get(T element) class T class T
HashGrid.java: Imports: com.jme3.math.Vector3f, java.util.Collection, java.util.HashMap, java.util.Map class HashGrid public static final float DEFAULT_CELLSIZE private final float coordScale private final Map<Long, T> grid public void HashGrid() public void HashGrid(float cellSize) public Index getIndexForCoords(Vector3f coords) public Index getIndexForCoords(float x, float y, float z) public T get(Index cellPos) public T getNeighbor(Index cellPos, int walkX, int walkY, int walkZ) public T getAndSet(Index cellPos, T value) public T set(Index cellPos, T value) public T remove(Index cellPos) public int size() public C getAll(C dest) public void clear() class T class C class Index private static final long KEY_OFFSET private static final long KEY_MASK public final int x public final int y public final int z private final long key private void Index(float x, float y, float z) private void Index(int x, int y, int z) public Index walk(int x, int y, int z) private static long key(long x, long y, long z) @Override
        public String toString() class T class C class Index private static final long KEY_OFFSET private static final long KEY_MASK public final int x public final int y public final int z private final long key private void Index(float x, float y, float z) private void Index(int x, int y, int z) public Index walk(int x, int y, int z) private static long key(long x, long y, long z) @Override
        public String toString()
Profiler.java: Imports: java.util.Arrays, java.util.HashMap, java.util.Map class Profiler private static boolean ENABLED private static final double NANO2MILLI private static final Entry ROOT private static final ThreadLocal<Profiler> CURRENT private long tStart private final Entry entry private final Profiler parent private void Profiler(String name, Profiler parent) private void start() public static Profiler start(String name) public static Profiler disabled(String name) public static void setEnabled(boolean enabled) @Override
    public void close() public static void print() public static void printAndClear() private static void printEntry(int level, Entry entry) private static String formatDouble(double val) private static String formatPercent(double val) private static void print(int level, String name, double timeMs, double percent, double avgMs, double minMs, double maxMs, long runs) class Entry public Map<String, Entry> children public final String name public final int order public long time public long min public long max public long runs public void Entry(String name, int order) public void clear() @Override
        public int compareTo(Entry other) class Entry public Map<String, Entry> children public final String name public final int order public long time public long min public long max public long runs public void Entry(String name, int order) public void clear() @Override
        public int compareTo(Entry other)
Vector3i.java: Imports:  class Vector3i public int x public int y public int z public void Vector3i() public void Vector3i(int x, int y, int z) public void Vector3i(Vector3i copy) public Vector3i set(Vector3i vect) public Vector3i set(int x, int y, int z) public Vector3i addLocal(Vector3i other) public Vector3i addLocal(int x, int y, int z) public Vector3i subtractLocal(Vector3i other) public Vector3i subtractLocal(int x, int y, int z) public Vector3i multLocal(Vector3i other) public Vector3i multLocal(int x, int y, int z) public Vector3i multLocal(int scalar) public Vector3i divideLocal(Vector3i other) public Vector3i divideLocal(int x, int y, int z) public Vector3i divideLocal(int scalar) @Override
    public String toString() @Override
    public boolean equals(Object o) @Override
    public int hashCode()
ColorUtil.java: Imports: com.jme3.math.ColorRGBA, com.jme3.math.FastMath class ColorUtil public static ColorRGBA hsv(float h, float s, float v) public static ColorRGBA hsv(float h, float s, float v, ColorRGBA store) public static ColorRGBA getRandomColor(float hue, float hueVariance, float saturation, float value)
DebugVisual.java: Imports: ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.conversion.TriangleExport, ch.alchemists.jbmesh.lookup.ExactHashDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.asset.AssetManager, com.jme3.font.BitmapFont, com.jme3.font.BitmapText, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.FastMath, com.jme3.math.Quaternion, com.jme3.math.Vector3f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.shape.Sphere, java.util.ArrayList, java.util.List, java.util.concurrent.ConcurrentHashMap class DebugVisual private static final ConcurrentHashMap<String, List<DebugVisual>> visuals private static final ConcurrentHashMap<String, PointTransformation> transforms private static final ConcurrentHashMap<Integer, ColorRGBA> colors public static float colorHue public static float colorHueVariance public static float colorSaturation public static float colorBrightness public static float colorAlpha private final List<Vector3f> points public ColorRGBA pointColor public float pointSize private final List<Line> lines public ColorRGBA lineColor public float arrowLength private final List<Text> texts public ColorRGBA textColor public float textSize private final List<Vector3f[]> faces private final List<ColorRGBA> faceColors private final String name private void DebugVisual(String name) public static DebugVisual get(String name) public static DebugVisual get(String name, int index) public static List<DebugVisual> getAll(String name) public static DebugVisual next(String name) public static void clear(String name) public static void setPointTransformation(String name, PointTransformation transform) public static ColorRGBA getColor(int index) public void addPoint(Vector3f p) public void addLine(Vector3f start, Vector3f end) public void addArrow(Vector3f start, Vector3f end) public void addArrow(Vector3f start, Vector3f end, Vector3f normal) private void addLine(Vector3f start, Vector3f end, List<Line> list) public void addText(Vector3f p, String text) public void addFace(Vector3f... vertices) public void addFace(ColorRGBA color, Vector3f... vertices) public Node createNode(AssetManager assetManager) private void createPoints(AssetManager assetManager, Node node) private void createLines(AssetManager assetManager, Node node) private void createTexts(AssetManager assetManager, Node node) private void createFaces(AssetManager assetManager, Node node) public Vector3f transform(Vector3f p) interface PointTransformation  Vector3f transform(Vector3f p) class Line public final Vector3f start public final Vector3f end class Text public final Vector3f p public String text interface PointTransformation  Vector3f transform(Vector3f p) class Line public final Vector3f start public final Vector3f end class Text public final Vector3f p public String text
LoopMapIterator.java: Imports: ch.alchemists.jbmesh.structure.Loop, java.util.Iterator, java.util.function.Function class LoopMapIterator private final Iterator<Loop> it private final Function<Loop, E> mapFunc public void LoopMapIterator(Iterator<Loop> it, Function<Loop, E> mapFunc) @Override
    public final boolean hasNext() @Override
    public final E next() class E class E
DebugVisualState.java: Imports: com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.app.state.BaseAppState, com.jme3.input.InputManager, com.jme3.input.KeyInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.InputListener, com.jme3.input.controls.KeyTrigger, com.jme3.scene.Node, com.jme3.scene.Spatial class DebugVisualState private static final String ACTION_HISTORY_NEXT private static final String ACTION_HISTORY_PREV private final Node node private Spatial currentVis private int currentIndex private final InputListener listener public void DebugVisualState(String name) @Override
    protected void initialize(Application app) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() public void reset() public void updateVis() private void updateVis(int index)
PlanarCoordinateSystem.java: Imports: ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.normalgen.NewellNormal, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Quaternion, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.Iterator class PlanarCoordinateSystem private static final float AXIS_LENGTH_EPSILON private static final float AXIS_LENGTH_EPSILON_SQUARED private static final float MIN_VERTEX_DISTANCE private static final float MIN_VERTEX_DISTANCE_SQUARED public final Vector3f p public final Vector3f x public final Vector3f y public void PlanarCoordinateSystem() public static PlanarCoordinateSystem XY() public static PlanarCoordinateSystem XZ() public static PlanarCoordinateSystem YZ() private void validate() public PlanarCoordinateSystem withX(Vector3f x, Vector3f n) public PlanarCoordinateSystem withXAt(Vector3f p, Vector3f x, Vector3f n) public PlanarCoordinateSystem withXDifference(Vector3f xStart, Vector3f xEnd, Vector3f n) public PlanarCoordinateSystem withY(Vector3f y, Vector3f n) public PlanarCoordinateSystem withYAt(Vector3f p, Vector3f y, Vector3f n) public PlanarCoordinateSystem withYDifference(Vector3f yStart, Vector3f yEnd, Vector3f n) public PlanarCoordinateSystem forFace(Face face, Vec3Attribute<Vertex> positions) public PlanarCoordinateSystem forPolygon(Iterable<T> elements, MapVec3<T> positionMap) public Vector2f project(float vx, float vy, float vz, Vector2f store) public Vector2f project(float vx, float vy, float vz) public Vector2f project(Vector3f v, Vector2f store) public Vector2f project(Vector3f v) public Vector3f unproject(float vx, float vy, Vector3f store) public Vector3f unproject(float vx, float vy) public Vector3f unproject(Vector2f v, Vector3f store) public Vector3f unproject(Vector2f v) public PlanarCoordinateSystem move(float xOffset, float yOffset, float zOffset) public PlanarCoordinateSystem move(Vector3f offset) public PlanarCoordinateSystem rotate(float angleRad) public PlanarCoordinateSystem scale(float xScale, float yScale) public PlanarCoordinateSystem scale(float scale) public PlanarCoordinateSystem scale(Vector2f scale) @Override
    public String toString() @Override
    public PlanarCoordinateSystem clone() class T class T
Func.java: Imports: ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class Func interface Unary  void exec(T v) class T class T interface Binary  void exec(T a, T b) class T class T interface MapVec3  Vector3f get(T element, Vector3f store) class T class T interface MapVertex  Vertex get(T element) class T class T interface Unary  void exec(T v) class T class T interface Binary  void exec(T a, T b) class T class T interface MapVec3  Vector3f get(T element, Vector3f store) class T class T interface MapVertex  Vertex get(T element) class T class T
HashGrid.java: Imports: com.jme3.math.Vector3f, java.util.Collection, java.util.HashMap, java.util.Map class HashGrid public static final float DEFAULT_CELLSIZE private final float coordScale private final Map<Long, T> grid public void HashGrid() public void HashGrid(float cellSize) public Index getIndexForCoords(Vector3f coords) public Index getIndexForCoords(float x, float y, float z) public T get(Index cellPos) public T getNeighbor(Index cellPos, int walkX, int walkY, int walkZ) public T getAndSet(Index cellPos, T value) public T set(Index cellPos, T value) public T remove(Index cellPos) public int size() public C getAll(C dest) public void clear() class T class C class Index private static final long KEY_OFFSET private static final long KEY_MASK public final int x public final int y public final int z private final long key private void Index(float x, float y, float z) private void Index(int x, int y, int z) public Index walk(int x, int y, int z) private static long key(long x, long y, long z) @Override
        public String toString() class T class C class Index private static final long KEY_OFFSET private static final long KEY_MASK public final int x public final int y public final int z private final long key private void Index(float x, float y, float z) private void Index(int x, int y, int z) public Index walk(int x, int y, int z) private static long key(long x, long y, long z) @Override
        public String toString()
Profiler.java: Imports: java.util.Arrays, java.util.HashMap, java.util.Map class Profiler private static boolean ENABLED private static final double NANO2MILLI private static final Entry ROOT private static final ThreadLocal<Profiler> CURRENT private long tStart private final Entry entry private final Profiler parent private void Profiler(String name, Profiler parent) private void start() public static Profiler start(String name) public static Profiler disabled(String name) public static void setEnabled(boolean enabled) @Override
    public void close() public static void print() public static void printAndClear() private static void printEntry(int level, Entry entry) private static String formatDouble(double val) private static String formatPercent(double val) private static void print(int level, String name, double timeMs, double percent, double avgMs, double minMs, double maxMs, long runs) class Entry public Map<String, Entry> children public final String name public final int order public long time public long min public long max public long runs public void Entry(String name, int order) public void clear() @Override
        public int compareTo(Entry other) class Entry public Map<String, Entry> children public final String name public final int order public long time public long min public long max public long runs public void Entry(String name, int order) public void clear() @Override
        public int compareTo(Entry other)
Vector3i.java: Imports:  class Vector3i public int x public int y public int z public void Vector3i() public void Vector3i(int x, int y, int z) public void Vector3i(Vector3i copy) public Vector3i set(Vector3i vect) public Vector3i set(int x, int y, int z) public Vector3i addLocal(Vector3i other) public Vector3i addLocal(int x, int y, int z) public Vector3i subtractLocal(Vector3i other) public Vector3i subtractLocal(int x, int y, int z) public Vector3i multLocal(Vector3i other) public Vector3i multLocal(int x, int y, int z) public Vector3i multLocal(int scalar) public Vector3i divideLocal(Vector3i other) public Vector3i divideLocal(int x, int y, int z) public Vector3i divideLocal(int scalar) @Override
    public String toString() @Override
    public boolean equals(Object o) @Override
    public int hashCode()
ColorUtil.java: Imports: com.jme3.math.ColorRGBA, com.jme3.math.FastMath class ColorUtil public static ColorRGBA hsv(float h, float s, float v) public static ColorRGBA hsv(float h, float s, float v, ColorRGBA store) public static ColorRGBA getRandomColor(float hue, float hueVariance, float saturation, float value)
DebugVisual.java: Imports: ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.conversion.TriangleExport, ch.alchemists.jbmesh.lookup.ExactHashDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.asset.AssetManager, com.jme3.font.BitmapFont, com.jme3.font.BitmapText, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.FastMath, com.jme3.math.Quaternion, com.jme3.math.Vector3f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.shape.Sphere, java.util.ArrayList, java.util.List, java.util.concurrent.ConcurrentHashMap class DebugVisual private static final ConcurrentHashMap<String, List<DebugVisual>> visuals private static final ConcurrentHashMap<String, PointTransformation> transforms private static final ConcurrentHashMap<Integer, ColorRGBA> colors public static float colorHue public static float colorHueVariance public static float colorSaturation public static float colorBrightness public static float colorAlpha private final List<Vector3f> points public ColorRGBA pointColor public float pointSize private final List<Line> lines public ColorRGBA lineColor public float arrowLength private final List<Text> texts public ColorRGBA textColor public float textSize private final List<Vector3f[]> faces private final List<ColorRGBA> faceColors private final String name private void DebugVisual(String name) public static DebugVisual get(String name) public static DebugVisual get(String name, int index) public static List<DebugVisual> getAll(String name) public static DebugVisual next(String name) public static void clear(String name) public static void setPointTransformation(String name, PointTransformation transform) public static ColorRGBA getColor(int index) public void addPoint(Vector3f p) public void addLine(Vector3f start, Vector3f end) public void addArrow(Vector3f start, Vector3f end) public void addArrow(Vector3f start, Vector3f end, Vector3f normal) private void addLine(Vector3f start, Vector3f end, List<Line> list) public void addText(Vector3f p, String text) public void addFace(Vector3f... vertices) public void addFace(ColorRGBA color, Vector3f... vertices) public Node createNode(AssetManager assetManager) private void createPoints(AssetManager assetManager, Node node) private void createLines(AssetManager assetManager, Node node) private void createTexts(AssetManager assetManager, Node node) private void createFaces(AssetManager assetManager, Node node) public Vector3f transform(Vector3f p) interface PointTransformation  Vector3f transform(Vector3f p) class Line public final Vector3f start public final Vector3f end class Text public final Vector3f p public String text interface PointTransformation  Vector3f transform(Vector3f p) class Line public final Vector3f start public final Vector3f end class Text public final Vector3f p public String text
LoopMapIterator.java: Imports: ch.alchemists.jbmesh.structure.Loop, java.util.Iterator, java.util.function.Function class LoopMapIterator private final Iterator<Loop> it private final Function<Loop, E> mapFunc public void LoopMapIterator(Iterator<Loop> it, Function<Loop, E> mapFunc) @Override
    public final boolean hasNext() @Override
    public final E next() class E class E
DebugVisualState.java: Imports: com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.app.state.BaseAppState, com.jme3.input.InputManager, com.jme3.input.KeyInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.InputListener, com.jme3.input.controls.KeyTrigger, com.jme3.scene.Node, com.jme3.scene.Spatial class DebugVisualState private static final String ACTION_HISTORY_NEXT private static final String ACTION_HISTORY_PREV private final Node node private Spatial currentVis private int currentIndex private final InputListener listener public void DebugVisualState(String name) @Override
    protected void initialize(Application app) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() public void reset() public void updateVis() private void updateVis(int index)
PlanarCoordinateSystem.java: Imports: ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.normalgen.NewellNormal, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Quaternion, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.Iterator class PlanarCoordinateSystem private static final float AXIS_LENGTH_EPSILON private static final float AXIS_LENGTH_EPSILON_SQUARED private static final float MIN_VERTEX_DISTANCE private static final float MIN_VERTEX_DISTANCE_SQUARED public final Vector3f p public final Vector3f x public final Vector3f y public void PlanarCoordinateSystem() public static PlanarCoordinateSystem XY() public static PlanarCoordinateSystem XZ() public static PlanarCoordinateSystem YZ() private void validate() public PlanarCoordinateSystem withX(Vector3f x, Vector3f n) public PlanarCoordinateSystem withXAt(Vector3f p, Vector3f x, Vector3f n) public PlanarCoordinateSystem withXDifference(Vector3f xStart, Vector3f xEnd, Vector3f n) public PlanarCoordinateSystem withY(Vector3f y, Vector3f n) public PlanarCoordinateSystem withYAt(Vector3f p, Vector3f y, Vector3f n) public PlanarCoordinateSystem withYDifference(Vector3f yStart, Vector3f yEnd, Vector3f n) public PlanarCoordinateSystem forFace(Face face, Vec3Attribute<Vertex> positions) public PlanarCoordinateSystem forPolygon(Iterable<T> elements, MapVec3<T> positionMap) public Vector2f project(float vx, float vy, float vz, Vector2f store) public Vector2f project(float vx, float vy, float vz) public Vector2f project(Vector3f v, Vector2f store) public Vector2f project(Vector3f v) public Vector3f unproject(float vx, float vy, Vector3f store) public Vector3f unproject(float vx, float vy) public Vector3f unproject(Vector2f v, Vector3f store) public Vector3f unproject(Vector2f v) public PlanarCoordinateSystem move(float xOffset, float yOffset, float zOffset) public PlanarCoordinateSystem move(Vector3f offset) public PlanarCoordinateSystem rotate(float angleRad) public PlanarCoordinateSystem scale(float xScale, float yScale) public PlanarCoordinateSystem scale(float scale) public PlanarCoordinateSystem scale(Vector2f scale) @Override
    public String toString() @Override
    public PlanarCoordinateSystem clone() class T class T

package ch.alchemists.jbmesh.lookup
VertexDeduplication.java: Imports: ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f interface VertexDeduplication  void addExisting(Vertex vertex)  void clear()  Vertex getVertex(Vector3f location)  Vertex getOrCreateVertex(Vector3f location)
HashGridDeduplication.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.HashGrid, com.jme3.math.Vector3f, java.util.ArrayList, java.util.List class HashGridDeduplication private static final int[][][] WALK_DIRECTION private final float epsilon private final float epsilonSquared private final float cellSize private final BMesh bmesh private final Vec3Attribute<Vertex> positions private final HashGrid<List<Vertex>> grid private final Vector3f p public void HashGridDeduplication(BMesh bmesh) public void HashGridDeduplication(BMesh bmesh, float epsilon) @Override
    public void addExisting(Vertex vertex) public void remove(Vertex vertex) @Override
    public void clear() @Override
    public Vertex getVertex(Vector3f position) @Override
    public Vertex getOrCreateVertex(Vector3f position) private int[][] getWalkDirections(Index gridIndex, Vector3f position) private Vertex searchVertexWalk(Index gridIndex, Vector3f position) private Vertex searchVertex(List<Vertex> vertices, Vector3f position)
ExactHashDeduplication.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.HashMap, java.util.Map class ExactHashDeduplication private final BMesh bmesh private final Map<Vector3f, Vertex> map private final Vec3Attribute<Vertex> positions public void ExactHashDeduplication(BMesh bmesh) public void ExactHashDeduplication(BMesh bmesh, Vec3Attribute<Vertex> attrPosition) @Override
    public void addExisting(Vertex vertex) @Override
    public void clear() @Override
    public Vertex getVertex(Vector3f position) @Override
    public Vertex getOrCreateVertex(Vector3f position)
VertexDeduplication.java: Imports: ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f interface VertexDeduplication  void addExisting(Vertex vertex)  void clear()  Vertex getVertex(Vector3f location)  Vertex getOrCreateVertex(Vector3f location)
HashGridDeduplication.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.HashGrid, com.jme3.math.Vector3f, java.util.ArrayList, java.util.List class HashGridDeduplication private static final int[][][] WALK_DIRECTION private final float epsilon private final float epsilonSquared private final float cellSize private final BMesh bmesh private final Vec3Attribute<Vertex> positions private final HashGrid<List<Vertex>> grid private final Vector3f p public void HashGridDeduplication(BMesh bmesh) public void HashGridDeduplication(BMesh bmesh, float epsilon) @Override
    public void addExisting(Vertex vertex) public void remove(Vertex vertex) @Override
    public void clear() @Override
    public Vertex getVertex(Vector3f position) @Override
    public Vertex getOrCreateVertex(Vector3f position) private int[][] getWalkDirections(Index gridIndex, Vector3f position) private Vertex searchVertexWalk(Index gridIndex, Vector3f position) private Vertex searchVertex(List<Vertex> vertices, Vector3f position)
ExactHashDeduplication.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.HashMap, java.util.Map class ExactHashDeduplication private final BMesh bmesh private final Map<Vector3f, Vertex> map private final Vec3Attribute<Vertex> positions public void ExactHashDeduplication(BMesh bmesh) public void ExactHashDeduplication(BMesh bmesh, Vec3Attribute<Vertex> attrPosition) @Override
    public void addExisting(Vertex vertex) @Override
    public void clear() @Override
    public Vertex getVertex(Vector3f position) @Override
    public Vertex getOrCreateVertex(Vector3f position)
VertexDeduplication.java: Imports: ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f interface VertexDeduplication  void addExisting(Vertex vertex)  void clear()  Vertex getVertex(Vector3f location)  Vertex getOrCreateVertex(Vector3f location)
HashGridDeduplication.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.HashGrid, com.jme3.math.Vector3f, java.util.ArrayList, java.util.List class HashGridDeduplication private static final int[][][] WALK_DIRECTION private final float epsilon private final float epsilonSquared private final float cellSize private final BMesh bmesh private final Vec3Attribute<Vertex> positions private final HashGrid<List<Vertex>> grid private final Vector3f p public void HashGridDeduplication(BMesh bmesh) public void HashGridDeduplication(BMesh bmesh, float epsilon) @Override
    public void addExisting(Vertex vertex) public void remove(Vertex vertex) @Override
    public void clear() @Override
    public Vertex getVertex(Vector3f position) @Override
    public Vertex getOrCreateVertex(Vector3f position) private int[][] getWalkDirections(Index gridIndex, Vector3f position) private Vertex searchVertexWalk(Index gridIndex, Vector3f position) private Vertex searchVertex(List<Vertex> vertices, Vector3f position)
ExactHashDeduplication.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.HashMap, java.util.Map class ExactHashDeduplication private final BMesh bmesh private final Map<Vector3f, Vertex> map private final Vec3Attribute<Vertex> positions public void ExactHashDeduplication(BMesh bmesh) public void ExactHashDeduplication(BMesh bmesh, Vec3Attribute<Vertex> attrPosition) @Override
    public void addExisting(Vertex vertex) @Override
    public void clear() @Override
    public Vertex getVertex(Vector3f position) @Override
    public Vertex getOrCreateVertex(Vector3f position)

package ch.alchemists.jbmesh.operator.bool
Cut.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.meshgen.DistanceFunction, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f, java.util.ArrayList, java.util.HashMap, java.util.List, java.util.Map class Cut protected final BMesh bmesh protected final Vec3Attribute<Vertex> positions protected DistanceFunction dfunc public void Cut(BMesh bmesh, DistanceFunction dfunc) protected void accumulateInside(Face face) protected void accumulateOutside(Face face) protected void accumulateIntersect(Face face) protected void accumulateCutVertex(Vertex vertex) protected void accumulateCutEdge(Edge edge) protected abstract void prepareCut() protected abstract void processCut() public void apply(List<Face> faces) private List<FaceSplitInfo> findEdgeCuts(List<Face> faces) private void moveToBorder(Vertex v, Vector3f inside, Vector3f outside) private void moveOnPlane() class FaceSplitInfo public Loop start public Loop end public Edge startEdge public Edge endEdge class FaceSplitInfo public Loop start public Loop end public Edge startEdge public Edge endEdge
Subtract.java: Imports: ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.HashGridDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.operator.VertexOps, ch.alchemists.jbmesh.operator.meshgen.DistanceFunction, ch.alchemists.jbmesh.operator.meshgen.MarchingCube, ch.alchemists.jbmesh.operator.meshgen.Tables, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.HashGrid, com.jme3.bounding.BoundingBox, com.jme3.math.Vector3f, java.util class Subtract private final List<Face> insideFaces private final Set<Vertex> splitResultVertices private final Set<Edge> borderEdges private final Set<Vertex> borderVertices public void Subtract(BMesh bmesh, DistanceFunction dfunc) @Override protected void accumulateInside(Face face) @Override
    protected void accumulateCutVertex(Vertex vertex) @Override
    protected void accumulateCutEdge(Edge edge) @Override
    protected void prepareCut() @Override
    protected void processCut() private void marchingCubes() private static void putQueue(Queue<Index> queue, Vector3f p, HashGrid<Vector3f> visitedCells, Index gridIndex, float cellSize, int walkDirections) private Vector3f alignToGrid(Vector3f p, float cellSize)
Cut.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.meshgen.DistanceFunction, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f, java.util.ArrayList, java.util.HashMap, java.util.List, java.util.Map class Cut protected final BMesh bmesh protected final Vec3Attribute<Vertex> positions protected DistanceFunction dfunc public void Cut(BMesh bmesh, DistanceFunction dfunc) protected void accumulateInside(Face face) protected void accumulateOutside(Face face) protected void accumulateIntersect(Face face) protected void accumulateCutVertex(Vertex vertex) protected void accumulateCutEdge(Edge edge) protected abstract void prepareCut() protected abstract void processCut() public void apply(List<Face> faces) private List<FaceSplitInfo> findEdgeCuts(List<Face> faces) private void moveToBorder(Vertex v, Vector3f inside, Vector3f outside) private void moveOnPlane() class FaceSplitInfo public Loop start public Loop end public Edge startEdge public Edge endEdge class FaceSplitInfo public Loop start public Loop end public Edge startEdge public Edge endEdge
Subtract.java: Imports: ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.HashGridDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.operator.VertexOps, ch.alchemists.jbmesh.operator.meshgen.DistanceFunction, ch.alchemists.jbmesh.operator.meshgen.MarchingCube, ch.alchemists.jbmesh.operator.meshgen.Tables, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.HashGrid, com.jme3.bounding.BoundingBox, com.jme3.math.Vector3f, java.util class Subtract private final List<Face> insideFaces private final Set<Vertex> splitResultVertices private final Set<Edge> borderEdges private final Set<Vertex> borderVertices public void Subtract(BMesh bmesh, DistanceFunction dfunc) @Override protected void accumulateInside(Face face) @Override
    protected void accumulateCutVertex(Vertex vertex) @Override
    protected void accumulateCutEdge(Edge edge) @Override
    protected void prepareCut() @Override
    protected void processCut() private void marchingCubes() private static void putQueue(Queue<Index> queue, Vector3f p, HashGrid<Vector3f> visitedCells, Index gridIndex, float cellSize, int walkDirections) private Vector3f alignToGrid(Vector3f p, float cellSize)
Cut.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.meshgen.DistanceFunction, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f, java.util.ArrayList, java.util.HashMap, java.util.List, java.util.Map class Cut protected final BMesh bmesh protected final Vec3Attribute<Vertex> positions protected DistanceFunction dfunc public void Cut(BMesh bmesh, DistanceFunction dfunc) protected void accumulateInside(Face face) protected void accumulateOutside(Face face) protected void accumulateIntersect(Face face) protected void accumulateCutVertex(Vertex vertex) protected void accumulateCutEdge(Edge edge) protected abstract void prepareCut() protected abstract void processCut() public void apply(List<Face> faces) private List<FaceSplitInfo> findEdgeCuts(List<Face> faces) private void moveToBorder(Vertex v, Vector3f inside, Vector3f outside) private void moveOnPlane() class FaceSplitInfo public Loop start public Loop end public Edge startEdge public Edge endEdge class FaceSplitInfo public Loop start public Loop end public Edge startEdge public Edge endEdge
Subtract.java: Imports: ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.HashGridDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.operator.VertexOps, ch.alchemists.jbmesh.operator.meshgen.DistanceFunction, ch.alchemists.jbmesh.operator.meshgen.MarchingCube, ch.alchemists.jbmesh.operator.meshgen.Tables, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.HashGrid, com.jme3.bounding.BoundingBox, com.jme3.math.Vector3f, java.util class Subtract private final List<Face> insideFaces private final Set<Vertex> splitResultVertices private final Set<Edge> borderEdges private final Set<Vertex> borderVertices public void Subtract(BMesh bmesh, DistanceFunction dfunc) @Override protected void accumulateInside(Face face) @Override
    protected void accumulateCutVertex(Vertex vertex) @Override
    protected void accumulateCutEdge(Edge edge) @Override
    protected void prepareCut() @Override
    protected void processCut() private void marchingCubes() private static void putQueue(Queue<Index> queue, Vector3f p, HashGrid<Vector3f> visitedCells, Index gridIndex, float cellSize, int walkDirections) private Vector3f alignToGrid(Vector3f p, float cellSize)

package ch.alchemists.jbmesh.operator.meshgen
Tables.java: Imports:  class Tables public static final byte[][] edgeVertexTable public static final short[] MC_edgeTable public static final byte[][] MC_triTable public static final byte[][] WALK_DIRECTIONS public static final byte[] EDGE_WALK_DIRECTIONS public static final byte[][] BOX_WALK_DIRECTIONS
MarchingCube.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class MarchingCube private final float cellSize private final BMesh bmesh private final VertexDeduplication dedup private final Vec3Attribute<Loop> loopNormals private final Vector3f[] corners private final float[] dist private final Vector3f[] intersectionPoints private final Vector3f[] normals public void MarchingCube(BMesh bmesh, VertexDeduplication dedup, float cellSize, boolean setNormals) public void setPosition(Vector3f position) public int process(DistanceFunction dfunc)
DistanceFunction.java: Imports: com.jme3.bounding.BoundingBox, com.jme3.math.Vector3f interface DistanceFunction  float dist(Vector3f v) default float getEpsilon() default void normal(Vector3f p, Vector3f store) default void tangent(Vector3f p, Vector3f reference, Vector3f store) default BoundingBox getBounds() class Plane private final Vector3f p private final Vector3f n private final Vector3f proj public void Plane(Vector3f p, Vector3f n) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Sphere private final Vector3f center private final float radius public void Sphere(Vector3f center, float radius) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Ellipsoid private final Vector3f center private final Vector3f radius private final Vector3f radiusSquared private final Vector3f tempA private final Vector3f tempB public void Ellipsoid(Vector3f center, Vector3f radius) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds() class Box private final Vector3f p private final Vector3f size private final Vector3f temp public void Box(Vector3f p, Vector3f size) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds() class Plane private final Vector3f p private final Vector3f n private final Vector3f proj public void Plane(Vector3f p, Vector3f n) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Sphere private final Vector3f center private final float radius public void Sphere(Vector3f center, float radius) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Ellipsoid private final Vector3f center private final Vector3f radius private final Vector3f radiusSquared private final Vector3f tempA private final Vector3f tempB public void Ellipsoid(Vector3f center, Vector3f radius) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds() class Box private final Vector3f p private final Vector3f size private final Vector3f temp public void Box(Vector3f p, Vector3f size) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds()
MarchingCubeBuilder.java: Imports: ch.alchemists.jbmesh.lookup.HashGridDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.util.HashGrid, com.jme3.bounding.BoundingBox, com.jme3.math.Vector3f, java.util.ArrayDeque, java.util.Iterator, java.util.Queue class MarchingCubeBuilder private static final float DEDUP_EPSILON private static final float BOUND_EPSILON private static final boolean DEFAULT_SET_NORMALS public static BMesh build(BMesh bmesh, DistanceFunction dfunc, float cellSize) public static BMesh build(BMesh bmesh, DistanceFunction dfunc, float cellSize, boolean setNormals) public static BMesh buildFollowSurface(BMesh bmesh, DistanceFunction dfunc, float cellSize) public static BMesh buildFollowSurface(BMesh bmesh, DistanceFunction dfunc, float cellSize, boolean setNormals) public static BMesh buildFollowSurface(BMesh bmesh, DistanceFunction dfunc, float cellSize, boolean setNormals, Iterator<Vector3f> cellPosIterator) private static void putQueue(Queue<Index> queue, Vector3f p, HashGrid<Vector3f> visitedCells, Index gridIndex, float cellSize, int walkDirections) class DefaultCellPosIterator private final Vector3f start private final Vector3f end private final Vector3f p private final float cellSize public void DefaultCellPosIterator(BoundingBox bounds, float cellSize) @Override
        public boolean hasNext() @Override
        public Vector3f next() class DefaultCellPosIterator private final Vector3f start private final Vector3f end private final Vector3f p private final float cellSize public void DefaultCellPosIterator(BoundingBox bounds, float cellSize) @Override
        public boolean hasNext() @Override
        public Vector3f next()
Tables.java: Imports:  class Tables public static final byte[][] edgeVertexTable public static final short[] MC_edgeTable public static final byte[][] MC_triTable public static final byte[][] WALK_DIRECTIONS public static final byte[] EDGE_WALK_DIRECTIONS public static final byte[][] BOX_WALK_DIRECTIONS
MarchingCube.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class MarchingCube private final float cellSize private final BMesh bmesh private final VertexDeduplication dedup private final Vec3Attribute<Loop> loopNormals private final Vector3f[] corners private final float[] dist private final Vector3f[] intersectionPoints private final Vector3f[] normals public void MarchingCube(BMesh bmesh, VertexDeduplication dedup, float cellSize, boolean setNormals) public void setPosition(Vector3f position) public int process(DistanceFunction dfunc)
DistanceFunction.java: Imports: com.jme3.bounding.BoundingBox, com.jme3.math.Vector3f interface DistanceFunction  float dist(Vector3f v) default float getEpsilon() default void normal(Vector3f p, Vector3f store) default void tangent(Vector3f p, Vector3f reference, Vector3f store) default BoundingBox getBounds() class Plane private final Vector3f p private final Vector3f n private final Vector3f proj public void Plane(Vector3f p, Vector3f n) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Sphere private final Vector3f center private final float radius public void Sphere(Vector3f center, float radius) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Ellipsoid private final Vector3f center private final Vector3f radius private final Vector3f radiusSquared private final Vector3f tempA private final Vector3f tempB public void Ellipsoid(Vector3f center, Vector3f radius) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds() class Box private final Vector3f p private final Vector3f size private final Vector3f temp public void Box(Vector3f p, Vector3f size) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds() class Plane private final Vector3f p private final Vector3f n private final Vector3f proj public void Plane(Vector3f p, Vector3f n) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Sphere private final Vector3f center private final float radius public void Sphere(Vector3f center, float radius) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Ellipsoid private final Vector3f center private final Vector3f radius private final Vector3f radiusSquared private final Vector3f tempA private final Vector3f tempB public void Ellipsoid(Vector3f center, Vector3f radius) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds() class Box private final Vector3f p private final Vector3f size private final Vector3f temp public void Box(Vector3f p, Vector3f size) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds()
MarchingCubeBuilder.java: Imports: ch.alchemists.jbmesh.lookup.HashGridDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.util.HashGrid, com.jme3.bounding.BoundingBox, com.jme3.math.Vector3f, java.util.ArrayDeque, java.util.Iterator, java.util.Queue class MarchingCubeBuilder private static final float DEDUP_EPSILON private static final float BOUND_EPSILON private static final boolean DEFAULT_SET_NORMALS public static BMesh build(BMesh bmesh, DistanceFunction dfunc, float cellSize) public static BMesh build(BMesh bmesh, DistanceFunction dfunc, float cellSize, boolean setNormals) public static BMesh buildFollowSurface(BMesh bmesh, DistanceFunction dfunc, float cellSize) public static BMesh buildFollowSurface(BMesh bmesh, DistanceFunction dfunc, float cellSize, boolean setNormals) public static BMesh buildFollowSurface(BMesh bmesh, DistanceFunction dfunc, float cellSize, boolean setNormals, Iterator<Vector3f> cellPosIterator) private static void putQueue(Queue<Index> queue, Vector3f p, HashGrid<Vector3f> visitedCells, Index gridIndex, float cellSize, int walkDirections) class DefaultCellPosIterator private final Vector3f start private final Vector3f end private final Vector3f p private final float cellSize public void DefaultCellPosIterator(BoundingBox bounds, float cellSize) @Override
        public boolean hasNext() @Override
        public Vector3f next() class DefaultCellPosIterator private final Vector3f start private final Vector3f end private final Vector3f p private final float cellSize public void DefaultCellPosIterator(BoundingBox bounds, float cellSize) @Override
        public boolean hasNext() @Override
        public Vector3f next()
Tables.java: Imports:  class Tables public static final byte[][] edgeVertexTable public static final short[] MC_edgeTable public static final byte[][] MC_triTable public static final byte[][] WALK_DIRECTIONS public static final byte[] EDGE_WALK_DIRECTIONS public static final byte[][] BOX_WALK_DIRECTIONS
MarchingCube.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class MarchingCube private final float cellSize private final BMesh bmesh private final VertexDeduplication dedup private final Vec3Attribute<Loop> loopNormals private final Vector3f[] corners private final float[] dist private final Vector3f[] intersectionPoints private final Vector3f[] normals public void MarchingCube(BMesh bmesh, VertexDeduplication dedup, float cellSize, boolean setNormals) public void setPosition(Vector3f position) public int process(DistanceFunction dfunc)
DistanceFunction.java: Imports: com.jme3.bounding.BoundingBox, com.jme3.math.Vector3f interface DistanceFunction  float dist(Vector3f v) default float getEpsilon() default void normal(Vector3f p, Vector3f store) default void tangent(Vector3f p, Vector3f reference, Vector3f store) default BoundingBox getBounds() class Plane private final Vector3f p private final Vector3f n private final Vector3f proj public void Plane(Vector3f p, Vector3f n) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Sphere private final Vector3f center private final float radius public void Sphere(Vector3f center, float radius) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Ellipsoid private final Vector3f center private final Vector3f radius private final Vector3f radiusSquared private final Vector3f tempA private final Vector3f tempB public void Ellipsoid(Vector3f center, Vector3f radius) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds() class Box private final Vector3f p private final Vector3f size private final Vector3f temp public void Box(Vector3f p, Vector3f size) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds() class Plane private final Vector3f p private final Vector3f n private final Vector3f proj public void Plane(Vector3f p, Vector3f n) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Sphere private final Vector3f center private final float radius public void Sphere(Vector3f center, float radius) @Override
        public float dist(Vector3f v) @Override
        public void normal(Vector3f p, Vector3f store) @Override
        public void tangent(Vector3f p, Vector3f reference, Vector3f store) @Override
        public BoundingBox getBounds() class Ellipsoid private final Vector3f center private final Vector3f radius private final Vector3f radiusSquared private final Vector3f tempA private final Vector3f tempB public void Ellipsoid(Vector3f center, Vector3f radius) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds() class Box private final Vector3f p private final Vector3f size private final Vector3f temp public void Box(Vector3f p, Vector3f size) @Override
        public float dist(Vector3f v) @Override
        public BoundingBox getBounds()
MarchingCubeBuilder.java: Imports: ch.alchemists.jbmesh.lookup.HashGridDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.util.HashGrid, com.jme3.bounding.BoundingBox, com.jme3.math.Vector3f, java.util.ArrayDeque, java.util.Iterator, java.util.Queue class MarchingCubeBuilder private static final float DEDUP_EPSILON private static final float BOUND_EPSILON private static final boolean DEFAULT_SET_NORMALS public static BMesh build(BMesh bmesh, DistanceFunction dfunc, float cellSize) public static BMesh build(BMesh bmesh, DistanceFunction dfunc, float cellSize, boolean setNormals) public static BMesh buildFollowSurface(BMesh bmesh, DistanceFunction dfunc, float cellSize) public static BMesh buildFollowSurface(BMesh bmesh, DistanceFunction dfunc, float cellSize, boolean setNormals) public static BMesh buildFollowSurface(BMesh bmesh, DistanceFunction dfunc, float cellSize, boolean setNormals, Iterator<Vector3f> cellPosIterator) private static void putQueue(Queue<Index> queue, Vector3f p, HashGrid<Vector3f> visitedCells, Index gridIndex, float cellSize, int walkDirections) class DefaultCellPosIterator private final Vector3f start private final Vector3f end private final Vector3f p private final float cellSize public void DefaultCellPosIterator(BoundingBox bounds, float cellSize) @Override
        public boolean hasNext() @Override
        public Vector3f next() class DefaultCellPosIterator private final Vector3f start private final Vector3f end private final Vector3f p private final float cellSize public void DefaultCellPosIterator(BoundingBox bounds, float cellSize) @Override
        public boolean hasNext() @Override
        public Vector3f next()

package ch.alchemists.jbmesh.operator.skeleton
EdgeEvent.java: Imports:  class EdgeEvent private final MovingNode n0 private final MovingNode n1  void EdgeEvent(MovingNode n0, MovingNode n1, float time) @Override
    public void onEventQueued() @Override
    public void onEventAborted(MovingNode adjacentNode, SkeletonContext ctx) @Override
    public void onEventAborted(MovingNode edgeNode0, MovingNode edgeNode1, SkeletonContext ctx) @Override
    public void handle(SkeletonContext ctx) @Override
    public String toString()
MovingNode.java: Imports: com.jme3.math.Vector2f, java.util.ArrayList class MovingNode public final String id public SkeletonNode skelNode public MovingNode next public MovingNode prev final Vector2f edgeDir private float edgeCollapseTime final Vector2f bisector private boolean reflex private final ArrayList<SkeletonEvent> events  void MovingNode(String id) public float getEdgeCollapseTime() public boolean isReflex() public void addEvent(SkeletonEvent event) public void removeEvent(SkeletonEvent event) public boolean tryRemoveEvent(SkeletonEvent event) public void clearEvents() public Iterable<SkeletonEvent> events() public boolean calcBisector(SkeletonContext ctx) public boolean calcBisector(SkeletonContext ctx, boolean init) public void updateEdge() private void setDegenerate() public void leaveSkeletonNode() @Override
    public String toString()
SplitEvent.java: Imports: com.jme3.math.Vector2f class SplitEvent private final MovingNode reflexNode private final MovingNode op0 private final MovingNode op1  void SplitEvent(MovingNode reflexNode, MovingNode opposite0, MovingNode opposite1, float time) public static float calcTime(MovingNode reflexNode, MovingNode edgeStart, float distanceSign) private static float correctSpeed(float approachSpeed, float sideDistance) private static float canHit(MovingNode reflexNode, MovingNode edgeStart, float distanceSign, float time) @Override
    public void onEventQueued() @Override
    public void onEventAborted(MovingNode adjacentNode, SkeletonContext ctx) @Override
    public void onEventAborted(MovingNode edgeNode0, MovingNode edgeNode1, SkeletonContext ctx) @Override
    public void handle(SkeletonContext ctx) @Override
    public String toString()
SkeletonNode.java: Imports: com.jme3.math.Vector2f, java.util.HashMap, java.util.List, java.util.Map class SkeletonNode final Vector2f p final Map<SkeletonNode, EdgeType> outgoingEdges final Map<SkeletonNode, EdgeType> incomingEdges private boolean reflex  void SkeletonNode()  void setReflex() public boolean isReflex()  void addEdge(SkeletonNode target)  void addDegenerationEdge(SkeletonNode target) private void addEdge(SkeletonNode target, EdgeType type)  void remapIncoming(SkeletonNode newTarget) public void followGraphInward(List<SkeletonNode> storeTargets) enum EdgeType  EdgeType Mapping  EdgeType Degeneracy public static EdgeType[] values() public static EdgeType valueOf(String name) enum EdgeType  EdgeType Mapping  EdgeType Degeneracy public static EdgeType[] values() public static EdgeType valueOf(String name)
SkeletonEvent.java: Imports:  class SkeletonEvent public static final float INVALID_TIME public final float time protected void SkeletonEvent(float time) @Override
    public int compareTo(SkeletonEvent other) public abstract void onEventQueued() public abstract void onEventAborted(MovingNode adjacentNode, SkeletonContext ctx) public abstract void onEventAborted(MovingNode edgeNode0, MovingNode edgeNode1, SkeletonContext ctx) public abstract void handle(SkeletonContext ctx) protected static void handle(MovingNode node, SkeletonContext ctx) static void handleInit(MovingNode node, SkeletonContext ctx) private static boolean ensureValidPolygon(MovingNode node, SkeletonContext ctx) private static void createEvents(MovingNode node, SkeletonContext ctx) private static void createAllSplitEvents(MovingNode node, SkeletonContext ctx) static void createSplitEvents(MovingNode reflexNode, SkeletonContext ctx) private static MovingNode handleDegenerateAngle(MovingNode node, SkeletonContext ctx)
SkeletonContext.java: Imports: java.util class SkeletonContext private int nextMovingNodeId private final LinkedHashSet<MovingNode> movingNodes private final TreeSet<SkeletonEvent> eventQueue private final Set<MovingNode> abortedReflex public float distance public float distanceSign public float time public float epsilon public float epsilonMinusOne  void SkeletonContext() public void setEpsilon(float epsilon) public Set<MovingNode> getNodes() public void reset(float distance, float distanceSign) public MovingNode createMovingNode() public MovingNode createMovingNode(String id) protected void removeMovingNode(MovingNode node) public SkeletonEvent pollQueue() public void enqueue(SkeletonEvent event) public void addAbortedReflex(MovingNode reflexNode) public void abortEvents(MovingNode adjacentNode) public void abortEvents(MovingNode edgeNode0, MovingNode edgeNode1) public void printEvents() public void printNodes() public void tryQueueEdgeEvent(MovingNode n0, MovingNode n1) public void tryQueueSplitEvent(MovingNode reflexNode, MovingNode op0, MovingNode op1) public SplitEvent tryReplaceNearestSplitEvent(MovingNode reflexNode, MovingNode op0, MovingNode op1, SplitEvent nearest) public void recheckAbortedReflexNodes()
StraightSkeleton.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util class StraightSkeleton private final Vec3Attribute<Vertex> positions private float offsetDistance private float distanceSign private PlanarCoordinateSystem coordSys private final ArrayList<SkeletonNode> initialNodes private final SkeletonContext ctx public void StraightSkeleton(BMesh bmesh) public void setDistance(float distance) public void setEpsilon(float epsilon) public void apply(Face face) private void loop() private float createNodes(List<Vertex> vertices) private MovingNode createNode(Vertex vertex, Vector3f vertexPos, Vector3f min, Vector3f max) private void initBisectors() private void initEvents() private void scale(float dist) private boolean isInvalid(Vector2f v) public List<SkeletonNode> getStartNodes() public List<SkeletonNode> getEndNodes() public List<List<SkeletonNode>> getNodeLoops() public Vector3f getPosition(SkeletonNode node) public Vector3f getPosition(SkeletonNode node, Vector3f store) public SkeletonVisualization getVisualization()
SkeletonVisualization.java: Imports: ch.alchemists.jbmesh.lookup.ExactHashDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util class SkeletonVisualization private final PlanarCoordinateSystem coordSys private final ArrayList<SkeletonNode> initialNodes private final SkeletonContext ctx  void SkeletonVisualization(PlanarCoordinateSystem coordSys, ArrayList<SkeletonNode> initialNodes, SkeletonContext ctx) public BMesh createSkeletonMappingVis() public BMesh createSkeletonDegeneracyVis() private BMesh createStraightSkeletonVis(EdgeType edgeType) private boolean isInvalid(Vector2f v) private Vertex getVertex(ExactHashDeduplication dedup, Vector2f v) private void straightSkeletonVis_addEdge(BMesh bmesh, ExactHashDeduplication dedup, Set<SkeletonNode> nodesDone, SkeletonNode src, EdgeType edgeType) public BMesh createMovingNodesVis() private void createMovingNodesVis(BMesh bmesh, MovingNode startNode, Set<MovingNode> nodesRemaining) public List<VisNode> getMovingNodes() public BMesh createBisectorVis() public BMesh createMappingVis() class VisNode public final Vector3f pos public final String name public void VisNode(String name) class VisNode public final Vector3f pos public final String name public void VisNode(String name)
HipRoofGenerator.java: Imports: ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.operator.skeleton.StraightSkeleton, ch.alchemists.jbmesh.operator.skeleton.SkeletonNode, ch.alchemists.jbmesh.conversion.BMeshJmeExport, com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.List, java.util.ArrayList, java.io.FileWriter, java.io.IOException, java.nio.FloatBuffer, java.nio.ShortBuffer class HipRoofGenerator public static void main(String[] args) private static Face createFootprint(BMesh bmesh, List<Vector3f> polygonVertices) private static void generateHipRoof(BMesh bmesh, Face footprint) private static void saveToObjFile(Mesh mesh, String filename)
SkeletonCodeExtractor.java: Imports: java.io.BufferedWriter, java.io.File, java.io.FileWriter, java.io.IOException, java.nio.file.Files, java.nio.file.Path, java.nio.file.Paths, java.util.stream.Collectors class SkeletonCodeExtractor private static final String OUTPUT_FILE public static void main(String[] args) private static void processFile(Path filePath, BufferedWriter writer)
EdgeEvent.java: Imports:  class EdgeEvent private final MovingNode n0 private final MovingNode n1  void EdgeEvent(MovingNode n0, MovingNode n1, float time) @Override
    public void onEventQueued() @Override
    public void onEventAborted(MovingNode adjacentNode, SkeletonContext ctx) @Override
    public void onEventAborted(MovingNode edgeNode0, MovingNode edgeNode1, SkeletonContext ctx) @Override
    public void handle(SkeletonContext ctx) @Override
    public String toString()
MovingNode.java: Imports: com.jme3.math.Vector2f, java.util.ArrayList class MovingNode public final String id public SkeletonNode skelNode public MovingNode next public MovingNode prev final Vector2f edgeDir private float edgeCollapseTime final Vector2f bisector private boolean reflex private final ArrayList<SkeletonEvent> events  void MovingNode(String id) public float getEdgeCollapseTime() public boolean isReflex() public void addEvent(SkeletonEvent event) public void removeEvent(SkeletonEvent event) public boolean tryRemoveEvent(SkeletonEvent event) public void clearEvents() public Iterable<SkeletonEvent> events() public boolean calcBisector(SkeletonContext ctx) public boolean calcBisector(SkeletonContext ctx, boolean init) public void updateEdge() private void setDegenerate() public void leaveSkeletonNode() @Override
    public String toString()
SplitEvent.java: Imports: com.jme3.math.Vector2f class SplitEvent private final MovingNode reflexNode private final MovingNode op0 private final MovingNode op1  void SplitEvent(MovingNode reflexNode, MovingNode opposite0, MovingNode opposite1, float time) public static float calcTime(MovingNode reflexNode, MovingNode edgeStart, float distanceSign) private static float correctSpeed(float approachSpeed, float sideDistance) private static float canHit(MovingNode reflexNode, MovingNode edgeStart, float distanceSign, float time) @Override
    public void onEventQueued() @Override
    public void onEventAborted(MovingNode adjacentNode, SkeletonContext ctx) @Override
    public void onEventAborted(MovingNode edgeNode0, MovingNode edgeNode1, SkeletonContext ctx) @Override
    public void handle(SkeletonContext ctx) @Override
    public String toString()
SkeletonNode.java: Imports: com.jme3.math.Vector2f, java.util.HashMap, java.util.List, java.util.Map class SkeletonNode final Vector2f p final Map<SkeletonNode, EdgeType> outgoingEdges final Map<SkeletonNode, EdgeType> incomingEdges private boolean reflex  void SkeletonNode()  void setReflex() public boolean isReflex()  void addEdge(SkeletonNode target)  void addDegenerationEdge(SkeletonNode target) private void addEdge(SkeletonNode target, EdgeType type)  void remapIncoming(SkeletonNode newTarget) public void followGraphInward(List<SkeletonNode> storeTargets) enum EdgeType  EdgeType Mapping  EdgeType Degeneracy public static EdgeType[] values() public static EdgeType valueOf(String name) enum EdgeType  EdgeType Mapping  EdgeType Degeneracy public static EdgeType[] values() public static EdgeType valueOf(String name)
SkeletonEvent.java: Imports:  class SkeletonEvent public static final float INVALID_TIME public final float time protected void SkeletonEvent(float time) @Override
    public int compareTo(SkeletonEvent other) public abstract void onEventQueued() public abstract void onEventAborted(MovingNode adjacentNode, SkeletonContext ctx) public abstract void onEventAborted(MovingNode edgeNode0, MovingNode edgeNode1, SkeletonContext ctx) public abstract void handle(SkeletonContext ctx) protected static void handle(MovingNode node, SkeletonContext ctx) static void handleInit(MovingNode node, SkeletonContext ctx) private static boolean ensureValidPolygon(MovingNode node, SkeletonContext ctx) private static void createEvents(MovingNode node, SkeletonContext ctx) private static void createAllSplitEvents(MovingNode node, SkeletonContext ctx) static void createSplitEvents(MovingNode reflexNode, SkeletonContext ctx) private static MovingNode handleDegenerateAngle(MovingNode node, SkeletonContext ctx)
SkeletonContext.java: Imports: java.util class SkeletonContext private int nextMovingNodeId private final LinkedHashSet<MovingNode> movingNodes private final TreeSet<SkeletonEvent> eventQueue private final Set<MovingNode> abortedReflex public float distance public float distanceSign public float time public float epsilon public float epsilonMinusOne  void SkeletonContext() public void setEpsilon(float epsilon) public Set<MovingNode> getNodes() public void reset(float distance, float distanceSign) public MovingNode createMovingNode() public MovingNode createMovingNode(String id) protected void removeMovingNode(MovingNode node) public SkeletonEvent pollQueue() public void enqueue(SkeletonEvent event) public void addAbortedReflex(MovingNode reflexNode) public void abortEvents(MovingNode adjacentNode) public void abortEvents(MovingNode edgeNode0, MovingNode edgeNode1) public void printEvents() public void printNodes() public void tryQueueEdgeEvent(MovingNode n0, MovingNode n1) public void tryQueueSplitEvent(MovingNode reflexNode, MovingNode op0, MovingNode op1) public SplitEvent tryReplaceNearestSplitEvent(MovingNode reflexNode, MovingNode op0, MovingNode op1, SplitEvent nearest) public void recheckAbortedReflexNodes()
StraightSkeleton.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util class StraightSkeleton private final Vec3Attribute<Vertex> positions private float offsetDistance private float distanceSign private PlanarCoordinateSystem coordSys private final ArrayList<SkeletonNode> initialNodes private final SkeletonContext ctx public void StraightSkeleton(BMesh bmesh) public void setDistance(float distance) public void setEpsilon(float epsilon) public void apply(Face face) private void loop() private float createNodes(List<Vertex> vertices) private MovingNode createNode(Vertex vertex, Vector3f vertexPos, Vector3f min, Vector3f max) private void initBisectors() private void initEvents() private void scale(float dist) private boolean isInvalid(Vector2f v) public List<SkeletonNode> getStartNodes() public List<SkeletonNode> getEndNodes() public List<List<SkeletonNode>> getNodeLoops() public Vector3f getPosition(SkeletonNode node) public Vector3f getPosition(SkeletonNode node, Vector3f store) public SkeletonVisualization getVisualization()
SkeletonVisualization.java: Imports: ch.alchemists.jbmesh.lookup.ExactHashDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util class SkeletonVisualization private final PlanarCoordinateSystem coordSys private final ArrayList<SkeletonNode> initialNodes private final SkeletonContext ctx  void SkeletonVisualization(PlanarCoordinateSystem coordSys, ArrayList<SkeletonNode> initialNodes, SkeletonContext ctx) public BMesh createSkeletonMappingVis() public BMesh createSkeletonDegeneracyVis() private BMesh createStraightSkeletonVis(EdgeType edgeType) private boolean isInvalid(Vector2f v) private Vertex getVertex(ExactHashDeduplication dedup, Vector2f v) private void straightSkeletonVis_addEdge(BMesh bmesh, ExactHashDeduplication dedup, Set<SkeletonNode> nodesDone, SkeletonNode src, EdgeType edgeType) public BMesh createMovingNodesVis() private void createMovingNodesVis(BMesh bmesh, MovingNode startNode, Set<MovingNode> nodesRemaining) public List<VisNode> getMovingNodes() public BMesh createBisectorVis() public BMesh createMappingVis() class VisNode public final Vector3f pos public final String name public void VisNode(String name) class VisNode public final Vector3f pos public final String name public void VisNode(String name)
HipRoofGenerator.java: Imports: ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.operator.skeleton.StraightSkeleton, ch.alchemists.jbmesh.operator.skeleton.SkeletonNode, ch.alchemists.jbmesh.conversion.BMeshJmeExport, com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.List, java.util.ArrayList, java.io.FileWriter, java.io.IOException, java.nio.FloatBuffer, java.nio.ShortBuffer class HipRoofGenerator public static void main(String[] args) private static Face createFootprint(BMesh bmesh, List<Vector3f> polygonVertices) private static void generateHipRoof(BMesh bmesh, Face footprint) private static void saveToObjFile(Mesh mesh, String filename)
SkeletonCodeExtractor.java: Imports: java.io.BufferedWriter, java.io.File, java.io.FileWriter, java.io.IOException, java.nio.file.Files, java.nio.file.Path, java.nio.file.Paths, java.util.stream.Collectors class SkeletonCodeExtractor private static final String OUTPUT_FILE public static void main(String[] args) private static void processFile(Path filePath, BufferedWriter writer)
EdgeEvent.java: Imports:  class EdgeEvent private final MovingNode n0 private final MovingNode n1  void EdgeEvent(MovingNode n0, MovingNode n1, float time) @Override
    public void onEventQueued() @Override
    public void onEventAborted(MovingNode adjacentNode, SkeletonContext ctx) @Override
    public void onEventAborted(MovingNode edgeNode0, MovingNode edgeNode1, SkeletonContext ctx) @Override
    public void handle(SkeletonContext ctx) @Override
    public String toString()
MovingNode.java: Imports: com.jme3.math.Vector2f, java.util.ArrayList class MovingNode public final String id public SkeletonNode skelNode public MovingNode next public MovingNode prev final Vector2f edgeDir private float edgeCollapseTime final Vector2f bisector private boolean reflex private final ArrayList<SkeletonEvent> events  void MovingNode(String id) public float getEdgeCollapseTime() public boolean isReflex() public void addEvent(SkeletonEvent event) public void removeEvent(SkeletonEvent event) public boolean tryRemoveEvent(SkeletonEvent event) public void clearEvents() public Iterable<SkeletonEvent> events() public boolean calcBisector(SkeletonContext ctx) public boolean calcBisector(SkeletonContext ctx, boolean init) public void updateEdge() private void setDegenerate() public void leaveSkeletonNode() @Override
    public String toString()
SplitEvent.java: Imports: com.jme3.math.Vector2f class SplitEvent private final MovingNode reflexNode private final MovingNode op0 private final MovingNode op1  void SplitEvent(MovingNode reflexNode, MovingNode opposite0, MovingNode opposite1, float time) public static float calcTime(MovingNode reflexNode, MovingNode edgeStart, float distanceSign) private static float correctSpeed(float approachSpeed, float sideDistance) private static float canHit(MovingNode reflexNode, MovingNode edgeStart, float distanceSign, float time) @Override
    public void onEventQueued() @Override
    public void onEventAborted(MovingNode adjacentNode, SkeletonContext ctx) @Override
    public void onEventAborted(MovingNode edgeNode0, MovingNode edgeNode1, SkeletonContext ctx) @Override
    public void handle(SkeletonContext ctx) @Override
    public String toString()
SkeletonNode.java: Imports: com.jme3.math.Vector2f, java.util.HashMap, java.util.List, java.util.Map class SkeletonNode final Vector2f p final Map<SkeletonNode, EdgeType> outgoingEdges final Map<SkeletonNode, EdgeType> incomingEdges private boolean reflex  void SkeletonNode()  void setReflex() public boolean isReflex()  void addEdge(SkeletonNode target)  void addDegenerationEdge(SkeletonNode target) private void addEdge(SkeletonNode target, EdgeType type)  void remapIncoming(SkeletonNode newTarget) public void followGraphInward(List<SkeletonNode> storeTargets) enum EdgeType  EdgeType Mapping  EdgeType Degeneracy public static EdgeType[] values() public static EdgeType valueOf(String name) enum EdgeType  EdgeType Mapping  EdgeType Degeneracy public static EdgeType[] values() public static EdgeType valueOf(String name)
SkeletonEvent.java: Imports:  class SkeletonEvent public static final float INVALID_TIME public final float time protected void SkeletonEvent(float time) @Override
    public int compareTo(SkeletonEvent other) public abstract void onEventQueued() public abstract void onEventAborted(MovingNode adjacentNode, SkeletonContext ctx) public abstract void onEventAborted(MovingNode edgeNode0, MovingNode edgeNode1, SkeletonContext ctx) public abstract void handle(SkeletonContext ctx) protected static void handle(MovingNode node, SkeletonContext ctx) static void handleInit(MovingNode node, SkeletonContext ctx) private static boolean ensureValidPolygon(MovingNode node, SkeletonContext ctx) private static void createEvents(MovingNode node, SkeletonContext ctx) private static void createAllSplitEvents(MovingNode node, SkeletonContext ctx) static void createSplitEvents(MovingNode reflexNode, SkeletonContext ctx) private static MovingNode handleDegenerateAngle(MovingNode node, SkeletonContext ctx)
SkeletonContext.java: Imports: java.util class SkeletonContext private int nextMovingNodeId private final LinkedHashSet<MovingNode> movingNodes private final TreeSet<SkeletonEvent> eventQueue private final Set<MovingNode> abortedReflex public float distance public float distanceSign public float time public float epsilon public float epsilonMinusOne  void SkeletonContext() public void setEpsilon(float epsilon) public Set<MovingNode> getNodes() public void reset(float distance, float distanceSign) public MovingNode createMovingNode() public MovingNode createMovingNode(String id) protected void removeMovingNode(MovingNode node) public SkeletonEvent pollQueue() public void enqueue(SkeletonEvent event) public void addAbortedReflex(MovingNode reflexNode) public void abortEvents(MovingNode adjacentNode) public void abortEvents(MovingNode edgeNode0, MovingNode edgeNode1) public void printEvents() public void printNodes() public void tryQueueEdgeEvent(MovingNode n0, MovingNode n1) public void tryQueueSplitEvent(MovingNode reflexNode, MovingNode op0, MovingNode op1) public SplitEvent tryReplaceNearestSplitEvent(MovingNode reflexNode, MovingNode op0, MovingNode op1, SplitEvent nearest) public void recheckAbortedReflexNodes()
StraightSkeleton.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util class StraightSkeleton private final Vec3Attribute<Vertex> positions private float offsetDistance private float distanceSign private PlanarCoordinateSystem coordSys private final ArrayList<SkeletonNode> initialNodes private final SkeletonContext ctx public void StraightSkeleton(BMesh bmesh) public void setDistance(float distance) public void setEpsilon(float epsilon) public void apply(Face face) private void loop() private float createNodes(List<Vertex> vertices) private MovingNode createNode(Vertex vertex, Vector3f vertexPos, Vector3f min, Vector3f max) private void initBisectors() private void initEvents() private void scale(float dist) private boolean isInvalid(Vector2f v) public List<SkeletonNode> getStartNodes() public List<SkeletonNode> getEndNodes() public List<List<SkeletonNode>> getNodeLoops() public Vector3f getPosition(SkeletonNode node) public Vector3f getPosition(SkeletonNode node, Vector3f store) public SkeletonVisualization getVisualization()
SkeletonVisualization.java: Imports: ch.alchemists.jbmesh.lookup.ExactHashDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util class SkeletonVisualization private final PlanarCoordinateSystem coordSys private final ArrayList<SkeletonNode> initialNodes private final SkeletonContext ctx  void SkeletonVisualization(PlanarCoordinateSystem coordSys, ArrayList<SkeletonNode> initialNodes, SkeletonContext ctx) public BMesh createSkeletonMappingVis() public BMesh createSkeletonDegeneracyVis() private BMesh createStraightSkeletonVis(EdgeType edgeType) private boolean isInvalid(Vector2f v) private Vertex getVertex(ExactHashDeduplication dedup, Vector2f v) private void straightSkeletonVis_addEdge(BMesh bmesh, ExactHashDeduplication dedup, Set<SkeletonNode> nodesDone, SkeletonNode src, EdgeType edgeType) public BMesh createMovingNodesVis() private void createMovingNodesVis(BMesh bmesh, MovingNode startNode, Set<MovingNode> nodesRemaining) public List<VisNode> getMovingNodes() public BMesh createBisectorVis() public BMesh createMappingVis() class VisNode public final Vector3f pos public final String name public void VisNode(String name) class VisNode public final Vector3f pos public final String name public void VisNode(String name)
HipRoofGenerator.java: Imports: ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.operator.skeleton.StraightSkeleton, ch.alchemists.jbmesh.operator.skeleton.SkeletonNode, ch.alchemists.jbmesh.conversion.BMeshJmeExport, com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.List, java.util.ArrayList, java.io.FileWriter, java.io.IOException, java.nio.FloatBuffer, java.nio.ShortBuffer class HipRoofGenerator public static void main(String[] args) private static Face createFootprint(BMesh bmesh, List<Vector3f> polygonVertices) private static void generateHipRoof(BMesh bmesh, Face footprint) private static void saveToObjFile(Mesh mesh, String filename)
SkeletonCodeExtractor.java: Imports: java.io.BufferedWriter, java.io.File, java.io.FileWriter, java.io.IOException, java.nio.file.Files, java.nio.file.Path, java.nio.file.Paths, java.util.stream.Collectors class SkeletonCodeExtractor private static final String OUTPUT_FILE public static void main(String[] args) private static void processFile(Path filePath, BufferedWriter writer)

package ch.alchemists.jbmesh.operator.normalgen
NewellNormal.java: Imports: com.jme3.math.Vector3f class NewellNormal public static void addToNormal(Vector3f nStore, Vector3f last, Vector3f current)
NormalGenerator.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure, com.jme3.math.FastMath, com.jme3.math.Vector3f class NormalGenerator private final BMesh bmesh private NormalCalculator normalCalculator private final Vec3Attribute<Loop> loopNormals private final Vector3f tempNormal private float creaseAngle public void NormalGenerator(BMesh bmesh) public void NormalGenerator(BMesh bmesh, float creaseAngle) public void NormalGenerator(BMesh bmesh, float creaseAngle, NormalCalculator normalCalculator) public void setCreaseAngle(float angleDeg) public void apply() private Edge getEdgeWithLoop(Vertex vertex) private void populateAccumulators(Vertex vertex, Edge startEdge, Pool accumulators) private void populateAccumulatorsCounterclockwise(Vertex vertex, Pool accumulators) private void addToAccumulator(NormalAccumulator acc, Loop loop) private void applyAccumulator(NormalAccumulator acc, Loop endLoop) private boolean normalExists(Vector3f normal) interface NormalCalculator  void prepare(BMesh bmesh, float creaseAngle) default void cleanup(BMesh bmesh)  void getWeightedNormal(Loop loop, Vector3f store)  boolean isCrease(Edge edge, Face face1, Face face2, float creaseAngle) interface NormalCalculator  void prepare(BMesh bmesh, float creaseAngle) default void cleanup(BMesh bmesh)  void getWeightedNormal(Loop loop, Vector3f store)  boolean isCrease(Edge edge, Face face1, Face face2, float creaseAngle)
NormalAccumulator.java: Imports: ch.alchemists.jbmesh.structure.Loop, com.jme3.math.Vector3f, java.util.ArrayList class NormalAccumulator public final Vector3f normal public Loop firstLoop class Pool private final ArrayList<NormalAccumulator> accumulators private int numActive public NormalAccumulator pushBack(Loop loop) public NormalAccumulator pushFront(Loop loop) public NormalAccumulator get(int index) public int size() public void clear() class Pool private final ArrayList<NormalAccumulator> accumulators private int numActive public NormalAccumulator pushBack(Loop loop) public NormalAccumulator pushFront(Loop loop) public NormalAccumulator get(int index) public int size() public void clear()
AngleNormalCalculator.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.BooleanAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f class AngleNormalCalculator private static final String ATTRIBUTE_EDGE_CREASE protected FaceOps faceOps protected Vec3Attribute<Vertex> positions protected BooleanAttribute<Edge> edgeCrease protected final transient Vector3f tempV1 protected final transient Vector3f tempV2 public void AngleNormalCalculator() @Override
    public void prepare(BMesh bmesh, float creaseAngle) @Override
    public void cleanup(BMesh bmesh) @Override
    public void getWeightedNormal(Loop loop, Vector3f store) @Override
    public boolean isCrease(Edge edge, Face face1, Face face2, float creaseAngle)
AngleAreaNormalCalculator.java: Imports: ch.alchemists.jbmesh.data.property.FloatAttribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, com.jme3.math.Vector3f class AngleAreaNormalCalculator private static final String ATTRIBUTE_FACE_AREA private FloatAttribute<Face> attrFaceArea @Override
    public void prepare(BMesh bmesh, float creaseAngle) @Override
    public void cleanup(BMesh bmesh) @Override
    public void getWeightedNormal(Loop loop, Vector3f store)
NewellNormal.java: Imports: com.jme3.math.Vector3f class NewellNormal public static void addToNormal(Vector3f nStore, Vector3f last, Vector3f current)
NormalGenerator.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure, com.jme3.math.FastMath, com.jme3.math.Vector3f class NormalGenerator private final BMesh bmesh private NormalCalculator normalCalculator private final Vec3Attribute<Loop> loopNormals private final Vector3f tempNormal private float creaseAngle public void NormalGenerator(BMesh bmesh) public void NormalGenerator(BMesh bmesh, float creaseAngle) public void NormalGenerator(BMesh bmesh, float creaseAngle, NormalCalculator normalCalculator) public void setCreaseAngle(float angleDeg) public void apply() private Edge getEdgeWithLoop(Vertex vertex) private void populateAccumulators(Vertex vertex, Edge startEdge, Pool accumulators) private void populateAccumulatorsCounterclockwise(Vertex vertex, Pool accumulators) private void addToAccumulator(NormalAccumulator acc, Loop loop) private void applyAccumulator(NormalAccumulator acc, Loop endLoop) private boolean normalExists(Vector3f normal) interface NormalCalculator  void prepare(BMesh bmesh, float creaseAngle) default void cleanup(BMesh bmesh)  void getWeightedNormal(Loop loop, Vector3f store)  boolean isCrease(Edge edge, Face face1, Face face2, float creaseAngle) interface NormalCalculator  void prepare(BMesh bmesh, float creaseAngle) default void cleanup(BMesh bmesh)  void getWeightedNormal(Loop loop, Vector3f store)  boolean isCrease(Edge edge, Face face1, Face face2, float creaseAngle)
NormalAccumulator.java: Imports: ch.alchemists.jbmesh.structure.Loop, com.jme3.math.Vector3f, java.util.ArrayList class NormalAccumulator public final Vector3f normal public Loop firstLoop class Pool private final ArrayList<NormalAccumulator> accumulators private int numActive public NormalAccumulator pushBack(Loop loop) public NormalAccumulator pushFront(Loop loop) public NormalAccumulator get(int index) public int size() public void clear() class Pool private final ArrayList<NormalAccumulator> accumulators private int numActive public NormalAccumulator pushBack(Loop loop) public NormalAccumulator pushFront(Loop loop) public NormalAccumulator get(int index) public int size() public void clear()
AngleNormalCalculator.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.BooleanAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f class AngleNormalCalculator private static final String ATTRIBUTE_EDGE_CREASE protected FaceOps faceOps protected Vec3Attribute<Vertex> positions protected BooleanAttribute<Edge> edgeCrease protected final transient Vector3f tempV1 protected final transient Vector3f tempV2 public void AngleNormalCalculator() @Override
    public void prepare(BMesh bmesh, float creaseAngle) @Override
    public void cleanup(BMesh bmesh) @Override
    public void getWeightedNormal(Loop loop, Vector3f store) @Override
    public boolean isCrease(Edge edge, Face face1, Face face2, float creaseAngle)
AngleAreaNormalCalculator.java: Imports: ch.alchemists.jbmesh.data.property.FloatAttribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, com.jme3.math.Vector3f class AngleAreaNormalCalculator private static final String ATTRIBUTE_FACE_AREA private FloatAttribute<Face> attrFaceArea @Override
    public void prepare(BMesh bmesh, float creaseAngle) @Override
    public void cleanup(BMesh bmesh) @Override
    public void getWeightedNormal(Loop loop, Vector3f store)
NewellNormal.java: Imports: com.jme3.math.Vector3f class NewellNormal public static void addToNormal(Vector3f nStore, Vector3f last, Vector3f current)
NormalGenerator.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure, com.jme3.math.FastMath, com.jme3.math.Vector3f class NormalGenerator private final BMesh bmesh private NormalCalculator normalCalculator private final Vec3Attribute<Loop> loopNormals private final Vector3f tempNormal private float creaseAngle public void NormalGenerator(BMesh bmesh) public void NormalGenerator(BMesh bmesh, float creaseAngle) public void NormalGenerator(BMesh bmesh, float creaseAngle, NormalCalculator normalCalculator) public void setCreaseAngle(float angleDeg) public void apply() private Edge getEdgeWithLoop(Vertex vertex) private void populateAccumulators(Vertex vertex, Edge startEdge, Pool accumulators) private void populateAccumulatorsCounterclockwise(Vertex vertex, Pool accumulators) private void addToAccumulator(NormalAccumulator acc, Loop loop) private void applyAccumulator(NormalAccumulator acc, Loop endLoop) private boolean normalExists(Vector3f normal) interface NormalCalculator  void prepare(BMesh bmesh, float creaseAngle) default void cleanup(BMesh bmesh)  void getWeightedNormal(Loop loop, Vector3f store)  boolean isCrease(Edge edge, Face face1, Face face2, float creaseAngle) interface NormalCalculator  void prepare(BMesh bmesh, float creaseAngle) default void cleanup(BMesh bmesh)  void getWeightedNormal(Loop loop, Vector3f store)  boolean isCrease(Edge edge, Face face1, Face face2, float creaseAngle)
NormalAccumulator.java: Imports: ch.alchemists.jbmesh.structure.Loop, com.jme3.math.Vector3f, java.util.ArrayList class NormalAccumulator public final Vector3f normal public Loop firstLoop class Pool private final ArrayList<NormalAccumulator> accumulators private int numActive public NormalAccumulator pushBack(Loop loop) public NormalAccumulator pushFront(Loop loop) public NormalAccumulator get(int index) public int size() public void clear() class Pool private final ArrayList<NormalAccumulator> accumulators private int numActive public NormalAccumulator pushBack(Loop loop) public NormalAccumulator pushFront(Loop loop) public NormalAccumulator get(int index) public int size() public void clear()
AngleNormalCalculator.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.BooleanAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f class AngleNormalCalculator private static final String ATTRIBUTE_EDGE_CREASE protected FaceOps faceOps protected Vec3Attribute<Vertex> positions protected BooleanAttribute<Edge> edgeCrease protected final transient Vector3f tempV1 protected final transient Vector3f tempV2 public void AngleNormalCalculator() @Override
    public void prepare(BMesh bmesh, float creaseAngle) @Override
    public void cleanup(BMesh bmesh) @Override
    public void getWeightedNormal(Loop loop, Vector3f store) @Override
    public boolean isCrease(Edge edge, Face face1, Face face2, float creaseAngle)
AngleAreaNormalCalculator.java: Imports: ch.alchemists.jbmesh.data.property.FloatAttribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, com.jme3.math.Vector3f class AngleAreaNormalCalculator private static final String ATTRIBUTE_FACE_AREA private FloatAttribute<Face> attrFaceArea @Override
    public void prepare(BMesh bmesh, float creaseAngle) @Override
    public void cleanup(BMesh bmesh) @Override
    public void getWeightedNormal(Loop loop, Vector3f store)

package ch.alchemists.jbmesh.operator
Inset.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class Inset private final FaceOps faceOps private final ExtrudeFace extrusion private final Vec3Attribute<Vertex> positions private float thickness private float depth public void Inset(BMesh bmesh, float thickness, float depth) public void apply(Face face)
Smooth.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f, java.util.ArrayList, java.util.HashSet, java.util.List, java.util.Set class Smooth private final BMesh bmesh private final EdgeOps edgeOps private final FaceOps faceOps private final Vec3Attribute<Vertex> positions private boolean processNonmanifolds public void Smooth(BMesh bmesh) public void setProcessNonmanifolds(boolean enabled) public void apply(List<Face> faces) private boolean isManifold(Loop loop) public void smooth()
EdgeOps.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class EdgeOps private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void EdgeOps(BMesh bmesh) public Vector3f calcCenter(Edge edge) public Vector3f calcCenter(Edge edge, Vector3f store) public boolean collinear(Edge edge1, Edge edge2) public Vertex splitAtCenter(Edge edge) public float length(Edge edge)
FaceOps.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.normalgen.NewellNormal, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.Iterator class FaceOps private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void FaceOps(BMesh bmesh) public Vector3f normal(Face face) public Vector3f normal(Face face, Vector3f store) public Vector3f normalConvex(Face face) public Vector3f normalConvex(Face face, Vector3f store) public Vector3f normalConvex(Loop loop, Vector3f store) public Vector3f centroid(Face face) public Vector3f centroid(Face face, Vector3f store) public boolean coplanar(Face face1, Face face2) public float area(Face face) public float area(Face face, Vector3f normal) public float areaTriangle(Face face) public void makePlanar(Face face) public void move(Face face, Vector3f offset) public void move(Face face, float dx, float dy, float dz) public void moveAlongNormal(Face face, float distance)
MeshOps.java: Imports: ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face class MeshOps public static void invert(BMesh bmesh) public static void mergePlanarFaces(BMesh bmesh)
ScaleFace.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.Iterator, java.util.Objects, java.util.function.Function class ScaleFace private final Vec3Attribute<Vertex> positions private float scale private Function<Face, Vector3f> pivotFunc public void ScaleFace(BMesh bmesh, float scale, Function<Face, Vector3f> pivotFunction) public void ScaleFace(BMesh bmesh, float scale) public void ScaleFace(BMesh bmesh) public void setScale(float scale) public float getScale() public void setPivotFunction(Function<Face, Vector3f> pivotFunction) public void apply(Face face) class CentroidPivot private final FaceOps faceOps private final Vector3f store public void CentroidPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class FirstVertexPivot private final Vec3Attribute<Vertex> positions private final Vector3f store public void FirstVertexPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class PointPivot private final Vector3f pivotPoint public void PointPivot() public void PointPivot(Vector3f pivotPoint) public void PointPivot(float xPivot, float yPivot, float zPivot) public void setPivotPoint(Vector3f pivotPoint) public void setPivotPoint(float xPivot, float yPivot, float zPivot) public Vector3f getPivotPoint() @Override
        public Vector3f apply(Face face) class CentroidPivot private final FaceOps faceOps private final Vector3f store public void CentroidPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class FirstVertexPivot private final Vec3Attribute<Vertex> positions private final Vector3f store public void FirstVertexPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class PointPivot private final Vector3f pivotPoint public void PointPivot() public void PointPivot(Vector3f pivotPoint) public void PointPivot(float xPivot, float yPivot, float zPivot) public void setPivotPoint(Vector3f pivotPoint) public void setPivotPoint(float xPivot, float yPivot, float zPivot) public Vector3f getPivotPoint() @Override
        public Vector3f apply(Face face)
VertexOps.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class VertexOps private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void VertexOps(BMesh bmesh) public void move(Vertex vertex, Vector3f offset) public void move(Vertex vertex, float dx, float dy, float dz)
ExtrudeFace.java: Imports: ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, java.util.ArrayList, java.util.List class ExtrudeFace private final BMesh bmesh private final transient List<Loop> tempLoops private Face face private final List<Vertex> originalVertices private final List<Face> resultFaces public void ExtrudeFace(BMesh bmesh) public void apply(Face face) public void copyVertexAttributes() public Face recreateOriginalFace() public List<Face> getResultFaces()
ExtrudePath.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec2Attribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.ArrayList, java.util.Collection, java.util.Iterator class ExtrudePath private final BMesh bmesh private final Vec3Attribute<Vertex> positions private final ExtrudeFace extrude private final ArrayList<Vector2f> shape private Face face private int numSegments public void ExtrudePath(BMesh bmesh) public void apply(Face face, PlanarCoordinateSystem faceCoordSys, Iterable<PlanarCoordinateSystem> path) public void applyLoopTexCoords() private float[] calcTexCoordsX() private void applyLoopTexCoords(Loop loop, int side, float[] texCoordsX, float yFront, float yBack, Vec2Attribute<Loop> attrTexCoords) class PointListPath protected final ArrayList<Vector3f> points protected final Vector3f startPoint public void PointListPath(Vector3f startPoint) public void PointListPath(Vector3f startPoint, Collection<Vector3f> points) public void addPoint(Vector3f p) public void clearPoints() protected abstract void setTangent(int i, Vector3f tangent, Vector3f normal) @Override
        public Iterator<PlanarCoordinateSystem> iterator() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next() class PointListPath protected final ArrayList<Vector3f> points protected final Vector3f startPoint public void PointListPath(Vector3f startPoint) public void PointListPath(Vector3f startPoint, Collection<Vector3f> points) public void addPoint(Vector3f p) public void clearPoints() protected abstract void setTangent(int i, Vector3f tangent, Vector3f normal) @Override
        public Iterator<PlanarCoordinateSystem> iterator() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next()
CollapseEdge.java: Imports: ch.alchemists.jbmesh.structure, java.util.ArrayList, java.util.HashMap, java.util.List, java.util.Map class CollapseEdge private final BMesh bmesh public void CollapseEdge(BMesh bmesh) public void apply(Edge edge) public static void apply(BMesh bmesh, Edge edge) class FaceVertices public final List<Vertex> vertices class FaceVertices public final List<Vertex> vertices
SubdivideFace.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f, java.util class SubdivideFace private final BMesh bmesh private final Map<Face, FaceInfo> faceInfo private final Set<Edge> edges private final Vec3Attribute<Vertex> positions private int cuts private final List<Loop> tempLoops private final Vector3f tempP private final Vector3f tempStep public void SubdivideFace(BMesh bmesh) public void SubdivideFace(BMesh bmesh, int cuts) public void setCuts(int cuts) public void apply(List<Face> faces) private void prepare(Face face) private void splitEdge(Edge edge, int cuts) private void subdivide(Face face, FaceInfo info) private void subdivideTriangle(Face face, int first) private void subdivideQuad(Face face, int first) class FaceInfo public final Vertex startVertex public final int sides public void FaceInfo(List<Loop> loops) class FaceInfo public final Vertex startVertex public final int sides public void FaceInfo(List<Loop> loops)
FaceOpsTest.java: Imports: ch.alchemists.jbmesh.TestUtil, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, org.junit.jupiter.api.Test class FaceOpsTest @Test
    public void testNormal() @Test
    public void testArea() private void testArea(BMesh bmesh, FaceOps faceOps, float expectedArea, float... vertices)
ScaleFaceTest.java: Imports: ch.alchemists.jbmesh.TestUtil, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.List, org.junit.jupiter.api.BeforeEach, org.junit.jupiter.api.Test class ScaleFaceTest private static final float SCALE private BMesh bmesh private Face face private Vec3Attribute<Vertex> positions @BeforeEach
    private void initFace() @Test
    public void testDefaultPivot() @Test
    public void testCentroidPivot() @Test
    public void testFirstVertexPivot() @Test
    public void testPointPivot() @Test
    public void testCustomPivotAndScale() @Test
    public void testNullPivotFunction()
Inset.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class Inset private final FaceOps faceOps private final ExtrudeFace extrusion private final Vec3Attribute<Vertex> positions private float thickness private float depth public void Inset(BMesh bmesh, float thickness, float depth) public void apply(Face face)
Smooth.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f, java.util.ArrayList, java.util.HashSet, java.util.List, java.util.Set class Smooth private final BMesh bmesh private final EdgeOps edgeOps private final FaceOps faceOps private final Vec3Attribute<Vertex> positions private boolean processNonmanifolds public void Smooth(BMesh bmesh) public void setProcessNonmanifolds(boolean enabled) public void apply(List<Face> faces) private boolean isManifold(Loop loop) public void smooth()
EdgeOps.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class EdgeOps private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void EdgeOps(BMesh bmesh) public Vector3f calcCenter(Edge edge) public Vector3f calcCenter(Edge edge, Vector3f store) public boolean collinear(Edge edge1, Edge edge2) public Vertex splitAtCenter(Edge edge) public float length(Edge edge)
FaceOps.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.normalgen.NewellNormal, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.Iterator class FaceOps private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void FaceOps(BMesh bmesh) public Vector3f normal(Face face) public Vector3f normal(Face face, Vector3f store) public Vector3f normalConvex(Face face) public Vector3f normalConvex(Face face, Vector3f store) public Vector3f normalConvex(Loop loop, Vector3f store) public Vector3f centroid(Face face) public Vector3f centroid(Face face, Vector3f store) public boolean coplanar(Face face1, Face face2) public float area(Face face) public float area(Face face, Vector3f normal) public float areaTriangle(Face face) public void makePlanar(Face face) public void move(Face face, Vector3f offset) public void move(Face face, float dx, float dy, float dz) public void moveAlongNormal(Face face, float distance)
MeshOps.java: Imports: ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face class MeshOps public static void invert(BMesh bmesh) public static void mergePlanarFaces(BMesh bmesh)
ScaleFace.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.Iterator, java.util.Objects, java.util.function.Function class ScaleFace private final Vec3Attribute<Vertex> positions private float scale private Function<Face, Vector3f> pivotFunc public void ScaleFace(BMesh bmesh, float scale, Function<Face, Vector3f> pivotFunction) public void ScaleFace(BMesh bmesh, float scale) public void ScaleFace(BMesh bmesh) public void setScale(float scale) public float getScale() public void setPivotFunction(Function<Face, Vector3f> pivotFunction) public void apply(Face face) class CentroidPivot private final FaceOps faceOps private final Vector3f store public void CentroidPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class FirstVertexPivot private final Vec3Attribute<Vertex> positions private final Vector3f store public void FirstVertexPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class PointPivot private final Vector3f pivotPoint public void PointPivot() public void PointPivot(Vector3f pivotPoint) public void PointPivot(float xPivot, float yPivot, float zPivot) public void setPivotPoint(Vector3f pivotPoint) public void setPivotPoint(float xPivot, float yPivot, float zPivot) public Vector3f getPivotPoint() @Override
        public Vector3f apply(Face face) class CentroidPivot private final FaceOps faceOps private final Vector3f store public void CentroidPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class FirstVertexPivot private final Vec3Attribute<Vertex> positions private final Vector3f store public void FirstVertexPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class PointPivot private final Vector3f pivotPoint public void PointPivot() public void PointPivot(Vector3f pivotPoint) public void PointPivot(float xPivot, float yPivot, float zPivot) public void setPivotPoint(Vector3f pivotPoint) public void setPivotPoint(float xPivot, float yPivot, float zPivot) public Vector3f getPivotPoint() @Override
        public Vector3f apply(Face face)
VertexOps.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class VertexOps private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void VertexOps(BMesh bmesh) public void move(Vertex vertex, Vector3f offset) public void move(Vertex vertex, float dx, float dy, float dz)
ExtrudeFace.java: Imports: ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, java.util.ArrayList, java.util.List class ExtrudeFace private final BMesh bmesh private final transient List<Loop> tempLoops private Face face private final List<Vertex> originalVertices private final List<Face> resultFaces public void ExtrudeFace(BMesh bmesh) public void apply(Face face) public void copyVertexAttributes() public Face recreateOriginalFace() public List<Face> getResultFaces()
ExtrudePath.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec2Attribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.ArrayList, java.util.Collection, java.util.Iterator class ExtrudePath private final BMesh bmesh private final Vec3Attribute<Vertex> positions private final ExtrudeFace extrude private final ArrayList<Vector2f> shape private Face face private int numSegments public void ExtrudePath(BMesh bmesh) public void apply(Face face, PlanarCoordinateSystem faceCoordSys, Iterable<PlanarCoordinateSystem> path) public void applyLoopTexCoords() private float[] calcTexCoordsX() private void applyLoopTexCoords(Loop loop, int side, float[] texCoordsX, float yFront, float yBack, Vec2Attribute<Loop> attrTexCoords) class PointListPath protected final ArrayList<Vector3f> points protected final Vector3f startPoint public void PointListPath(Vector3f startPoint) public void PointListPath(Vector3f startPoint, Collection<Vector3f> points) public void addPoint(Vector3f p) public void clearPoints() protected abstract void setTangent(int i, Vector3f tangent, Vector3f normal) @Override
        public Iterator<PlanarCoordinateSystem> iterator() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next() class PointListPath protected final ArrayList<Vector3f> points protected final Vector3f startPoint public void PointListPath(Vector3f startPoint) public void PointListPath(Vector3f startPoint, Collection<Vector3f> points) public void addPoint(Vector3f p) public void clearPoints() protected abstract void setTangent(int i, Vector3f tangent, Vector3f normal) @Override
        public Iterator<PlanarCoordinateSystem> iterator() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next()
CollapseEdge.java: Imports: ch.alchemists.jbmesh.structure, java.util.ArrayList, java.util.HashMap, java.util.List, java.util.Map class CollapseEdge private final BMesh bmesh public void CollapseEdge(BMesh bmesh) public void apply(Edge edge) public static void apply(BMesh bmesh, Edge edge) class FaceVertices public final List<Vertex> vertices class FaceVertices public final List<Vertex> vertices
SubdivideFace.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f, java.util class SubdivideFace private final BMesh bmesh private final Map<Face, FaceInfo> faceInfo private final Set<Edge> edges private final Vec3Attribute<Vertex> positions private int cuts private final List<Loop> tempLoops private final Vector3f tempP private final Vector3f tempStep public void SubdivideFace(BMesh bmesh) public void SubdivideFace(BMesh bmesh, int cuts) public void setCuts(int cuts) public void apply(List<Face> faces) private void prepare(Face face) private void splitEdge(Edge edge, int cuts) private void subdivide(Face face, FaceInfo info) private void subdivideTriangle(Face face, int first) private void subdivideQuad(Face face, int first) class FaceInfo public final Vertex startVertex public final int sides public void FaceInfo(List<Loop> loops) class FaceInfo public final Vertex startVertex public final int sides public void FaceInfo(List<Loop> loops)
FaceOpsTest.java: Imports: ch.alchemists.jbmesh.TestUtil, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, org.junit.jupiter.api.Test class FaceOpsTest @Test
    public void testNormal() @Test
    public void testArea() private void testArea(BMesh bmesh, FaceOps faceOps, float expectedArea, float... vertices)
ScaleFaceTest.java: Imports: ch.alchemists.jbmesh.TestUtil, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.List, org.junit.jupiter.api.BeforeEach, org.junit.jupiter.api.Test class ScaleFaceTest private static final float SCALE private BMesh bmesh private Face face private Vec3Attribute<Vertex> positions @BeforeEach
    private void initFace() @Test
    public void testDefaultPivot() @Test
    public void testCentroidPivot() @Test
    public void testFirstVertexPivot() @Test
    public void testPointPivot() @Test
    public void testCustomPivotAndScale() @Test
    public void testNullPivotFunction()
FaceOpsTest.java: Imports: ch.alchemists.jbmesh.TestUtil, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, org.junit.jupiter.api.Test class FaceOpsTest @Test
    public void testNormal() @Test
    public void testArea() private void testArea(BMesh bmesh, FaceOps faceOps, float expectedArea, float... vertices)
ScaleFaceTest.java: Imports: ch.alchemists.jbmesh.TestUtil, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.List, org.junit.jupiter.api.BeforeEach, org.junit.jupiter.api.Test class ScaleFaceTest private static final float SCALE private BMesh bmesh private Face face private Vec3Attribute<Vertex> positions @BeforeEach
    private void initFace() @Test
    public void testDefaultPivot() @Test
    public void testCentroidPivot() @Test
    public void testFirstVertexPivot() @Test
    public void testPointPivot() @Test
    public void testCustomPivotAndScale() @Test
    public void testNullPivotFunction()
Inset.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class Inset private final FaceOps faceOps private final ExtrudeFace extrusion private final Vec3Attribute<Vertex> positions private float thickness private float depth public void Inset(BMesh bmesh, float thickness, float depth) public void apply(Face face)
Smooth.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f, java.util.ArrayList, java.util.HashSet, java.util.List, java.util.Set class Smooth private final BMesh bmesh private final EdgeOps edgeOps private final FaceOps faceOps private final Vec3Attribute<Vertex> positions private boolean processNonmanifolds public void Smooth(BMesh bmesh) public void setProcessNonmanifolds(boolean enabled) public void apply(List<Face> faces) private boolean isManifold(Loop loop) public void smooth()
EdgeOps.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class EdgeOps private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void EdgeOps(BMesh bmesh) public Vector3f calcCenter(Edge edge) public Vector3f calcCenter(Edge edge, Vector3f store) public boolean collinear(Edge edge1, Edge edge2) public Vertex splitAtCenter(Edge edge) public float length(Edge edge)
FaceOps.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.normalgen.NewellNormal, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.Iterator class FaceOps private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void FaceOps(BMesh bmesh) public Vector3f normal(Face face) public Vector3f normal(Face face, Vector3f store) public Vector3f normalConvex(Face face) public Vector3f normalConvex(Face face, Vector3f store) public Vector3f normalConvex(Loop loop, Vector3f store) public Vector3f centroid(Face face) public Vector3f centroid(Face face, Vector3f store) public boolean coplanar(Face face1, Face face2) public float area(Face face) public float area(Face face, Vector3f normal) public float areaTriangle(Face face) public void makePlanar(Face face) public void move(Face face, Vector3f offset) public void move(Face face, float dx, float dy, float dz) public void moveAlongNormal(Face face, float distance)
MeshOps.java: Imports: ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face class MeshOps public static void invert(BMesh bmesh) public static void mergePlanarFaces(BMesh bmesh)
ScaleFace.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.Iterator, java.util.Objects, java.util.function.Function class ScaleFace private final Vec3Attribute<Vertex> positions private float scale private Function<Face, Vector3f> pivotFunc public void ScaleFace(BMesh bmesh, float scale, Function<Face, Vector3f> pivotFunction) public void ScaleFace(BMesh bmesh, float scale) public void ScaleFace(BMesh bmesh) public void setScale(float scale) public float getScale() public void setPivotFunction(Function<Face, Vector3f> pivotFunction) public void apply(Face face) class CentroidPivot private final FaceOps faceOps private final Vector3f store public void CentroidPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class FirstVertexPivot private final Vec3Attribute<Vertex> positions private final Vector3f store public void FirstVertexPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class PointPivot private final Vector3f pivotPoint public void PointPivot() public void PointPivot(Vector3f pivotPoint) public void PointPivot(float xPivot, float yPivot, float zPivot) public void setPivotPoint(Vector3f pivotPoint) public void setPivotPoint(float xPivot, float yPivot, float zPivot) public Vector3f getPivotPoint() @Override
        public Vector3f apply(Face face) class CentroidPivot private final FaceOps faceOps private final Vector3f store public void CentroidPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class FirstVertexPivot private final Vec3Attribute<Vertex> positions private final Vector3f store public void FirstVertexPivot(BMesh bmesh) @Override
        public Vector3f apply(Face face) class PointPivot private final Vector3f pivotPoint public void PointPivot() public void PointPivot(Vector3f pivotPoint) public void PointPivot(float xPivot, float yPivot, float zPivot) public void setPivotPoint(Vector3f pivotPoint) public void setPivotPoint(float xPivot, float yPivot, float zPivot) public Vector3f getPivotPoint() @Override
        public Vector3f apply(Face face)
VertexOps.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f class VertexOps private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void VertexOps(BMesh bmesh) public void move(Vertex vertex, Vector3f offset) public void move(Vertex vertex, float dx, float dy, float dz)
ExtrudeFace.java: Imports: ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, java.util.ArrayList, java.util.List class ExtrudeFace private final BMesh bmesh private final transient List<Loop> tempLoops private Face face private final List<Vertex> originalVertices private final List<Face> resultFaces public void ExtrudeFace(BMesh bmesh) public void apply(Face face) public void copyVertexAttributes() public Face recreateOriginalFace() public List<Face> getResultFaces()
ExtrudePath.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec2Attribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.ArrayList, java.util.Collection, java.util.Iterator class ExtrudePath private final BMesh bmesh private final Vec3Attribute<Vertex> positions private final ExtrudeFace extrude private final ArrayList<Vector2f> shape private Face face private int numSegments public void ExtrudePath(BMesh bmesh) public void apply(Face face, PlanarCoordinateSystem faceCoordSys, Iterable<PlanarCoordinateSystem> path) public void applyLoopTexCoords() private float[] calcTexCoordsX() private void applyLoopTexCoords(Loop loop, int side, float[] texCoordsX, float yFront, float yBack, Vec2Attribute<Loop> attrTexCoords) class PointListPath protected final ArrayList<Vector3f> points protected final Vector3f startPoint public void PointListPath(Vector3f startPoint) public void PointListPath(Vector3f startPoint, Collection<Vector3f> points) public void addPoint(Vector3f p) public void clearPoints() protected abstract void setTangent(int i, Vector3f tangent, Vector3f normal) @Override
        public Iterator<PlanarCoordinateSystem> iterator() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next() class PointListPath protected final ArrayList<Vector3f> points protected final Vector3f startPoint public void PointListPath(Vector3f startPoint) public void PointListPath(Vector3f startPoint, Collection<Vector3f> points) public void addPoint(Vector3f p) public void clearPoints() protected abstract void setTangent(int i, Vector3f tangent, Vector3f normal) @Override
        public Iterator<PlanarCoordinateSystem> iterator() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next() class null private final PlanarCoordinateSystem coordSys private final Vector3f normal private final Vector3f tangent private int i @Override
                public boolean hasNext() @Override
                public PlanarCoordinateSystem next()
CollapseEdge.java: Imports: ch.alchemists.jbmesh.structure, java.util.ArrayList, java.util.HashMap, java.util.List, java.util.Map class CollapseEdge private final BMesh bmesh public void CollapseEdge(BMesh bmesh) public void apply(Edge edge) public static void apply(BMesh bmesh, Edge edge) class FaceVertices public final List<Vertex> vertices class FaceVertices public final List<Vertex> vertices
SubdivideFace.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure, com.jme3.math.Vector3f, java.util class SubdivideFace private final BMesh bmesh private final Map<Face, FaceInfo> faceInfo private final Set<Edge> edges private final Vec3Attribute<Vertex> positions private int cuts private final List<Loop> tempLoops private final Vector3f tempP private final Vector3f tempStep public void SubdivideFace(BMesh bmesh) public void SubdivideFace(BMesh bmesh, int cuts) public void setCuts(int cuts) public void apply(List<Face> faces) private void prepare(Face face) private void splitEdge(Edge edge, int cuts) private void subdivide(Face face, FaceInfo info) private void subdivideTriangle(Face face, int first) private void subdivideQuad(Face face, int first) class FaceInfo public final Vertex startVertex public final int sides public void FaceInfo(List<Loop> loops) class FaceInfo public final Vertex startVertex public final int sides public void FaceInfo(List<Loop> loops)

package ch.alchemists.jbmesh.operator.sweeptriang
EdgeSet.java: Imports: ch.alchemists.jbmesh.util.DebugVisual, com.jme3.math.Vector3f, java.util.Comparator, java.util.TreeSet class EdgeSet private final KeyComparator comparator private final TreeSet<Key> edges public void clear() public void addEdge(SweepEdge edge) public SweepEdge getEdge(SweepVertex v) public SweepEdge removeEdge(SweepVertex v) public void drawSweepSegments(float y) public void printEdges(float y) class Key public final float x public final SweepEdge edge public void Key(float x) public void Key(SweepEdge edge) public float getX(float y) class KeyComparator private float y public void setY(float y) @Override
        public int compare(Key k1, Key k2) class Key public final float x public final SweepEdge edge public void Key(float x) public void Key(SweepEdge edge) public float getX(float y) class KeyComparator private float y public void setY(float y) @Override
        public int compare(Key k1, Key k2)
SweepEdge.java: Imports:  class SweepEdge public SweepVertex start public SweepVertex end public MonotoneSweep monotoneSweep public MonotoneSweep lastMerge public SweepEdge rightEdge private float xLeft private float xChange public void SweepEdge(SweepVertex start, SweepVertex end) public void reset(SweepVertex start, SweepVertex end) public float getXAtY(float y) @Override
    public String toString()
Preparation.java: Imports: ch.alchemists.jbmesh.util.Func, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.Collection, java.util.Iterator class Preparation private static final float MIN_VERTEX_DISTANCE private static final String INVALID_FACE private final Collection<SweepVertex> sweepVertices private PlanarCoordinateSystem coordSys private int nextFaceIndex  void Preparation(Collection<SweepVertex> sweepVertices)  void reset() public void setCoordinateSystem(PlanarCoordinateSystem coordSys)  void addFace(Iterable<T> face, MapVec3<T> positionMap, MapVertex<T> vertexMap) private void prepareVertices(SweepVertex first) private static boolean isValid(SweepVertex v) private static float dot(float x1, float y1, float x2, float y2) private static SweepVertex removeLink(SweepVertex v) class T class T
SweepVertex.java: Imports: ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector2f class SweepVertex public final Vertex vertex public final int index public final int face final Vector2f p  boolean leftTurn  SweepVertex next  SweepVertex prev  void SweepVertex(Vertex vertex, int index, int face) @Override
    public int compareTo(SweepVertex o) public boolean isAbove(SweepVertex o) @Override
    public String toString()
MonotoneSweep.java: Imports: com.jme3.math.Vector2f, java.util.ArrayDeque class MonotoneSweep private final ArrayDeque<SweepVertex> stack private boolean lastLeft private final TriangleCallback cb public void MonotoneSweep(SweepVertex v, TriangleCallback cb) public SweepVertex getLastVertex() public void processLeft(SweepVertex v) public void processRight(SweepVertex v) public void processEnd(SweepVertex v) private void processSameSide(SweepVertex v) private void processOtherSide(SweepVertex v) private void handleTriangle(SweepVertex v1, SweepVertex v2, SweepVertex v3) private void printStack()
SweepTriangulation.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.DebugVisual, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector3f, java.util.TreeSet class SweepTriangulation private final TreeSet<SweepVertex> sweepVertices private final EdgeSet edges private final Preparation preparation private TriangleCallback cb public void SweepTriangulation() public void SweepTriangulation(TriangleCallback triangleCallback) public void setTriangleCallback(TriangleCallback triangleCallback) public void setCoordinateSystem(PlanarCoordinateSystem coordSys) public void addFace(BMesh bmesh, Face face) public void addFace(Vec3Attribute<Vertex> positions, Face face) public void addFaceWithLoops(BMesh bmesh, Iterable<Loop> face) public void addFaceWithLoops(Vec3Attribute<Vertex> positions, Iterable<Loop> face) public void addFaceWithPositions(Iterable<Vector3f> face) public void triangulate() public void triangulateDebug(float yLimit) private void handleSweepVertex(SweepVertex v) private void handleStart(SweepVertex v) private void handleSplit(SweepVertex v) private void handleMerge(SweepVertex v) private void handleEnd(SweepVertex v) private void handleContinuation(SweepVertex v) private SweepVertex getContinuationVertex(SweepEdge edge) private void drawMonotonePath(SweepVertex src, SweepVertex dest) interface TriangleCallback  void handleTriangle(SweepVertex v1, SweepVertex v2, SweepVertex v3) interface TriangleCallback  void handleTriangle(SweepVertex v1, SweepVertex v2, SweepVertex v3)
EdgeSet.java: Imports: ch.alchemists.jbmesh.util.DebugVisual, com.jme3.math.Vector3f, java.util.Comparator, java.util.TreeSet class EdgeSet private final KeyComparator comparator private final TreeSet<Key> edges public void clear() public void addEdge(SweepEdge edge) public SweepEdge getEdge(SweepVertex v) public SweepEdge removeEdge(SweepVertex v) public void drawSweepSegments(float y) public void printEdges(float y) class Key public final float x public final SweepEdge edge public void Key(float x) public void Key(SweepEdge edge) public float getX(float y) class KeyComparator private float y public void setY(float y) @Override
        public int compare(Key k1, Key k2) class Key public final float x public final SweepEdge edge public void Key(float x) public void Key(SweepEdge edge) public float getX(float y) class KeyComparator private float y public void setY(float y) @Override
        public int compare(Key k1, Key k2)
SweepEdge.java: Imports:  class SweepEdge public SweepVertex start public SweepVertex end public MonotoneSweep monotoneSweep public MonotoneSweep lastMerge public SweepEdge rightEdge private float xLeft private float xChange public void SweepEdge(SweepVertex start, SweepVertex end) public void reset(SweepVertex start, SweepVertex end) public float getXAtY(float y) @Override
    public String toString()
Preparation.java: Imports: ch.alchemists.jbmesh.util.Func, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.Collection, java.util.Iterator class Preparation private static final float MIN_VERTEX_DISTANCE private static final String INVALID_FACE private final Collection<SweepVertex> sweepVertices private PlanarCoordinateSystem coordSys private int nextFaceIndex  void Preparation(Collection<SweepVertex> sweepVertices)  void reset() public void setCoordinateSystem(PlanarCoordinateSystem coordSys)  void addFace(Iterable<T> face, MapVec3<T> positionMap, MapVertex<T> vertexMap) private void prepareVertices(SweepVertex first) private static boolean isValid(SweepVertex v) private static float dot(float x1, float y1, float x2, float y2) private static SweepVertex removeLink(SweepVertex v) class T class T
SweepVertex.java: Imports: ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector2f class SweepVertex public final Vertex vertex public final int index public final int face final Vector2f p  boolean leftTurn  SweepVertex next  SweepVertex prev  void SweepVertex(Vertex vertex, int index, int face) @Override
    public int compareTo(SweepVertex o) public boolean isAbove(SweepVertex o) @Override
    public String toString()
MonotoneSweep.java: Imports: com.jme3.math.Vector2f, java.util.ArrayDeque class MonotoneSweep private final ArrayDeque<SweepVertex> stack private boolean lastLeft private final TriangleCallback cb public void MonotoneSweep(SweepVertex v, TriangleCallback cb) public SweepVertex getLastVertex() public void processLeft(SweepVertex v) public void processRight(SweepVertex v) public void processEnd(SweepVertex v) private void processSameSide(SweepVertex v) private void processOtherSide(SweepVertex v) private void handleTriangle(SweepVertex v1, SweepVertex v2, SweepVertex v3) private void printStack()
SweepTriangulation.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.DebugVisual, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector3f, java.util.TreeSet class SweepTriangulation private final TreeSet<SweepVertex> sweepVertices private final EdgeSet edges private final Preparation preparation private TriangleCallback cb public void SweepTriangulation() public void SweepTriangulation(TriangleCallback triangleCallback) public void setTriangleCallback(TriangleCallback triangleCallback) public void setCoordinateSystem(PlanarCoordinateSystem coordSys) public void addFace(BMesh bmesh, Face face) public void addFace(Vec3Attribute<Vertex> positions, Face face) public void addFaceWithLoops(BMesh bmesh, Iterable<Loop> face) public void addFaceWithLoops(Vec3Attribute<Vertex> positions, Iterable<Loop> face) public void addFaceWithPositions(Iterable<Vector3f> face) public void triangulate() public void triangulateDebug(float yLimit) private void handleSweepVertex(SweepVertex v) private void handleStart(SweepVertex v) private void handleSplit(SweepVertex v) private void handleMerge(SweepVertex v) private void handleEnd(SweepVertex v) private void handleContinuation(SweepVertex v) private SweepVertex getContinuationVertex(SweepEdge edge) private void drawMonotonePath(SweepVertex src, SweepVertex dest) interface TriangleCallback  void handleTriangle(SweepVertex v1, SweepVertex v2, SweepVertex v3) interface TriangleCallback  void handleTriangle(SweepVertex v1, SweepVertex v2, SweepVertex v3)
EdgeSet.java: Imports: ch.alchemists.jbmesh.util.DebugVisual, com.jme3.math.Vector3f, java.util.Comparator, java.util.TreeSet class EdgeSet private final KeyComparator comparator private final TreeSet<Key> edges public void clear() public void addEdge(SweepEdge edge) public SweepEdge getEdge(SweepVertex v) public SweepEdge removeEdge(SweepVertex v) public void drawSweepSegments(float y) public void printEdges(float y) class Key public final float x public final SweepEdge edge public void Key(float x) public void Key(SweepEdge edge) public float getX(float y) class KeyComparator private float y public void setY(float y) @Override
        public int compare(Key k1, Key k2) class Key public final float x public final SweepEdge edge public void Key(float x) public void Key(SweepEdge edge) public float getX(float y) class KeyComparator private float y public void setY(float y) @Override
        public int compare(Key k1, Key k2)
SweepEdge.java: Imports:  class SweepEdge public SweepVertex start public SweepVertex end public MonotoneSweep monotoneSweep public MonotoneSweep lastMerge public SweepEdge rightEdge private float xLeft private float xChange public void SweepEdge(SweepVertex start, SweepVertex end) public void reset(SweepVertex start, SweepVertex end) public float getXAtY(float y) @Override
    public String toString()
Preparation.java: Imports: ch.alchemists.jbmesh.util.Func, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.Collection, java.util.Iterator class Preparation private static final float MIN_VERTEX_DISTANCE private static final String INVALID_FACE private final Collection<SweepVertex> sweepVertices private PlanarCoordinateSystem coordSys private int nextFaceIndex  void Preparation(Collection<SweepVertex> sweepVertices)  void reset() public void setCoordinateSystem(PlanarCoordinateSystem coordSys)  void addFace(Iterable<T> face, MapVec3<T> positionMap, MapVertex<T> vertexMap) private void prepareVertices(SweepVertex first) private static boolean isValid(SweepVertex v) private static float dot(float x1, float y1, float x2, float y2) private static SweepVertex removeLink(SweepVertex v) class T class T
SweepVertex.java: Imports: ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector2f class SweepVertex public final Vertex vertex public final int index public final int face final Vector2f p  boolean leftTurn  SweepVertex next  SweepVertex prev  void SweepVertex(Vertex vertex, int index, int face) @Override
    public int compareTo(SweepVertex o) public boolean isAbove(SweepVertex o) @Override
    public String toString()
MonotoneSweep.java: Imports: com.jme3.math.Vector2f, java.util.ArrayDeque class MonotoneSweep private final ArrayDeque<SweepVertex> stack private boolean lastLeft private final TriangleCallback cb public void MonotoneSweep(SweepVertex v, TriangleCallback cb) public SweepVertex getLastVertex() public void processLeft(SweepVertex v) public void processRight(SweepVertex v) public void processEnd(SweepVertex v) private void processSameSide(SweepVertex v) private void processOtherSide(SweepVertex v) private void handleTriangle(SweepVertex v1, SweepVertex v2, SweepVertex v3) private void printStack()
SweepTriangulation.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.DebugVisual, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector3f, java.util.TreeSet class SweepTriangulation private final TreeSet<SweepVertex> sweepVertices private final EdgeSet edges private final Preparation preparation private TriangleCallback cb public void SweepTriangulation() public void SweepTriangulation(TriangleCallback triangleCallback) public void setTriangleCallback(TriangleCallback triangleCallback) public void setCoordinateSystem(PlanarCoordinateSystem coordSys) public void addFace(BMesh bmesh, Face face) public void addFace(Vec3Attribute<Vertex> positions, Face face) public void addFaceWithLoops(BMesh bmesh, Iterable<Loop> face) public void addFaceWithLoops(Vec3Attribute<Vertex> positions, Iterable<Loop> face) public void addFaceWithPositions(Iterable<Vector3f> face) public void triangulate() public void triangulateDebug(float yLimit) private void handleSweepVertex(SweepVertex v) private void handleStart(SweepVertex v) private void handleSplit(SweepVertex v) private void handleMerge(SweepVertex v) private void handleEnd(SweepVertex v) private void handleContinuation(SweepVertex v) private SweepVertex getContinuationVertex(SweepEdge edge) private void drawMonotonePath(SweepVertex src, SweepVertex dest) interface TriangleCallback  void handleTriangle(SweepVertex v1, SweepVertex v2, SweepVertex v3) interface TriangleCallback  void handleTriangle(SweepVertex v1, SweepVertex v2, SweepVertex v3)

package ch.alchemists.jbmesh.operator.triangulation
Trapezoid.java: Imports: ch.alchemists.jbmesh.util.DebugVisual, com.jme3.math.Vector2f, com.jme3.math.Vector3f class Trapezoid private static final float EPSILON final Vector2f high final Vector2f low  EdgeSplitNode lSeg  EdgeSplitNode rSeg  Trapezoid d1  Trapezoid d2  Trapezoid u1  Trapezoid u2  Trapezoid u3  Side u3Side private boolean insideState  void Trapezoid() @Override
    protected Trapezoid clone() private void set(Trapezoid trapezoid) public boolean vertexExists(Vector2f v) public void makeInfinite() public Trapezoid splitByVertex(Vector2f vertexSplit) private void replaceUpperNeighbor(Trapezoid from, Trapezoid to) public Trapezoid splitByEdge(EdgeSplitNode edgeSplit) private static void updateUp(Trapezoid oldLeft, Trapezoid newRight, EdgeSplitNode edgeSplit) private static void updateDown(Trapezoid oldLeft, Trapezoid newRight, EdgeSplitNode edgeSplit) private static void updateUpOld(Trapezoid oldLeft, Trapezoid newRight, EdgeSplitNode edgeSplit) private static void updateDownOld(Trapezoid oldTrapez, Trapezoid newTrapez, EdgeSplitNode edgeSplit) public boolean mergeUp() public boolean mergeDown() private static boolean fEq(float a, float b) private void printInfo() public void addDebugVis(int regionNr) public Vector3f getMidPoint() public Vector3f[] getCorners() enum Side  Side Undefined  Side Left  Side Right public static Side[] values() public static Side valueOf(String name) enum Side  Side Undefined  Side Left  Side Right public static Side[] values() public static Side valueOf(String name)
TrapezoidTree.java: Imports: ch.alchemists.jbmesh.util.DebugVisual, com.jme3.math.Vector2f, com.jme3.math.Vector3f class TrapezoidTree private static final float EPSILON private Node root private int nextRegionNr public void TrapezoidTree() public void addEdge(Vector2f v1, Vector2f v2) private void addEdgeInternal(Vector2f higher, Vector2f lower) public void printTree() private static void print(int level, String name) interface Node  Node addVertex(Vector2f v)  void addEdge(Vector2f higher, Vector2f lower) default void print(int level) class SplitNode public Node rightHigh public Node leftLow protected void SplitNode() public final void changeChild(RegionNode from, SplitNode to) @Override
        public void print(int level) class VertexSplitNode final Vector2f vertex public void VertexSplitNode(Vector2f v) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) class EdgeSplitNode final Vector2f higher final Vector2f lower public void EdgeSplitNode(Vector2f higher, Vector2f lower) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) public boolean pointIsLeft(Vector2f p) public float xCoordsAt(float y) public static float xCoordsAt(float y, Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString() class RegionNode private final int regionNr private SplitNode parent private final Trapezoid trapezoid public void RegionNode(SplitNode parent, Trapezoid trapezoid) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString() interface Node  Node addVertex(Vector2f v)  void addEdge(Vector2f higher, Vector2f lower) default void print(int level) class SplitNode public Node rightHigh public Node leftLow protected void SplitNode() public final void changeChild(RegionNode from, SplitNode to) @Override
        public void print(int level) class VertexSplitNode final Vector2f vertex public void VertexSplitNode(Vector2f v) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) class EdgeSplitNode final Vector2f higher final Vector2f lower public void EdgeSplitNode(Vector2f higher, Vector2f lower) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) public boolean pointIsLeft(Vector2f p) public float xCoordsAt(float y) public static float xCoordsAt(float y, Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString() class RegionNode private final int regionNr private SplitNode parent private final Trapezoid trapezoid public void RegionNode(SplitNode parent, Trapezoid trapezoid) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString()
SeidelTriangulation.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.DebugVisual, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.ArrayList, java.util.Collections, java.util.Random class SeidelTriangulation private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void SeidelTriangulation(BMesh bmesh) public void apply(Face face)
Trapezoid.java: Imports: ch.alchemists.jbmesh.util.DebugVisual, com.jme3.math.Vector2f, com.jme3.math.Vector3f class Trapezoid private static final float EPSILON final Vector2f high final Vector2f low  EdgeSplitNode lSeg  EdgeSplitNode rSeg  Trapezoid d1  Trapezoid d2  Trapezoid u1  Trapezoid u2  Trapezoid u3  Side u3Side private boolean insideState  void Trapezoid() @Override
    protected Trapezoid clone() private void set(Trapezoid trapezoid) public boolean vertexExists(Vector2f v) public void makeInfinite() public Trapezoid splitByVertex(Vector2f vertexSplit) private void replaceUpperNeighbor(Trapezoid from, Trapezoid to) public Trapezoid splitByEdge(EdgeSplitNode edgeSplit) private static void updateUp(Trapezoid oldLeft, Trapezoid newRight, EdgeSplitNode edgeSplit) private static void updateDown(Trapezoid oldLeft, Trapezoid newRight, EdgeSplitNode edgeSplit) private static void updateUpOld(Trapezoid oldLeft, Trapezoid newRight, EdgeSplitNode edgeSplit) private static void updateDownOld(Trapezoid oldTrapez, Trapezoid newTrapez, EdgeSplitNode edgeSplit) public boolean mergeUp() public boolean mergeDown() private static boolean fEq(float a, float b) private void printInfo() public void addDebugVis(int regionNr) public Vector3f getMidPoint() public Vector3f[] getCorners() enum Side  Side Undefined  Side Left  Side Right public static Side[] values() public static Side valueOf(String name) enum Side  Side Undefined  Side Left  Side Right public static Side[] values() public static Side valueOf(String name)
TrapezoidTree.java: Imports: ch.alchemists.jbmesh.util.DebugVisual, com.jme3.math.Vector2f, com.jme3.math.Vector3f class TrapezoidTree private static final float EPSILON private Node root private int nextRegionNr public void TrapezoidTree() public void addEdge(Vector2f v1, Vector2f v2) private void addEdgeInternal(Vector2f higher, Vector2f lower) public void printTree() private static void print(int level, String name) interface Node  Node addVertex(Vector2f v)  void addEdge(Vector2f higher, Vector2f lower) default void print(int level) class SplitNode public Node rightHigh public Node leftLow protected void SplitNode() public final void changeChild(RegionNode from, SplitNode to) @Override
        public void print(int level) class VertexSplitNode final Vector2f vertex public void VertexSplitNode(Vector2f v) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) class EdgeSplitNode final Vector2f higher final Vector2f lower public void EdgeSplitNode(Vector2f higher, Vector2f lower) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) public boolean pointIsLeft(Vector2f p) public float xCoordsAt(float y) public static float xCoordsAt(float y, Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString() class RegionNode private final int regionNr private SplitNode parent private final Trapezoid trapezoid public void RegionNode(SplitNode parent, Trapezoid trapezoid) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString() interface Node  Node addVertex(Vector2f v)  void addEdge(Vector2f higher, Vector2f lower) default void print(int level) class SplitNode public Node rightHigh public Node leftLow protected void SplitNode() public final void changeChild(RegionNode from, SplitNode to) @Override
        public void print(int level) class VertexSplitNode final Vector2f vertex public void VertexSplitNode(Vector2f v) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) class EdgeSplitNode final Vector2f higher final Vector2f lower public void EdgeSplitNode(Vector2f higher, Vector2f lower) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) public boolean pointIsLeft(Vector2f p) public float xCoordsAt(float y) public static float xCoordsAt(float y, Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString() class RegionNode private final int regionNr private SplitNode parent private final Trapezoid trapezoid public void RegionNode(SplitNode parent, Trapezoid trapezoid) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString()
SeidelTriangulation.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.DebugVisual, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.ArrayList, java.util.Collections, java.util.Random class SeidelTriangulation private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void SeidelTriangulation(BMesh bmesh) public void apply(Face face)
Trapezoid.java: Imports: ch.alchemists.jbmesh.util.DebugVisual, com.jme3.math.Vector2f, com.jme3.math.Vector3f class Trapezoid private static final float EPSILON final Vector2f high final Vector2f low  EdgeSplitNode lSeg  EdgeSplitNode rSeg  Trapezoid d1  Trapezoid d2  Trapezoid u1  Trapezoid u2  Trapezoid u3  Side u3Side private boolean insideState  void Trapezoid() @Override
    protected Trapezoid clone() private void set(Trapezoid trapezoid) public boolean vertexExists(Vector2f v) public void makeInfinite() public Trapezoid splitByVertex(Vector2f vertexSplit) private void replaceUpperNeighbor(Trapezoid from, Trapezoid to) public Trapezoid splitByEdge(EdgeSplitNode edgeSplit) private static void updateUp(Trapezoid oldLeft, Trapezoid newRight, EdgeSplitNode edgeSplit) private static void updateDown(Trapezoid oldLeft, Trapezoid newRight, EdgeSplitNode edgeSplit) private static void updateUpOld(Trapezoid oldLeft, Trapezoid newRight, EdgeSplitNode edgeSplit) private static void updateDownOld(Trapezoid oldTrapez, Trapezoid newTrapez, EdgeSplitNode edgeSplit) public boolean mergeUp() public boolean mergeDown() private static boolean fEq(float a, float b) private void printInfo() public void addDebugVis(int regionNr) public Vector3f getMidPoint() public Vector3f[] getCorners() enum Side  Side Undefined  Side Left  Side Right public static Side[] values() public static Side valueOf(String name) enum Side  Side Undefined  Side Left  Side Right public static Side[] values() public static Side valueOf(String name)
TrapezoidTree.java: Imports: ch.alchemists.jbmesh.util.DebugVisual, com.jme3.math.Vector2f, com.jme3.math.Vector3f class TrapezoidTree private static final float EPSILON private Node root private int nextRegionNr public void TrapezoidTree() public void addEdge(Vector2f v1, Vector2f v2) private void addEdgeInternal(Vector2f higher, Vector2f lower) public void printTree() private static void print(int level, String name) interface Node  Node addVertex(Vector2f v)  void addEdge(Vector2f higher, Vector2f lower) default void print(int level) class SplitNode public Node rightHigh public Node leftLow protected void SplitNode() public final void changeChild(RegionNode from, SplitNode to) @Override
        public void print(int level) class VertexSplitNode final Vector2f vertex public void VertexSplitNode(Vector2f v) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) class EdgeSplitNode final Vector2f higher final Vector2f lower public void EdgeSplitNode(Vector2f higher, Vector2f lower) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) public boolean pointIsLeft(Vector2f p) public float xCoordsAt(float y) public static float xCoordsAt(float y, Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString() class RegionNode private final int regionNr private SplitNode parent private final Trapezoid trapezoid public void RegionNode(SplitNode parent, Trapezoid trapezoid) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString() interface Node  Node addVertex(Vector2f v)  void addEdge(Vector2f higher, Vector2f lower) default void print(int level) class SplitNode public Node rightHigh public Node leftLow protected void SplitNode() public final void changeChild(RegionNode from, SplitNode to) @Override
        public void print(int level) class VertexSplitNode final Vector2f vertex public void VertexSplitNode(Vector2f v) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) class EdgeSplitNode final Vector2f higher final Vector2f lower public void EdgeSplitNode(Vector2f higher, Vector2f lower) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) public boolean pointIsLeft(Vector2f p) public float xCoordsAt(float y) public static float xCoordsAt(float y, Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString() class RegionNode private final int regionNr private SplitNode parent private final Trapezoid trapezoid public void RegionNode(SplitNode parent, Trapezoid trapezoid) @Override
        public Node addVertex(Vector2f v) @Override
        public void addEdge(Vector2f higher, Vector2f lower) @Override
        public void print(int level) @Override
        public String toString()
SeidelTriangulation.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.DebugVisual, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.math.Vector2f, com.jme3.math.Vector3f, java.util.ArrayList, java.util.Collections, java.util.Random class SeidelTriangulation private final BMesh bmesh private final Vec3Attribute<Vertex> positions public void SeidelTriangulation(BMesh bmesh) public void apply(Face face)

package ch.alchemists.jbmesh.structure
Edge.java: Imports: ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.LoopMapIterator, java.util.ArrayList, java.util.Collection, java.util.Iterator, java.util.Objects class Edge public Vertex vertex0 public Vertex vertex1 private Edge v0NextEdge private Edge v0PrevEdge private Edge v1NextEdge private Edge v1PrevEdge public Loop loop  void Edge() @Override
    protected void releaseElement() public void addLoop(Loop loop) public void removeLoop(Loop loop) public void setNextEdge(Vertex contactPoint, Edge edge) public void setPrevEdge(Vertex contactPoint, Edge edge) public Edge getNextEdge(Vertex contactPoint) public Edge getPrevEdge(Vertex contactPoint)  void diskSetBetween(Vertex contactPoint, Edge prev, Edge next)  void diskRemove(Vertex contactPoint) public boolean connects(Vertex v0, Vertex v1) public boolean isAdjacentTo(Vertex vertex) public boolean isAdjacentTo(Face face) public boolean isAdjacentTo(Edge edge) public Vertex getCommonVertex(Edge other) public Vertex getOther(Vertex vertex) public void setOther(Vertex contactPoint, Vertex vertex) public void replace(Vertex oldVertex, Vertex newVertex) public ArrayList<Face> getFaces() public C getFaces(C collection) public Iterable<Face> faces() public ArrayList<Loop> getLoops() public C getLoops(C collection) public Iterable<Loop> loops() class C class C class EdgeLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void EdgeLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next() class C class C class EdgeLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void EdgeLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next()
Face.java: Imports: ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.LoopMapIterator, java.util.ArrayList, java.util.Collection, java.util.Iterator, java.util.List class Face public Loop loop  void Face() @Override
    protected void releaseElement() public Edge getAnyCommonEdge(Face face) public List<Edge> getCommonEdges(Face face) public int countCommonEdges(Face face) public int countVertices(Face face) public ArrayList<Vertex> getVertices() public C getVertices(C collection) public Iterable<Vertex> vertices() public ArrayList<Edge> getEdges() public C getEdges(C collection) public Iterable<Edge> edges() public ArrayList<Loop> getLoops() public C getLoops(C collection) public Iterable<Loop> loops() public Loop getLoop(Vertex from, Vertex to) class C class C class C class FaceLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void FaceLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next() class C class C class C class FaceLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void FaceLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next()
Loop.java: Imports: ch.alchemists.jbmesh.data.Element class Loop public Face face public Edge edge public Vertex vertex public Loop nextFaceLoop public Loop prevFaceLoop public Loop nextEdgeLoop public Loop prevEdgeLoop  void Loop() @Override
    protected void releaseElement() public void faceSetBetween(Loop prev, Loop next) public void faceRemove() public void radialSetBetween(Loop prev, Loop next) public void radialRemove()
BMesh.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.property.Vec3Attribute, com.jme3.math.Vector3f, java.util.ArrayList, java.util.Arrays, java.util.List, java.util.Objects class BMesh private final BMeshData<Vertex> vertexData private final BMeshData<Edge> edgeData private final BMeshData<Face> faceData private final BMeshData<Loop> loopData private final Vec3Attribute<Vertex> attrPosition private final transient ArrayList<Loop> tempLoops public void BMesh() public BMeshData<Vertex> vertices() public BMeshData<Edge> edges() public BMeshData<Face> faces() public BMeshData<Loop> loops() public void compactData() public void clear() public Vertex createVertex() public Vertex createVertex(float x, float y, float z) public Vertex createVertex(Vector3f location) public void removeVertex(Vertex vertex) public Edge createEdge(Vertex v0, Vertex v1) public void removeEdge(Edge edge) public Face createFace(List<Vertex> faceVertices) public Face createFace(Vertex... faceVertices) public void removeFace(Face face) public Vertex splitEdge(Edge edge) public boolean joinEdge(Edge edge, Vertex vertex) public Edge splitFace(Vertex vertex1, Vertex vertex2) public Edge splitFace(Face face, Vertex vertex1, Vertex vertex2) public void joinFace(Face face1, Face face2) public void joinFace(Face face1, Face face2, Edge commonEdge) public void invertFace(Face face)
Vertex.java: Imports: ch.alchemists.jbmesh.data.Element, java.util.Iterator class Vertex public Edge edge  void Vertex() @Override
    public void releaseElement() public void addEdge(Edge edge) public void removeEdge(Edge edge) public Edge getEdgeTo(Vertex other) public Face getCommonFace(Vertex other) public Iterable<Edge> edges() class VertexEdgeIterator private Edge current private boolean first public void VertexEdgeIterator() @Override
        public boolean hasNext() @Override
        public Edge next() class VertexEdgeIterator private Edge current private boolean first public void VertexEdgeIterator() @Override
        public boolean hasNext() @Override
        public Edge next()
EdgeTest.java: Imports: org.junit.jupiter.api.Test class EdgeTest @Test
    public void testCtor() @Test
    public void testNonAdjacent() @Test
    public void testRadialCycle() @Test
    public void testAdjacency()
LoopTest.java: Imports: org.junit.jupiter.api.Test class LoopTest @Test
    public void testCtor()
BMeshTest.java: Imports: ch.alchemists.jbmesh.TestUtil, org.junit.jupiter.api.Test class BMeshTest @Test
    public void testRemoveVertex() @Test
    public void testCreateEdge() @Test
    public void testRemoveEdge() @Test
    public void testCreateFace() @Test
    public void testRemoveFace()
VertexTest.java: Imports: org.junit.jupiter.api.Test class VertexTest @Test
    public void testCtor() @Test
    public void testDiskCycleAdd() @Test
    public void testDiskCycleRemove() @Test
    public void testEdgeNull() private static void assertDiskCycleNext(Vertex vert, Edge... expectedEdges) private static void assertDiskCyclePrev(Vertex vert, Edge... expectedEdges)
BMeshEulerTest.java: Imports: ch.alchemists.jbmesh.TestUtil, java.util.HashMap, java.util.Iterator, java.util.Map, org.junit.jupiter.api.Test class BMeshEulerTest @Test
    public void testSplitEdge() @Test
    public void testJoinEdge() @Test
    public void testSplitFace() @Test
    public void testjoinFace() @Test
    public void testInvertFace() class SameLoopVertexTester private final Map<Loop, Vertex> loopVertexMap public void addAll(Loop... loops) public void addAll(Iterable<Loop> loops) public void add(Loop loop) public void removeAll(Iterable<Loop> loops) public void remove(Loop loop) public void test() class SameLoopVertexTester private final Map<Loop, Vertex> loopVertexMap public void addAll(Loop... loops) public void addAll(Iterable<Loop> loops) public void add(Loop loop) public void removeAll(Iterable<Loop> loops) public void remove(Loop loop) public void test()
Edge.java: Imports: ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.LoopMapIterator, java.util.ArrayList, java.util.Collection, java.util.Iterator, java.util.Objects class Edge public Vertex vertex0 public Vertex vertex1 private Edge v0NextEdge private Edge v0PrevEdge private Edge v1NextEdge private Edge v1PrevEdge public Loop loop  void Edge() @Override
    protected void releaseElement() public void addLoop(Loop loop) public void removeLoop(Loop loop) public void setNextEdge(Vertex contactPoint, Edge edge) public void setPrevEdge(Vertex contactPoint, Edge edge) public Edge getNextEdge(Vertex contactPoint) public Edge getPrevEdge(Vertex contactPoint)  void diskSetBetween(Vertex contactPoint, Edge prev, Edge next)  void diskRemove(Vertex contactPoint) public boolean connects(Vertex v0, Vertex v1) public boolean isAdjacentTo(Vertex vertex) public boolean isAdjacentTo(Face face) public boolean isAdjacentTo(Edge edge) public Vertex getCommonVertex(Edge other) public Vertex getOther(Vertex vertex) public void setOther(Vertex contactPoint, Vertex vertex) public void replace(Vertex oldVertex, Vertex newVertex) public ArrayList<Face> getFaces() public C getFaces(C collection) public Iterable<Face> faces() public ArrayList<Loop> getLoops() public C getLoops(C collection) public Iterable<Loop> loops() class C class C class EdgeLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void EdgeLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next() class C class C class EdgeLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void EdgeLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next()
Face.java: Imports: ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.LoopMapIterator, java.util.ArrayList, java.util.Collection, java.util.Iterator, java.util.List class Face public Loop loop  void Face() @Override
    protected void releaseElement() public Edge getAnyCommonEdge(Face face) public List<Edge> getCommonEdges(Face face) public int countCommonEdges(Face face) public int countVertices(Face face) public ArrayList<Vertex> getVertices() public C getVertices(C collection) public Iterable<Vertex> vertices() public ArrayList<Edge> getEdges() public C getEdges(C collection) public Iterable<Edge> edges() public ArrayList<Loop> getLoops() public C getLoops(C collection) public Iterable<Loop> loops() public Loop getLoop(Vertex from, Vertex to) class C class C class C class FaceLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void FaceLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next() class C class C class C class FaceLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void FaceLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next()
Loop.java: Imports: ch.alchemists.jbmesh.data.Element class Loop public Face face public Edge edge public Vertex vertex public Loop nextFaceLoop public Loop prevFaceLoop public Loop nextEdgeLoop public Loop prevEdgeLoop  void Loop() @Override
    protected void releaseElement() public void faceSetBetween(Loop prev, Loop next) public void faceRemove() public void radialSetBetween(Loop prev, Loop next) public void radialRemove()
BMesh.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.property.Vec3Attribute, com.jme3.math.Vector3f, java.util.ArrayList, java.util.Arrays, java.util.List, java.util.Objects class BMesh private final BMeshData<Vertex> vertexData private final BMeshData<Edge> edgeData private final BMeshData<Face> faceData private final BMeshData<Loop> loopData private final Vec3Attribute<Vertex> attrPosition private final transient ArrayList<Loop> tempLoops public void BMesh() public BMeshData<Vertex> vertices() public BMeshData<Edge> edges() public BMeshData<Face> faces() public BMeshData<Loop> loops() public void compactData() public void clear() public Vertex createVertex() public Vertex createVertex(float x, float y, float z) public Vertex createVertex(Vector3f location) public void removeVertex(Vertex vertex) public Edge createEdge(Vertex v0, Vertex v1) public void removeEdge(Edge edge) public Face createFace(List<Vertex> faceVertices) public Face createFace(Vertex... faceVertices) public void removeFace(Face face) public Vertex splitEdge(Edge edge) public boolean joinEdge(Edge edge, Vertex vertex) public Edge splitFace(Vertex vertex1, Vertex vertex2) public Edge splitFace(Face face, Vertex vertex1, Vertex vertex2) public void joinFace(Face face1, Face face2) public void joinFace(Face face1, Face face2, Edge commonEdge) public void invertFace(Face face)
Vertex.java: Imports: ch.alchemists.jbmesh.data.Element, java.util.Iterator class Vertex public Edge edge  void Vertex() @Override
    public void releaseElement() public void addEdge(Edge edge) public void removeEdge(Edge edge) public Edge getEdgeTo(Vertex other) public Face getCommonFace(Vertex other) public Iterable<Edge> edges() class VertexEdgeIterator private Edge current private boolean first public void VertexEdgeIterator() @Override
        public boolean hasNext() @Override
        public Edge next() class VertexEdgeIterator private Edge current private boolean first public void VertexEdgeIterator() @Override
        public boolean hasNext() @Override
        public Edge next()
EdgeTest.java: Imports: org.junit.jupiter.api.Test class EdgeTest @Test
    public void testCtor() @Test
    public void testNonAdjacent() @Test
    public void testRadialCycle() @Test
    public void testAdjacency()
LoopTest.java: Imports: org.junit.jupiter.api.Test class LoopTest @Test
    public void testCtor()
BMeshTest.java: Imports: ch.alchemists.jbmesh.TestUtil, org.junit.jupiter.api.Test class BMeshTest @Test
    public void testRemoveVertex() @Test
    public void testCreateEdge() @Test
    public void testRemoveEdge() @Test
    public void testCreateFace() @Test
    public void testRemoveFace()
VertexTest.java: Imports: org.junit.jupiter.api.Test class VertexTest @Test
    public void testCtor() @Test
    public void testDiskCycleAdd() @Test
    public void testDiskCycleRemove() @Test
    public void testEdgeNull() private static void assertDiskCycleNext(Vertex vert, Edge... expectedEdges) private static void assertDiskCyclePrev(Vertex vert, Edge... expectedEdges)
BMeshEulerTest.java: Imports: ch.alchemists.jbmesh.TestUtil, java.util.HashMap, java.util.Iterator, java.util.Map, org.junit.jupiter.api.Test class BMeshEulerTest @Test
    public void testSplitEdge() @Test
    public void testJoinEdge() @Test
    public void testSplitFace() @Test
    public void testjoinFace() @Test
    public void testInvertFace() class SameLoopVertexTester private final Map<Loop, Vertex> loopVertexMap public void addAll(Loop... loops) public void addAll(Iterable<Loop> loops) public void add(Loop loop) public void removeAll(Iterable<Loop> loops) public void remove(Loop loop) public void test() class SameLoopVertexTester private final Map<Loop, Vertex> loopVertexMap public void addAll(Loop... loops) public void addAll(Iterable<Loop> loops) public void add(Loop loop) public void removeAll(Iterable<Loop> loops) public void remove(Loop loop) public void test()
EdgeTest.java: Imports: org.junit.jupiter.api.Test class EdgeTest @Test
    public void testCtor() @Test
    public void testNonAdjacent() @Test
    public void testRadialCycle() @Test
    public void testAdjacency()
LoopTest.java: Imports: org.junit.jupiter.api.Test class LoopTest @Test
    public void testCtor()
BMeshTest.java: Imports: ch.alchemists.jbmesh.TestUtil, org.junit.jupiter.api.Test class BMeshTest @Test
    public void testRemoveVertex() @Test
    public void testCreateEdge() @Test
    public void testRemoveEdge() @Test
    public void testCreateFace() @Test
    public void testRemoveFace()
VertexTest.java: Imports: org.junit.jupiter.api.Test class VertexTest @Test
    public void testCtor() @Test
    public void testDiskCycleAdd() @Test
    public void testDiskCycleRemove() @Test
    public void testEdgeNull() private static void assertDiskCycleNext(Vertex vert, Edge... expectedEdges) private static void assertDiskCyclePrev(Vertex vert, Edge... expectedEdges)
BMeshEulerTest.java: Imports: ch.alchemists.jbmesh.TestUtil, java.util.HashMap, java.util.Iterator, java.util.Map, org.junit.jupiter.api.Test class BMeshEulerTest @Test
    public void testSplitEdge() @Test
    public void testJoinEdge() @Test
    public void testSplitFace() @Test
    public void testjoinFace() @Test
    public void testInvertFace() class SameLoopVertexTester private final Map<Loop, Vertex> loopVertexMap public void addAll(Loop... loops) public void addAll(Iterable<Loop> loops) public void add(Loop loop) public void removeAll(Iterable<Loop> loops) public void remove(Loop loop) public void test() class SameLoopVertexTester private final Map<Loop, Vertex> loopVertexMap public void addAll(Loop... loops) public void addAll(Iterable<Loop> loops) public void add(Loop loop) public void removeAll(Iterable<Loop> loops) public void remove(Loop loop) public void test()
Edge.java: Imports: ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.LoopMapIterator, java.util.ArrayList, java.util.Collection, java.util.Iterator, java.util.Objects class Edge public Vertex vertex0 public Vertex vertex1 private Edge v0NextEdge private Edge v0PrevEdge private Edge v1NextEdge private Edge v1PrevEdge public Loop loop  void Edge() @Override
    protected void releaseElement() public void addLoop(Loop loop) public void removeLoop(Loop loop) public void setNextEdge(Vertex contactPoint, Edge edge) public void setPrevEdge(Vertex contactPoint, Edge edge) public Edge getNextEdge(Vertex contactPoint) public Edge getPrevEdge(Vertex contactPoint)  void diskSetBetween(Vertex contactPoint, Edge prev, Edge next)  void diskRemove(Vertex contactPoint) public boolean connects(Vertex v0, Vertex v1) public boolean isAdjacentTo(Vertex vertex) public boolean isAdjacentTo(Face face) public boolean isAdjacentTo(Edge edge) public Vertex getCommonVertex(Edge other) public Vertex getOther(Vertex vertex) public void setOther(Vertex contactPoint, Vertex vertex) public void replace(Vertex oldVertex, Vertex newVertex) public ArrayList<Face> getFaces() public C getFaces(C collection) public Iterable<Face> faces() public ArrayList<Loop> getLoops() public C getLoops(C collection) public Iterable<Loop> loops() class C class C class EdgeLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void EdgeLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next() class C class C class EdgeLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void EdgeLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next()
Face.java: Imports: ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.LoopMapIterator, java.util.ArrayList, java.util.Collection, java.util.Iterator, java.util.List class Face public Loop loop  void Face() @Override
    protected void releaseElement() public Edge getAnyCommonEdge(Face face) public List<Edge> getCommonEdges(Face face) public int countCommonEdges(Face face) public int countVertices(Face face) public ArrayList<Vertex> getVertices() public C getVertices(C collection) public Iterable<Vertex> vertices() public ArrayList<Edge> getEdges() public C getEdges(C collection) public Iterable<Edge> edges() public ArrayList<Loop> getLoops() public C getLoops(C collection) public Iterable<Loop> loops() public Loop getLoop(Vertex from, Vertex to) class C class C class C class FaceLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void FaceLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next() class C class C class C class FaceLoopIterator private final Loop startLoop private Loop currentLoop private boolean first public void FaceLoopIterator(Loop loop) @Override
        public boolean hasNext() @Override
        public Loop next()
Loop.java: Imports: ch.alchemists.jbmesh.data.Element class Loop public Face face public Edge edge public Vertex vertex public Loop nextFaceLoop public Loop prevFaceLoop public Loop nextEdgeLoop public Loop prevEdgeLoop  void Loop() @Override
    protected void releaseElement() public void faceSetBetween(Loop prev, Loop next) public void faceRemove() public void radialSetBetween(Loop prev, Loop next) public void radialRemove()
BMesh.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.property.Vec3Attribute, com.jme3.math.Vector3f, java.util.ArrayList, java.util.Arrays, java.util.List, java.util.Objects class BMesh private final BMeshData<Vertex> vertexData private final BMeshData<Edge> edgeData private final BMeshData<Face> faceData private final BMeshData<Loop> loopData private final Vec3Attribute<Vertex> attrPosition private final transient ArrayList<Loop> tempLoops public void BMesh() public BMeshData<Vertex> vertices() public BMeshData<Edge> edges() public BMeshData<Face> faces() public BMeshData<Loop> loops() public void compactData() public void clear() public Vertex createVertex() public Vertex createVertex(float x, float y, float z) public Vertex createVertex(Vector3f location) public void removeVertex(Vertex vertex) public Edge createEdge(Vertex v0, Vertex v1) public void removeEdge(Edge edge) public Face createFace(List<Vertex> faceVertices) public Face createFace(Vertex... faceVertices) public void removeFace(Face face) public Vertex splitEdge(Edge edge) public boolean joinEdge(Edge edge, Vertex vertex) public Edge splitFace(Vertex vertex1, Vertex vertex2) public Edge splitFace(Face face, Vertex vertex1, Vertex vertex2) public void joinFace(Face face1, Face face2) public void joinFace(Face face1, Face face2, Edge commonEdge) public void invertFace(Face face)
Vertex.java: Imports: ch.alchemists.jbmesh.data.Element, java.util.Iterator class Vertex public Edge edge  void Vertex() @Override
    public void releaseElement() public void addEdge(Edge edge) public void removeEdge(Edge edge) public Edge getEdgeTo(Vertex other) public Face getCommonFace(Vertex other) public Iterable<Edge> edges() class VertexEdgeIterator private Edge current private boolean first public void VertexEdgeIterator() @Override
        public boolean hasNext() @Override
        public Edge next() class VertexEdgeIterator private Edge current private boolean first public void VertexEdgeIterator() @Override
        public boolean hasNext() @Override
        public Edge next()

package ch.alchemists.jbmesh.conversion
Export.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, com.jme3.util.BufferUtils, java.nio, java.util, java.util.logging.Logger class Export private static final Logger LOG protected final BMesh bmesh private final Mesh outputMesh private final Map<Type, AttributeMapping<E, ?>> attributes private final List<AttributeMapping<E, ?>> mappedAttributes private final List<Vertex> tempVertices private final List<Vertex> virtualVertices private float bufferLoadFactor protected void Export(BMesh bmesh, Mode mode) protected abstract void applyIndexBuffer(Mesh mesh) protected abstract void getVertexNeighborhood(Vertex vertex, List<E> dest) protected abstract void setVertexReference(Vertex contactPoint, E element, Vertex ref) protected abstract Vertex getVertexReference(Vertex contactPoint, E element) public final Mesh getMesh() public void setBufferLoadFactor(float loadFactor) public void useVertexAttribute(BMeshAttribute<Vertex, ?> vertexAttribute) public void useVertexAttribute(String attributeName) public void useVertexAttribute(Type type, String attributeName) public void useVertexAttribute(Type type, BMeshAttribute<Vertex, ?> vertexAttribute) public void mapAttribute(BMeshAttribute<E, TArray> src, String vertexAttributeName) public void mapAttribute(Type type, BMeshAttribute<E, TArray> src) @SuppressWarnings("unchecked")
    public void mapAttribute(Type type, BMeshAttribute<E, TArray> src, String vertexAttributeName) public void mapAttribute(BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) public void mapAttribute(Type type, BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) public void clearAttributes() public Mesh update() private void mapElementsToVertices() private void duplicateVertices() private Vertex tryVirtualize(Vertex vertex, List<E> neighbors, E element, int i) private boolean equalAttributes(E a, E b) private void copyAttributes(E src, Vertex dest) private void applyVertexBuffer(AttributeMapping<E, ?> attribute) @SuppressWarnings("unchecked")
    private void applyVertexBuffer(AttributeMapping<E, ?> attribute, Format format, CreateBufferFunctor<B> createBuffer, PopulateBufferFunctor<B, TArray> populateBuffer) class E class AttributeMapping private final Type type private final Class<?> arrayType private final BMeshAttribute<E, TArray> src private final BMeshAttribute<Vertex, TArray> dest public void AttributeMapping(Type type, BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) class E class TArray class E class TArray class TArray class TArray class TArray class TArray class TArray class TArray class B interface CreateBufferFunctor  B apply(int size) class B class B interface PopulateBufferFunctor  void apply(B buffer, TArray array, int length) class B class TArray class B class TArray class E class AttributeMapping private final Type type private final Class<?> arrayType private final BMeshAttribute<E, TArray> src private final BMeshAttribute<Vertex, TArray> dest public void AttributeMapping(Type type, BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) class E class TArray class E class TArray class TArray class TArray class TArray class TArray class TArray class TArray class B interface CreateBufferFunctor  B apply(int size) class B class B interface PopulateBufferFunctor  void apply(B buffer, TArray array, int length) class B class TArray class B class TArray
Import.java: Imports: ch.alchemists.jbmesh.lookup, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh class Import private static final float DEFAULT_EPSILON public static BMesh convert(Mesh mesh) public static BMesh convert(Mesh mesh, float epsilon) public static BMesh convertExact(Mesh mesh) private static BMesh convert(Mesh inputMesh, BMesh bmesh, VertexDeduplication dedup) public static BMesh importKeep(Mesh inputMesh)
Indices.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.data.property.IntTupleAttribute, ch.alchemists.jbmesh.data.property.ShortTupleAttribute, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, com.jme3.util.BufferUtils, java.nio.Buffer, java.nio.IntBuffer, java.nio.ShortBuffer class Indices private final BMeshData<E> meshData private VertexBuffer indexBuffer private Usage bufferUsage private final IntTupleAttribute<E> intIndices private IntBuffer intBuffer private final ShortTupleAttribute<E> shortIndices private ShortBuffer shortBuffer private boolean useInt private int shortHysteresis private float bufferLoadFactor @SuppressWarnings("unchecked")
    public void Indices(BMeshData<E> meshData, int indicesPerElement) public VertexBuffer getIndexBuffer() public void setBufferUsage(Usage usage) public void setShortHysteresis(int shortHysteresis) public void setBufferLoadFactor(float loadFactor) public void prepare(int maxVertexIndex) public void setIndices(E element, int... indices) public void updateIndices(IndexApplicator<E> indexApplicator) private void updateIndicesInt(IndexApplicator<E> indexApplicator) private void updateIndicesShort(IndexApplicator<E> indexApplicator) public void applyIndexBuffer(Mesh mesh) private void applyBufferInt(Mesh mesh) private void applyBufferShort(Mesh mesh) private void applyBuffer(Mesh mesh, Buffer buffer, Format format) private boolean needsResize(Buffer buffer, int dataSize) class E interface IndexApplicator  void applyIndices(E element, int[] indices) class E class E class E interface IndexApplicator  void applyIndices(E element, int[] indices) class E class E
LineExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ObjectTupleAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.List class LineExport private final ObjectTupleAttribute<Edge, Vertex> attrEdgeVertex private final Indices<Edge> indices public void LineExport(BMesh bmesh) public static Mesh apply(BMesh bmesh) @Override
    protected void applyIndexBuffer(Mesh mesh) @Override
    protected void getVertexNeighborhood(Vertex vertex, List<Edge> dest) @Override
    protected void setVertexReference(Vertex contactPoint, Edge element, Vertex ref) @Override
    protected Vertex getVertexReference(Vertex contactPoint, Edge element)
DirectImport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ObjectAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.ExactHashDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.ArrayList, java.util.List, java.util.logging.Logger class DirectImport private static final Logger LOG private final Mesh inputMesh private final List<AttributeMapping> mappedAttributes public void DirectImport(Mesh inputMesh) public static BMesh importTriangles(Mesh mesh) public BMesh importTriangles() public BMesh importTriangles(VertexDeduplicationFactory dedupFactory) private Vertex[] createVertices(BMesh bmesh, TriangleExtractor triangleExtractor, VertexDeduplication dedup) private void createVertexAttributes(BMesh bmesh, int numVertices) private Vec3Attribute<Vertex> replacePositionData(BMesh bmesh, int arrayLength, float[] data) private void copyAttributesToLoops(BMesh bmesh, ObjectAttribute<Loop, Vertex> attrLoopVertex) interface VertexDeduplicationFactory  VertexDeduplication createVertexDeduplication(BMesh bmesh) class AttributeMapping public final BMeshAttribute<Vertex, ?> vertexAttribute public final BMeshAttribute<Loop, ?> loopAttribute public void AttributeMapping(BMeshAttribute<Vertex, ?> vertexAttribute, BMeshAttribute<Loop, ?> loopAttribute) interface VertexDeduplicationFactory  VertexDeduplication createVertexDeduplication(BMesh bmesh) class AttributeMapping public final BMeshAttribute<Vertex, ?> vertexAttribute public final BMeshAttribute<Loop, ?> loopAttribute public void AttributeMapping(BMeshAttribute<Vertex, ?> vertexAttribute, BMeshAttribute<Loop, ?> loopAttribute)
BMeshJmeExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.Map class BMeshJmeExport public static Mesh exportTriangles(BMesh bmesh) public static Mesh exportLines(BMesh bmesh) @SuppressWarnings("unchecked")
    public static void setupExport(Export<E> export, BMesh bmesh, BMeshData<E> meshData) class E class E
TriangleExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ObjectAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.List class TriangleExport private final ObjectAttribute<Loop, Vertex> attrLoopVertex private final TriangleIndices triangleIndices public void TriangleExport(BMesh bmesh) public static Mesh apply(BMesh bmesh) @Override
    protected void applyIndexBuffer(Mesh mesh) @Override
    protected void getVertexNeighborhood(Vertex vertex, List<Loop> dest) @Override
    protected void setVertexReference(Vertex contactPoint, Loop element, Vertex ref) @Override
    protected Vertex getVertexReference(Vertex contactPoint, Loop element)
DebugMeshExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.operator.sweeptriang.SweepTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.ArrayList, java.util.Arrays class DebugMeshExport private static final float INNER_SCALE private static final Vector3f COLOR_INNER private static final Vector3f COLOR_SRC private static final Vector3f COLOR_GREEN private static final Vector3f COLOR_GREEN_FIRSTLOOP private static final Vector3f COLOR_RED private static final Vector3f COLOR_RED_FIRSTLOOP private static final Vector3f COLOR_SELECTED private static final Vector3f[] COLOR_INNER_ARR private final ArrayList<Float> vertices private final ArrayList<Float> normals private final ArrayList<Float> colors private final ArrayList<Integer> indices public void DebugMeshExport() public void clear() private int addVertex(Vector3f v) private void addNormal(Vector3f n) private void addNormal(Vector3f n, int count) private void addColor(Vector3f c) private void addColor(Vector3f c, int count) public Mesh createMesh() public void apply(BMesh bmesh)
TriangleIndices.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.data.property.ObjectAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.sweeptriang.SweepTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh, java.util.ArrayList, java.util.logging.Logger class TriangleIndices private static final Logger LOG private final BMesh bmesh private final SweepTriangulation triangulation private final ObjectAttribute<Loop, Vertex> attrLoopVertex private final BMeshData<Triangle> triangleData private final Indices<Triangle> indices public void TriangleIndices(BMesh bmesh, ObjectAttribute<Loop, Vertex> attrLoopVertex) public void triangulateFaces() private void addTriangle(ArrayList<Loop> loops, int i1, int i2, int i3) private void triangulateQuad(Vec3Attribute<Vertex> attrPosition, ArrayList<Loop> loops) private void triangulatePolygon(Vec3Attribute<Vertex> attrPosition, ArrayList<Loop> loops) public void applyIndexBuffer(Mesh mesh) class Triangle public Loop l1 public Loop l2 public Loop l3 @Override
        protected void releaseElement() class Triangle public Loop l1 public Loop l2 public Loop l3 @Override
        protected void releaseElement()
TriangleExtractor.java: Imports: com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.nio.FloatBuffer, java.nio.IntBuffer, java.nio.ShortBuffer class TriangleExtractor private float[] positionBuffer private int[] indexBuffer private Mode meshMode public void TriangleExtractor(Mesh mesh) public final void setMesh(Mesh mesh) public void process(TriangleIndexVisitor visitor) private void processTriangles(TriangleIndexVisitor visitor) private void processTriangleStrip(TriangleIndexVisitor visitor) private void processTriangleFan(TriangleIndexVisitor visitor) public int getIndex(int index) public int getNumIndices() public int getNumVertices() public void getVertex(int index, Vector3f store) public float[] getPositionArray() public int[] getIndexArray() interface TriangleIndexVisitor  void visitTriangleIndices(int i0, int i1, int i2) class TriangleLocationVisitor private final Vector3f p0 private final Vector3f p1 private final Vector3f p2 @Override
        public final void visitTriangleIndices(int i0, int i1, int i2) public abstract void visitTriangle(Vector3f p0, Vector3f p1, Vector3f p2) interface TriangleIndexVisitor  void visitTriangleIndices(int i0, int i1, int i2) class TriangleLocationVisitor private final Vector3f p0 private final Vector3f p1 private final Vector3f p2 @Override
        public final void visitTriangleIndices(int i0, int i1, int i2) public abstract void visitTriangle(Vector3f p0, Vector3f p1, Vector3f p2)
VertexBufferUtils.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.data.property, com.jme3.scene.VertexBuffer, com.jme3.util.BufferUtils, java.nio, java.util.Collections, java.util.EnumMap, java.util.HashMap, java.util.Map class VertexBufferUtils static final Map<String, Type> EXPORT_ATTRIBUTE_MAP static final Map<Type, String> IMPORT_ATTRIBUTE_MAP public static Type getVertexBufferType(String bmeshAttributeName) public static String getBMeshAttributeName(Type vertexBufferType) public static BMeshAttribute<E, ?> createBMeshAttribute(VertexBuffer buffer, Class<E> elementType) public static BMeshAttribute<E, ?> createBMeshAttribute(Type bufferType, int components, Class<E> elementType) private static BMeshAttribute<E, float[]> createFloatAttribute(String name, int components) @SuppressWarnings("unchecked")
    public static void setData(BMeshData<E> bmeshData, VertexBuffer buffer, BMeshAttribute<E, TArray> attribute) public static Object getArray(VertexBuffer buffer) public static int[] getIntArray(IntBuffer buffer) public static int[] getIntArray(ShortBuffer buffer) public static short[] getShortArray(ShortBuffer buffer) public static short[] getShortArray(IntBuffer buffer) public static byte[] getByteArray(ByteBuffer buffer) public static float[] getFloatArray(FloatBuffer buffer) public static float[] getFloatArray(DoubleBuffer buffer) public static double[] getDoubleArray(DoubleBuffer buffer) public static double[] getDoubleArray(FloatBuffer buffer) public static DoubleBuffer createDoubleBuffer(int size) public static DoubleBuffer createDoubleBuffer(double... data) public static LongBuffer createLongBuffer(int size) public static LongBuffer createLongBuffer(long... data) class E class E class E class E class TArray class E class E class E class E class TArray
Export.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, com.jme3.util.BufferUtils, java.nio, java.util, java.util.logging.Logger class Export private static final Logger LOG protected final BMesh bmesh private final Mesh outputMesh private final Map<Type, AttributeMapping<E, ?>> attributes private final List<AttributeMapping<E, ?>> mappedAttributes private final List<Vertex> tempVertices private final List<Vertex> virtualVertices private float bufferLoadFactor protected void Export(BMesh bmesh, Mode mode) protected abstract void applyIndexBuffer(Mesh mesh) protected abstract void getVertexNeighborhood(Vertex vertex, List<E> dest) protected abstract void setVertexReference(Vertex contactPoint, E element, Vertex ref) protected abstract Vertex getVertexReference(Vertex contactPoint, E element) public final Mesh getMesh() public void setBufferLoadFactor(float loadFactor) public void useVertexAttribute(BMeshAttribute<Vertex, ?> vertexAttribute) public void useVertexAttribute(String attributeName) public void useVertexAttribute(Type type, String attributeName) public void useVertexAttribute(Type type, BMeshAttribute<Vertex, ?> vertexAttribute) public void mapAttribute(BMeshAttribute<E, TArray> src, String vertexAttributeName) public void mapAttribute(Type type, BMeshAttribute<E, TArray> src) @SuppressWarnings("unchecked")
    public void mapAttribute(Type type, BMeshAttribute<E, TArray> src, String vertexAttributeName) public void mapAttribute(BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) public void mapAttribute(Type type, BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) public void clearAttributes() public Mesh update() private void mapElementsToVertices() private void duplicateVertices() private Vertex tryVirtualize(Vertex vertex, List<E> neighbors, E element, int i) private boolean equalAttributes(E a, E b) private void copyAttributes(E src, Vertex dest) private void applyVertexBuffer(AttributeMapping<E, ?> attribute) @SuppressWarnings("unchecked")
    private void applyVertexBuffer(AttributeMapping<E, ?> attribute, Format format, CreateBufferFunctor<B> createBuffer, PopulateBufferFunctor<B, TArray> populateBuffer) class E class AttributeMapping private final Type type private final Class<?> arrayType private final BMeshAttribute<E, TArray> src private final BMeshAttribute<Vertex, TArray> dest public void AttributeMapping(Type type, BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) class E class TArray class E class TArray class TArray class TArray class TArray class TArray class TArray class TArray class B interface CreateBufferFunctor  B apply(int size) class B class B interface PopulateBufferFunctor  void apply(B buffer, TArray array, int length) class B class TArray class B class TArray class E class AttributeMapping private final Type type private final Class<?> arrayType private final BMeshAttribute<E, TArray> src private final BMeshAttribute<Vertex, TArray> dest public void AttributeMapping(Type type, BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) class E class TArray class E class TArray class TArray class TArray class TArray class TArray class TArray class TArray class B interface CreateBufferFunctor  B apply(int size) class B class B interface PopulateBufferFunctor  void apply(B buffer, TArray array, int length) class B class TArray class B class TArray
Import.java: Imports: ch.alchemists.jbmesh.lookup, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh class Import private static final float DEFAULT_EPSILON public static BMesh convert(Mesh mesh) public static BMesh convert(Mesh mesh, float epsilon) public static BMesh convertExact(Mesh mesh) private static BMesh convert(Mesh inputMesh, BMesh bmesh, VertexDeduplication dedup) public static BMesh importKeep(Mesh inputMesh)
Indices.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.data.property.IntTupleAttribute, ch.alchemists.jbmesh.data.property.ShortTupleAttribute, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, com.jme3.util.BufferUtils, java.nio.Buffer, java.nio.IntBuffer, java.nio.ShortBuffer class Indices private final BMeshData<E> meshData private VertexBuffer indexBuffer private Usage bufferUsage private final IntTupleAttribute<E> intIndices private IntBuffer intBuffer private final ShortTupleAttribute<E> shortIndices private ShortBuffer shortBuffer private boolean useInt private int shortHysteresis private float bufferLoadFactor @SuppressWarnings("unchecked")
    public void Indices(BMeshData<E> meshData, int indicesPerElement) public VertexBuffer getIndexBuffer() public void setBufferUsage(Usage usage) public void setShortHysteresis(int shortHysteresis) public void setBufferLoadFactor(float loadFactor) public void prepare(int maxVertexIndex) public void setIndices(E element, int... indices) public void updateIndices(IndexApplicator<E> indexApplicator) private void updateIndicesInt(IndexApplicator<E> indexApplicator) private void updateIndicesShort(IndexApplicator<E> indexApplicator) public void applyIndexBuffer(Mesh mesh) private void applyBufferInt(Mesh mesh) private void applyBufferShort(Mesh mesh) private void applyBuffer(Mesh mesh, Buffer buffer, Format format) private boolean needsResize(Buffer buffer, int dataSize) class E interface IndexApplicator  void applyIndices(E element, int[] indices) class E class E class E interface IndexApplicator  void applyIndices(E element, int[] indices) class E class E
LineExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ObjectTupleAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.List class LineExport private final ObjectTupleAttribute<Edge, Vertex> attrEdgeVertex private final Indices<Edge> indices public void LineExport(BMesh bmesh) public static Mesh apply(BMesh bmesh) @Override
    protected void applyIndexBuffer(Mesh mesh) @Override
    protected void getVertexNeighborhood(Vertex vertex, List<Edge> dest) @Override
    protected void setVertexReference(Vertex contactPoint, Edge element, Vertex ref) @Override
    protected Vertex getVertexReference(Vertex contactPoint, Edge element)
DirectImport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ObjectAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.ExactHashDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.ArrayList, java.util.List, java.util.logging.Logger class DirectImport private static final Logger LOG private final Mesh inputMesh private final List<AttributeMapping> mappedAttributes public void DirectImport(Mesh inputMesh) public static BMesh importTriangles(Mesh mesh) public BMesh importTriangles() public BMesh importTriangles(VertexDeduplicationFactory dedupFactory) private Vertex[] createVertices(BMesh bmesh, TriangleExtractor triangleExtractor, VertexDeduplication dedup) private void createVertexAttributes(BMesh bmesh, int numVertices) private Vec3Attribute<Vertex> replacePositionData(BMesh bmesh, int arrayLength, float[] data) private void copyAttributesToLoops(BMesh bmesh, ObjectAttribute<Loop, Vertex> attrLoopVertex) interface VertexDeduplicationFactory  VertexDeduplication createVertexDeduplication(BMesh bmesh) class AttributeMapping public final BMeshAttribute<Vertex, ?> vertexAttribute public final BMeshAttribute<Loop, ?> loopAttribute public void AttributeMapping(BMeshAttribute<Vertex, ?> vertexAttribute, BMeshAttribute<Loop, ?> loopAttribute) interface VertexDeduplicationFactory  VertexDeduplication createVertexDeduplication(BMesh bmesh) class AttributeMapping public final BMeshAttribute<Vertex, ?> vertexAttribute public final BMeshAttribute<Loop, ?> loopAttribute public void AttributeMapping(BMeshAttribute<Vertex, ?> vertexAttribute, BMeshAttribute<Loop, ?> loopAttribute)
BMeshJmeExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.Map class BMeshJmeExport public static Mesh exportTriangles(BMesh bmesh) public static Mesh exportLines(BMesh bmesh) @SuppressWarnings("unchecked")
    public static void setupExport(Export<E> export, BMesh bmesh, BMeshData<E> meshData) class E class E
TriangleExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ObjectAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.List class TriangleExport private final ObjectAttribute<Loop, Vertex> attrLoopVertex private final TriangleIndices triangleIndices public void TriangleExport(BMesh bmesh) public static Mesh apply(BMesh bmesh) @Override
    protected void applyIndexBuffer(Mesh mesh) @Override
    protected void getVertexNeighborhood(Vertex vertex, List<Loop> dest) @Override
    protected void setVertexReference(Vertex contactPoint, Loop element, Vertex ref) @Override
    protected Vertex getVertexReference(Vertex contactPoint, Loop element)
DebugMeshExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.operator.sweeptriang.SweepTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.ArrayList, java.util.Arrays class DebugMeshExport private static final float INNER_SCALE private static final Vector3f COLOR_INNER private static final Vector3f COLOR_SRC private static final Vector3f COLOR_GREEN private static final Vector3f COLOR_GREEN_FIRSTLOOP private static final Vector3f COLOR_RED private static final Vector3f COLOR_RED_FIRSTLOOP private static final Vector3f COLOR_SELECTED private static final Vector3f[] COLOR_INNER_ARR private final ArrayList<Float> vertices private final ArrayList<Float> normals private final ArrayList<Float> colors private final ArrayList<Integer> indices public void DebugMeshExport() public void clear() private int addVertex(Vector3f v) private void addNormal(Vector3f n) private void addNormal(Vector3f n, int count) private void addColor(Vector3f c) private void addColor(Vector3f c, int count) public Mesh createMesh() public void apply(BMesh bmesh)
TriangleIndices.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.data.property.ObjectAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.sweeptriang.SweepTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh, java.util.ArrayList, java.util.logging.Logger class TriangleIndices private static final Logger LOG private final BMesh bmesh private final SweepTriangulation triangulation private final ObjectAttribute<Loop, Vertex> attrLoopVertex private final BMeshData<Triangle> triangleData private final Indices<Triangle> indices public void TriangleIndices(BMesh bmesh, ObjectAttribute<Loop, Vertex> attrLoopVertex) public void triangulateFaces() private void addTriangle(ArrayList<Loop> loops, int i1, int i2, int i3) private void triangulateQuad(Vec3Attribute<Vertex> attrPosition, ArrayList<Loop> loops) private void triangulatePolygon(Vec3Attribute<Vertex> attrPosition, ArrayList<Loop> loops) public void applyIndexBuffer(Mesh mesh) class Triangle public Loop l1 public Loop l2 public Loop l3 @Override
        protected void releaseElement() class Triangle public Loop l1 public Loop l2 public Loop l3 @Override
        protected void releaseElement()
TriangleExtractor.java: Imports: com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.nio.FloatBuffer, java.nio.IntBuffer, java.nio.ShortBuffer class TriangleExtractor private float[] positionBuffer private int[] indexBuffer private Mode meshMode public void TriangleExtractor(Mesh mesh) public final void setMesh(Mesh mesh) public void process(TriangleIndexVisitor visitor) private void processTriangles(TriangleIndexVisitor visitor) private void processTriangleStrip(TriangleIndexVisitor visitor) private void processTriangleFan(TriangleIndexVisitor visitor) public int getIndex(int index) public int getNumIndices() public int getNumVertices() public void getVertex(int index, Vector3f store) public float[] getPositionArray() public int[] getIndexArray() interface TriangleIndexVisitor  void visitTriangleIndices(int i0, int i1, int i2) class TriangleLocationVisitor private final Vector3f p0 private final Vector3f p1 private final Vector3f p2 @Override
        public final void visitTriangleIndices(int i0, int i1, int i2) public abstract void visitTriangle(Vector3f p0, Vector3f p1, Vector3f p2) interface TriangleIndexVisitor  void visitTriangleIndices(int i0, int i1, int i2) class TriangleLocationVisitor private final Vector3f p0 private final Vector3f p1 private final Vector3f p2 @Override
        public final void visitTriangleIndices(int i0, int i1, int i2) public abstract void visitTriangle(Vector3f p0, Vector3f p1, Vector3f p2)
VertexBufferUtils.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.data.property, com.jme3.scene.VertexBuffer, com.jme3.util.BufferUtils, java.nio, java.util.Collections, java.util.EnumMap, java.util.HashMap, java.util.Map class VertexBufferUtils static final Map<String, Type> EXPORT_ATTRIBUTE_MAP static final Map<Type, String> IMPORT_ATTRIBUTE_MAP public static Type getVertexBufferType(String bmeshAttributeName) public static String getBMeshAttributeName(Type vertexBufferType) public static BMeshAttribute<E, ?> createBMeshAttribute(VertexBuffer buffer, Class<E> elementType) public static BMeshAttribute<E, ?> createBMeshAttribute(Type bufferType, int components, Class<E> elementType) private static BMeshAttribute<E, float[]> createFloatAttribute(String name, int components) @SuppressWarnings("unchecked")
    public static void setData(BMeshData<E> bmeshData, VertexBuffer buffer, BMeshAttribute<E, TArray> attribute) public static Object getArray(VertexBuffer buffer) public static int[] getIntArray(IntBuffer buffer) public static int[] getIntArray(ShortBuffer buffer) public static short[] getShortArray(ShortBuffer buffer) public static short[] getShortArray(IntBuffer buffer) public static byte[] getByteArray(ByteBuffer buffer) public static float[] getFloatArray(FloatBuffer buffer) public static float[] getFloatArray(DoubleBuffer buffer) public static double[] getDoubleArray(DoubleBuffer buffer) public static double[] getDoubleArray(FloatBuffer buffer) public static DoubleBuffer createDoubleBuffer(int size) public static DoubleBuffer createDoubleBuffer(double... data) public static LongBuffer createLongBuffer(int size) public static LongBuffer createLongBuffer(long... data) class E class E class E class E class TArray class E class E class E class E class TArray
Export.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, com.jme3.util.BufferUtils, java.nio, java.util, java.util.logging.Logger class Export private static final Logger LOG protected final BMesh bmesh private final Mesh outputMesh private final Map<Type, AttributeMapping<E, ?>> attributes private final List<AttributeMapping<E, ?>> mappedAttributes private final List<Vertex> tempVertices private final List<Vertex> virtualVertices private float bufferLoadFactor protected void Export(BMesh bmesh, Mode mode) protected abstract void applyIndexBuffer(Mesh mesh) protected abstract void getVertexNeighborhood(Vertex vertex, List<E> dest) protected abstract void setVertexReference(Vertex contactPoint, E element, Vertex ref) protected abstract Vertex getVertexReference(Vertex contactPoint, E element) public final Mesh getMesh() public void setBufferLoadFactor(float loadFactor) public void useVertexAttribute(BMeshAttribute<Vertex, ?> vertexAttribute) public void useVertexAttribute(String attributeName) public void useVertexAttribute(Type type, String attributeName) public void useVertexAttribute(Type type, BMeshAttribute<Vertex, ?> vertexAttribute) public void mapAttribute(BMeshAttribute<E, TArray> src, String vertexAttributeName) public void mapAttribute(Type type, BMeshAttribute<E, TArray> src) @SuppressWarnings("unchecked")
    public void mapAttribute(Type type, BMeshAttribute<E, TArray> src, String vertexAttributeName) public void mapAttribute(BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) public void mapAttribute(Type type, BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) public void clearAttributes() public Mesh update() private void mapElementsToVertices() private void duplicateVertices() private Vertex tryVirtualize(Vertex vertex, List<E> neighbors, E element, int i) private boolean equalAttributes(E a, E b) private void copyAttributes(E src, Vertex dest) private void applyVertexBuffer(AttributeMapping<E, ?> attribute) @SuppressWarnings("unchecked")
    private void applyVertexBuffer(AttributeMapping<E, ?> attribute, Format format, CreateBufferFunctor<B> createBuffer, PopulateBufferFunctor<B, TArray> populateBuffer) class E class AttributeMapping private final Type type private final Class<?> arrayType private final BMeshAttribute<E, TArray> src private final BMeshAttribute<Vertex, TArray> dest public void AttributeMapping(Type type, BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) class E class TArray class E class TArray class TArray class TArray class TArray class TArray class TArray class TArray class B interface CreateBufferFunctor  B apply(int size) class B class B interface PopulateBufferFunctor  void apply(B buffer, TArray array, int length) class B class TArray class B class TArray class E class AttributeMapping private final Type type private final Class<?> arrayType private final BMeshAttribute<E, TArray> src private final BMeshAttribute<Vertex, TArray> dest public void AttributeMapping(Type type, BMeshAttribute<E, TArray> src, BMeshAttribute<Vertex, TArray> dest) class E class TArray class E class TArray class TArray class TArray class TArray class TArray class TArray class TArray class B interface CreateBufferFunctor  B apply(int size) class B class B interface PopulateBufferFunctor  void apply(B buffer, TArray array, int length) class B class TArray class B class TArray
Import.java: Imports: ch.alchemists.jbmesh.lookup, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh class Import private static final float DEFAULT_EPSILON public static BMesh convert(Mesh mesh) public static BMesh convert(Mesh mesh, float epsilon) public static BMesh convertExact(Mesh mesh) private static BMesh convert(Mesh inputMesh, BMesh bmesh, VertexDeduplication dedup) public static BMesh importKeep(Mesh inputMesh)
Indices.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.data.property.IntTupleAttribute, ch.alchemists.jbmesh.data.property.ShortTupleAttribute, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, com.jme3.util.BufferUtils, java.nio.Buffer, java.nio.IntBuffer, java.nio.ShortBuffer class Indices private final BMeshData<E> meshData private VertexBuffer indexBuffer private Usage bufferUsage private final IntTupleAttribute<E> intIndices private IntBuffer intBuffer private final ShortTupleAttribute<E> shortIndices private ShortBuffer shortBuffer private boolean useInt private int shortHysteresis private float bufferLoadFactor @SuppressWarnings("unchecked")
    public void Indices(BMeshData<E> meshData, int indicesPerElement) public VertexBuffer getIndexBuffer() public void setBufferUsage(Usage usage) public void setShortHysteresis(int shortHysteresis) public void setBufferLoadFactor(float loadFactor) public void prepare(int maxVertexIndex) public void setIndices(E element, int... indices) public void updateIndices(IndexApplicator<E> indexApplicator) private void updateIndicesInt(IndexApplicator<E> indexApplicator) private void updateIndicesShort(IndexApplicator<E> indexApplicator) public void applyIndexBuffer(Mesh mesh) private void applyBufferInt(Mesh mesh) private void applyBufferShort(Mesh mesh) private void applyBuffer(Mesh mesh, Buffer buffer, Format format) private boolean needsResize(Buffer buffer, int dataSize) class E interface IndexApplicator  void applyIndices(E element, int[] indices) class E class E class E interface IndexApplicator  void applyIndices(E element, int[] indices) class E class E
LineExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ObjectTupleAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.List class LineExport private final ObjectTupleAttribute<Edge, Vertex> attrEdgeVertex private final Indices<Edge> indices public void LineExport(BMesh bmesh) public static Mesh apply(BMesh bmesh) @Override
    protected void applyIndexBuffer(Mesh mesh) @Override
    protected void getVertexNeighborhood(Vertex vertex, List<Edge> dest) @Override
    protected void setVertexReference(Vertex contactPoint, Edge element, Vertex ref) @Override
    protected Vertex getVertexReference(Vertex contactPoint, Edge element)
DirectImport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ObjectAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.ExactHashDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.ArrayList, java.util.List, java.util.logging.Logger class DirectImport private static final Logger LOG private final Mesh inputMesh private final List<AttributeMapping> mappedAttributes public void DirectImport(Mesh inputMesh) public static BMesh importTriangles(Mesh mesh) public BMesh importTriangles() public BMesh importTriangles(VertexDeduplicationFactory dedupFactory) private Vertex[] createVertices(BMesh bmesh, TriangleExtractor triangleExtractor, VertexDeduplication dedup) private void createVertexAttributes(BMesh bmesh, int numVertices) private Vec3Attribute<Vertex> replacePositionData(BMesh bmesh, int arrayLength, float[] data) private void copyAttributesToLoops(BMesh bmesh, ObjectAttribute<Loop, Vertex> attrLoopVertex) interface VertexDeduplicationFactory  VertexDeduplication createVertexDeduplication(BMesh bmesh) class AttributeMapping public final BMeshAttribute<Vertex, ?> vertexAttribute public final BMeshAttribute<Loop, ?> loopAttribute public void AttributeMapping(BMeshAttribute<Vertex, ?> vertexAttribute, BMeshAttribute<Loop, ?> loopAttribute) interface VertexDeduplicationFactory  VertexDeduplication createVertexDeduplication(BMesh bmesh) class AttributeMapping public final BMeshAttribute<Vertex, ?> vertexAttribute public final BMeshAttribute<Loop, ?> loopAttribute public void AttributeMapping(BMeshAttribute<Vertex, ?> vertexAttribute, BMeshAttribute<Loop, ?> loopAttribute)
BMeshJmeExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.Map class BMeshJmeExport public static Mesh exportTriangles(BMesh bmesh) public static Mesh exportLines(BMesh bmesh) @SuppressWarnings("unchecked")
    public static void setupExport(Export<E> export, BMesh bmesh, BMeshData<E> meshData) class E class E
TriangleExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ObjectAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.List class TriangleExport private final ObjectAttribute<Loop, Vertex> attrLoopVertex private final TriangleIndices triangleIndices public void TriangleExport(BMesh bmesh) public static Mesh apply(BMesh bmesh) @Override
    protected void applyIndexBuffer(Mesh mesh) @Override
    protected void getVertexNeighborhood(Vertex vertex, List<Loop> dest) @Override
    protected void setVertexReference(Vertex contactPoint, Loop element, Vertex ref) @Override
    protected Vertex getVertexReference(Vertex contactPoint, Loop element)
DebugMeshExport.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.operator.sweeptriang.SweepTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.util.ArrayList, java.util.Arrays class DebugMeshExport private static final float INNER_SCALE private static final Vector3f COLOR_INNER private static final Vector3f COLOR_SRC private static final Vector3f COLOR_GREEN private static final Vector3f COLOR_GREEN_FIRSTLOOP private static final Vector3f COLOR_RED private static final Vector3f COLOR_RED_FIRSTLOOP private static final Vector3f COLOR_SELECTED private static final Vector3f[] COLOR_INNER_ARR private final ArrayList<Float> vertices private final ArrayList<Float> normals private final ArrayList<Float> colors private final ArrayList<Integer> indices public void DebugMeshExport() public void clear() private int addVertex(Vector3f v) private void addNormal(Vector3f n) private void addNormal(Vector3f n, int count) private void addColor(Vector3f c) private void addColor(Vector3f c, int count) public Mesh createMesh() public void apply(BMesh bmesh)
TriangleIndices.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.data.property.ObjectAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.sweeptriang.SweepTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, com.jme3.scene.Mesh, java.util.ArrayList, java.util.logging.Logger class TriangleIndices private static final Logger LOG private final BMesh bmesh private final SweepTriangulation triangulation private final ObjectAttribute<Loop, Vertex> attrLoopVertex private final BMeshData<Triangle> triangleData private final Indices<Triangle> indices public void TriangleIndices(BMesh bmesh, ObjectAttribute<Loop, Vertex> attrLoopVertex) public void triangulateFaces() private void addTriangle(ArrayList<Loop> loops, int i1, int i2, int i3) private void triangulateQuad(Vec3Attribute<Vertex> attrPosition, ArrayList<Loop> loops) private void triangulatePolygon(Vec3Attribute<Vertex> attrPosition, ArrayList<Loop> loops) public void applyIndexBuffer(Mesh mesh) class Triangle public Loop l1 public Loop l2 public Loop l3 @Override
        protected void releaseElement() class Triangle public Loop l1 public Loop l2 public Loop l3 @Override
        protected void releaseElement()
TriangleExtractor.java: Imports: com.jme3.math.Vector3f, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer, java.nio.FloatBuffer, java.nio.IntBuffer, java.nio.ShortBuffer class TriangleExtractor private float[] positionBuffer private int[] indexBuffer private Mode meshMode public void TriangleExtractor(Mesh mesh) public final void setMesh(Mesh mesh) public void process(TriangleIndexVisitor visitor) private void processTriangles(TriangleIndexVisitor visitor) private void processTriangleStrip(TriangleIndexVisitor visitor) private void processTriangleFan(TriangleIndexVisitor visitor) public int getIndex(int index) public int getNumIndices() public int getNumVertices() public void getVertex(int index, Vector3f store) public float[] getPositionArray() public int[] getIndexArray() interface TriangleIndexVisitor  void visitTriangleIndices(int i0, int i1, int i2) class TriangleLocationVisitor private final Vector3f p0 private final Vector3f p1 private final Vector3f p2 @Override
        public final void visitTriangleIndices(int i0, int i1, int i2) public abstract void visitTriangle(Vector3f p0, Vector3f p1, Vector3f p2) interface TriangleIndexVisitor  void visitTriangleIndices(int i0, int i1, int i2) class TriangleLocationVisitor private final Vector3f p0 private final Vector3f p1 private final Vector3f p2 @Override
        public final void visitTriangleIndices(int i0, int i1, int i2) public abstract void visitTriangle(Vector3f p0, Vector3f p1, Vector3f p2)
VertexBufferUtils.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.data.property, com.jme3.scene.VertexBuffer, com.jme3.util.BufferUtils, java.nio, java.util.Collections, java.util.EnumMap, java.util.HashMap, java.util.Map class VertexBufferUtils static final Map<String, Type> EXPORT_ATTRIBUTE_MAP static final Map<Type, String> IMPORT_ATTRIBUTE_MAP public static Type getVertexBufferType(String bmeshAttributeName) public static String getBMeshAttributeName(Type vertexBufferType) public static BMeshAttribute<E, ?> createBMeshAttribute(VertexBuffer buffer, Class<E> elementType) public static BMeshAttribute<E, ?> createBMeshAttribute(Type bufferType, int components, Class<E> elementType) private static BMeshAttribute<E, float[]> createFloatAttribute(String name, int components) @SuppressWarnings("unchecked")
    public static void setData(BMeshData<E> bmeshData, VertexBuffer buffer, BMeshAttribute<E, TArray> attribute) public static Object getArray(VertexBuffer buffer) public static int[] getIntArray(IntBuffer buffer) public static int[] getIntArray(ShortBuffer buffer) public static short[] getShortArray(ShortBuffer buffer) public static short[] getShortArray(IntBuffer buffer) public static byte[] getByteArray(ByteBuffer buffer) public static float[] getFloatArray(FloatBuffer buffer) public static float[] getFloatArray(DoubleBuffer buffer) public static double[] getDoubleArray(DoubleBuffer buffer) public static double[] getDoubleArray(FloatBuffer buffer) public static DoubleBuffer createDoubleBuffer(int size) public static DoubleBuffer createDoubleBuffer(double... data) public static LongBuffer createLongBuffer(int size) public static LongBuffer createLongBuffer(long... data) class E class E class E class E class TArray class E class E class E class E class TArray

package ch.alchemists.jbmesh
CodeExtractor.java: Imports: java.io.BufferedWriter, java.io.FileWriter, java.io.IOException, java.nio.file.Files, java.nio.file.Path, java.nio.file.Paths, java.time.LocalDateTime, java.time.format.DateTimeFormatter, java.util.stream.Collectors class CodeExtractor private static final String OUTPUT_DIR private static final String OUTPUT_FILE_PREFIX private static final String OUTPUT_FILE_EXTENSION private static final String COPYRIGHT_START private static final String COPYRIGHT_END public static void main(String[] args) private static void processFile(Path filePath, BufferedWriter writer)
TestUtil.java: Imports: ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.ArrayList class TestUtil public static final float EPSILON public static Loop[] getLoops(Face face) public static void assertFace(Face face, Vertex... vertices) public static void assertFloat(float expected, float actual) public static void assertVec3Similar(Vector3f expected, Vector3f actual) public static void assertVec3Similar(float xExpected, float yExpected, float zExpected, Vector3f actual)
CodeExtractor.java: Imports: java.io.BufferedWriter, java.io.FileWriter, java.io.IOException, java.nio.file.Files, java.nio.file.Path, java.nio.file.Paths, java.time.LocalDateTime, java.time.format.DateTimeFormatter, java.util.stream.Collectors class CodeExtractor private static final String OUTPUT_DIR private static final String OUTPUT_FILE_PREFIX private static final String OUTPUT_FILE_EXTENSION private static final String COPYRIGHT_START private static final String COPYRIGHT_END public static void main(String[] args) private static void processFile(Path filePath, BufferedWriter writer)
TestUtil.java: Imports: ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.ArrayList class TestUtil public static final float EPSILON public static Loop[] getLoops(Face face) public static void assertFace(Face face, Vertex... vertices) public static void assertFloat(float expected, float actual) public static void assertVec3Similar(Vector3f expected, Vector3f actual) public static void assertVec3Similar(float xExpected, float yExpected, float zExpected, Vector3f actual)
TestUtil.java: Imports: ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.util.ArrayList class TestUtil public static final float EPSILON public static Loop[] getLoops(Face face) public static void assertFace(Face face, Vertex... vertices) public static void assertFloat(float expected, float actual) public static void assertVec3Similar(Vector3f expected, Vector3f actual) public static void assertVec3Similar(float xExpected, float yExpected, float zExpected, Vector3f actual)
CodeExtractor.java: Imports: java.io.BufferedWriter, java.io.FileWriter, java.io.IOException, java.nio.file.Files, java.nio.file.Path, java.nio.file.Paths, java.time.LocalDateTime, java.time.format.DateTimeFormatter, java.util.stream.Collectors class CodeExtractor private static final String OUTPUT_DIR private static final String OUTPUT_FILE_PREFIX private static final String OUTPUT_FILE_EXTENSION private static final String COPYRIGHT_START private static final String COPYRIGHT_END public static void main(String[] args) private static void processFile(Path filePath, BufferedWriter writer)

package com.dbva
StraightSkeletonMain.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.skeleton.SkeletonVisualization, ch.alchemists.jbmesh.operator.skeleton.StraightSkeleton, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.io.FileWriter, java.io.IOException, java.util.List class StraightSkeletonMain public static void main(String[] args) private static Face createFootprint(BMesh bmesh) private static void writeSvgFile(BMesh footprintMesh, BMesh skeletonMesh, String filename)
StraightSkeletonMain.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.skeleton.SkeletonVisualization, ch.alchemists.jbmesh.operator.skeleton.StraightSkeleton, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.io.FileWriter, java.io.IOException, java.util.List class StraightSkeletonMain public static void main(String[] args) private static Face createFootprint(BMesh bmesh) private static void writeSvgFile(BMesh footprintMesh, BMesh skeletonMesh, String filename)
StraightSkeletonMain.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.skeleton.SkeletonVisualization, ch.alchemists.jbmesh.operator.skeleton.StraightSkeleton, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.Vector3f, java.io.FileWriter, java.io.IOException, java.util.List class StraightSkeletonMain public static void main(String[] args) private static Face createFootprint(BMesh bmesh) private static void writeSvgFile(BMesh footprintMesh, BMesh skeletonMesh, String filename)

