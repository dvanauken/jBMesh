Project Structure Summary:

package ch.alchemists.jbmesh.util
Gizmo.java: Imports: com.jme3.asset.AssetManager, com.jme3.font.BitmapFont, com.jme3.font.BitmapText, com.jme3.font.Rectangle, com.jme3.material.Material, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.Vector3f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.VertexBuffer, com.jme3.scene.control.BillboardControl class Gizmo private static final Mesh MESH private static final Rectangle TEXT_BOX private static final ColorRGBA TEXT_COLOR private final Geometry gizmo private final BitmapText namePlate public void Gizmo(AssetManager assetManager, String name, float scale) public void Gizmo(AssetManager assetManager, String name, Vector3f scale) public void setScale(float scale) public void setScale(Vector3f scale)
BasicShapes.java: Imports: ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.conversion.TriangleExport, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.FastMath, com.jme3.math.Vector2f, com.jme3.math.Vector3f, com.jme3.scene.Mesh class BasicShapes public static Face createDisc(BMesh bmesh, PlanarCoordinateSystem coordSys, int numSamples, float radius) public static Face createDiscXY(BMesh bmesh, Vector3f center, int numSamples, float radius) public static Face createQuad(BMesh bmesh, PlanarCoordinateSystem coordSys, float width, float height) public static Face createSquare(BMesh bmesh, PlanarCoordinateSystem coordSys, float sideLength) public static Mesh disc(int numSamples, float radius) public static Mesh circle(int numSamples, float radius)
DebugNormals.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.asset.AssetManager, com.jme3.material.Material, com.jme3.math.Vector3f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer class DebugNormals public static Geometry faceNormals(AssetManager assetManager, BMesh bmesh, float length) public static Geometry loopNormals(AssetManager assetManager, BMesh bmesh, float length) private static Geometry createGeometry(AssetManager assetManager, Mesh mesh, String name) private static Mesh createFaceNormals(BMesh bmesh, float length) private static Mesh createLoopNormals(BMesh bmesh, float length) private static void colorFromNormal(Vector3f normal, Vector3f destColor) private static int addToBuffer(float[] buf, int i, Vector3f vec)
Gizmo.java: Imports: com.jme3.asset.AssetManager, com.jme3.font.BitmapFont, com.jme3.font.BitmapText, com.jme3.font.Rectangle, com.jme3.material.Material, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.Vector3f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.VertexBuffer, com.jme3.scene.control.BillboardControl class Gizmo private static final Mesh MESH private static final Rectangle TEXT_BOX private static final ColorRGBA TEXT_COLOR private final Geometry gizmo private final BitmapText namePlate public void Gizmo(AssetManager assetManager, String name, float scale) public void Gizmo(AssetManager assetManager, String name, Vector3f scale) public void setScale(float scale) public void setScale(Vector3f scale)
BasicShapes.java: Imports: ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.conversion.TriangleExport, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.FastMath, com.jme3.math.Vector2f, com.jme3.math.Vector3f, com.jme3.scene.Mesh class BasicShapes public static Face createDisc(BMesh bmesh, PlanarCoordinateSystem coordSys, int numSamples, float radius) public static Face createDiscXY(BMesh bmesh, Vector3f center, int numSamples, float radius) public static Face createQuad(BMesh bmesh, PlanarCoordinateSystem coordSys, float width, float height) public static Face createSquare(BMesh bmesh, PlanarCoordinateSystem coordSys, float sideLength) public static Mesh disc(int numSamples, float radius) public static Mesh circle(int numSamples, float radius)
DebugNormals.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.asset.AssetManager, com.jme3.material.Material, com.jme3.math.Vector3f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer class DebugNormals public static Geometry faceNormals(AssetManager assetManager, BMesh bmesh, float length) public static Geometry loopNormals(AssetManager assetManager, BMesh bmesh, float length) private static Geometry createGeometry(AssetManager assetManager, Mesh mesh, String name) private static Mesh createFaceNormals(BMesh bmesh, float length) private static Mesh createLoopNormals(BMesh bmesh, float length) private static void colorFromNormal(Vector3f normal, Vector3f destColor) private static int addToBuffer(float[] buf, int i, Vector3f vec)
Gizmo.java: Imports: com.jme3.asset.AssetManager, com.jme3.font.BitmapFont, com.jme3.font.BitmapText, com.jme3.font.Rectangle, com.jme3.material.Material, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.Vector3f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.VertexBuffer, com.jme3.scene.control.BillboardControl class Gizmo private static final Mesh MESH private static final Rectangle TEXT_BOX private static final ColorRGBA TEXT_COLOR private final Geometry gizmo private final BitmapText namePlate public void Gizmo(AssetManager assetManager, String name, float scale) public void Gizmo(AssetManager assetManager, String name, Vector3f scale) public void setScale(float scale) public void setScale(Vector3f scale)
BasicShapes.java: Imports: ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.conversion.TriangleExport, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.math.FastMath, com.jme3.math.Vector2f, com.jme3.math.Vector3f, com.jme3.scene.Mesh class BasicShapes public static Face createDisc(BMesh bmesh, PlanarCoordinateSystem coordSys, int numSamples, float radius) public static Face createDiscXY(BMesh bmesh, Vector3f center, int numSamples, float radius) public static Face createQuad(BMesh bmesh, PlanarCoordinateSystem coordSys, float width, float height) public static Face createSquare(BMesh bmesh, PlanarCoordinateSystem coordSys, float sideLength) public static Mesh disc(int numSamples, float radius) public static Mesh circle(int numSamples, float radius)
DebugNormals.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, com.jme3.asset.AssetManager, com.jme3.material.Material, com.jme3.math.Vector3f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer class DebugNormals public static Geometry faceNormals(AssetManager assetManager, BMesh bmesh, float length) public static Geometry loopNormals(AssetManager assetManager, BMesh bmesh, float length) private static Geometry createGeometry(AssetManager assetManager, Mesh mesh, String name) private static Mesh createFaceNormals(BMesh bmesh, float length) private static Mesh createLoopNormals(BMesh bmesh, float length) private static void colorFromNormal(Vector3f normal, Vector3f destColor) private static int addToBuffer(float[] buf, int i, Vector3f vec)

package ch.alchemists.jbmesh.tools
Main.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.conversion.DebugMeshExport, ch.alchemists.jbmesh.conversion.DirectImport, ch.alchemists.jbmesh.operator.MeshOps, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.util.ColorUtil, ch.alchemists.jbmesh.util.Gizmo, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.asset.plugins.FileLocator, com.jme3.bounding.BoundingBox, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.FastMath, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.Spatial, com.jme3.scene.shape.Box, com.jme3.system.AppSettings class Main private final Node node private Spatial spatial private BMesh makeMesh() private void addMesh() @Override
    public void simpleInitApp() private Mesh loadModel() private Geometry createMesh(BMesh bmesh) private Geometry createDebugMesh(BMesh bmesh) private void initCamera(float camElevation, float distanceFactor) @Override
    public void simpleUpdate(float tpf) public static void main(String[] args)
TestMesh.java: Imports: ch.alchemists.jbmesh.conversion.Import, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.HashGridDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.operator.Inset, ch.alchemists.jbmesh.operator.ScaleFace, ch.alchemists.jbmesh.operator.Smooth, ch.alchemists.jbmesh.operator.SubdivideFace, ch.alchemists.jbmesh.operator.bool.Subtract, ch.alchemists.jbmesh.operator.meshgen.DistanceFunction, ch.alchemists.jbmesh.operator.meshgen.MarchingCube, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.Profiler, com.jme3.math.Vector3f, com.jme3.scene.shape.Sphere, java.util.List class TestMesh public static BMesh testSphere() public static BMesh crease() public static void spikes(BMesh bmesh) public static void hollow(BMesh bmesh) public static void subdiv(BMesh bmesh) public static DistanceFunction dfunc() public static void subtract(BMesh bmesh) public static BMesh marchingCubes(BMesh bmesh)
TriangulationEditor.java: Imports: ch.alchemists.jbmesh.operator.triangulation.SeidelTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.tools.polygoneditor.PolygonEditorState, ch.alchemists.jbmesh.util.DebugVisualState, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.input.KeyInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.math.Vector2f, com.jme3.scene.Node, com.jme3.system.AppSettings, com.simsilica.lemur.GuiGlobals, com.simsilica.lemur.style.BaseStyles, java.util.ArrayList, java.util.Map class TriangulationEditor private static final String STORAGE_PATH private static final String EXPORT_FILE private static final String ACT_TRIANGULATE private static final String ACT_BENCHMARK private static final String ACT_EXPORT private final PolygonEditorState polygonEditor private final DebugVisualState debugVisualState private final Node node private final PointListener pointListener private final ActionListener actionListener private void TriangulationEditor() @Override
    public void simpleInitApp() private void updateTriangulation() private void benchmark() private void exportFile() public static void main(String[] args) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap)
StraightSkeletonEditor.java: Imports: ch.alchemists.jbmesh.operator.skeleton.SkeletonVisualization, ch.alchemists.jbmesh.operator.skeleton.StraightSkeleton, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.tools.polygoneditor.PolygonEditorState, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.app.state.AppState, com.jme3.input.KeyInput, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.controls.MouseAxisTrigger, com.jme3.math.ColorRGBA, com.jme3.math.Vector2f, com.jme3.scene.Node, com.jme3.system.AppSettings, com.simsilica.lemur.GuiGlobals, com.simsilica.lemur.style.BaseStyles, java.util.ArrayList, java.util.Map class StraightSkeletonEditor private static final String STORAGE_PATH private static final String EXPORT_FILE private static final String ACT_INC_DISTANCE private static final String ACT_DEC_DISTANCE private static final String ACT_MOD_STEP private static final String ACT_RESET_DISTANCE private static final String ACT_MAX_DISTANCE private static final String ACT_BENCHMARK private static final String ACT_EXPORT private static final String ACT_TOGGLE_SKEL private static final String ACT_TOGGLE_BISECT private static final float SKEL_DISTANCE_STEP private static final float SKEL_DISTANCE_LEAP private static final float DEFAULT_DISTANCE private float skeletonDistance private boolean modStep private boolean showSkel private boolean showBisectors private final PolygonEditorState polygonEditor private final Node node private PointDrawType movingNodeType private final PointListener pointListener private final ActionListener actionListener private void StraightSkeletonEditor() @Override
    public void simpleInitApp() private void updateSkeletonVis() private void benchmark() private void exportFile() public static void main(String[] args) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap)
SweepTriangulationEditor.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.sweeptriang.SweepTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.tools.polygoneditor.PolygonEditorState, ch.alchemists.jbmesh.util.DebugVisual, ch.alchemists.jbmesh.util.DebugVisualState, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.app.state.AppState, com.jme3.input.KeyInput, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.controls.MouseAxisTrigger, com.jme3.math.Vector2f, com.jme3.math.Vector3f, com.jme3.scene.Node, com.jme3.system.AppSettings, com.simsilica.lemur.GuiGlobals, com.simsilica.lemur.style.BaseStyles, java.util.ArrayList, java.util.List, java.util.Map class SweepTriangulationEditor private static final String STORAGE_PATH private static final String EXPORT_FILE private static final String ACT_MORE_SWEEP private static final String ACT_LESS_SWEEP private static final String ACT_RESET_SWEEP private static final String ACT_TRIANGULATE private static final String ACT_BENCHMARK private static final String ACT_EXPORT private final PolygonEditorState polygonEditor private final DebugVisualState debugVisualState private Node sweepLine private static final float SWEEP_STEP private float sweepLimit private final PointListener pointListener private final ActionListener actionListener private void SweepTriangulationEditor() @Override
    public void simpleInitApp() private void updateTriangulation() private void benchmark() private void exportFile() public static void main(String[] args) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap)
Main.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.conversion.DebugMeshExport, ch.alchemists.jbmesh.conversion.DirectImport, ch.alchemists.jbmesh.operator.MeshOps, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.util.ColorUtil, ch.alchemists.jbmesh.util.Gizmo, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.asset.plugins.FileLocator, com.jme3.bounding.BoundingBox, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.FastMath, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.Spatial, com.jme3.scene.shape.Box, com.jme3.system.AppSettings class Main private final Node node private Spatial spatial private BMesh makeMesh() private void addMesh() @Override
    public void simpleInitApp() private Mesh loadModel() private Geometry createMesh(BMesh bmesh) private Geometry createDebugMesh(BMesh bmesh) private void initCamera(float camElevation, float distanceFactor) @Override
    public void simpleUpdate(float tpf) public static void main(String[] args)
TestMesh.java: Imports: ch.alchemists.jbmesh.conversion.Import, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.HashGridDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.operator.Inset, ch.alchemists.jbmesh.operator.ScaleFace, ch.alchemists.jbmesh.operator.Smooth, ch.alchemists.jbmesh.operator.SubdivideFace, ch.alchemists.jbmesh.operator.bool.Subtract, ch.alchemists.jbmesh.operator.meshgen.DistanceFunction, ch.alchemists.jbmesh.operator.meshgen.MarchingCube, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.Profiler, com.jme3.math.Vector3f, com.jme3.scene.shape.Sphere, java.util.List class TestMesh public static BMesh testSphere() public static BMesh crease() public static void spikes(BMesh bmesh) public static void hollow(BMesh bmesh) public static void subdiv(BMesh bmesh) public static DistanceFunction dfunc() public static void subtract(BMesh bmesh) public static BMesh marchingCubes(BMesh bmesh)
TriangulationEditor.java: Imports: ch.alchemists.jbmesh.operator.triangulation.SeidelTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.tools.polygoneditor.PolygonEditorState, ch.alchemists.jbmesh.util.DebugVisualState, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.input.KeyInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.math.Vector2f, com.jme3.scene.Node, com.jme3.system.AppSettings, com.simsilica.lemur.GuiGlobals, com.simsilica.lemur.style.BaseStyles, java.util.ArrayList, java.util.Map class TriangulationEditor private static final String STORAGE_PATH private static final String EXPORT_FILE private static final String ACT_TRIANGULATE private static final String ACT_BENCHMARK private static final String ACT_EXPORT private final PolygonEditorState polygonEditor private final DebugVisualState debugVisualState private final Node node private final PointListener pointListener private final ActionListener actionListener private void TriangulationEditor() @Override
    public void simpleInitApp() private void updateTriangulation() private void benchmark() private void exportFile() public static void main(String[] args) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap)
StraightSkeletonEditor.java: Imports: ch.alchemists.jbmesh.operator.skeleton.SkeletonVisualization, ch.alchemists.jbmesh.operator.skeleton.StraightSkeleton, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.tools.polygoneditor.PolygonEditorState, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.app.state.AppState, com.jme3.input.KeyInput, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.controls.MouseAxisTrigger, com.jme3.math.ColorRGBA, com.jme3.math.Vector2f, com.jme3.scene.Node, com.jme3.system.AppSettings, com.simsilica.lemur.GuiGlobals, com.simsilica.lemur.style.BaseStyles, java.util.ArrayList, java.util.Map class StraightSkeletonEditor private static final String STORAGE_PATH private static final String EXPORT_FILE private static final String ACT_INC_DISTANCE private static final String ACT_DEC_DISTANCE private static final String ACT_MOD_STEP private static final String ACT_RESET_DISTANCE private static final String ACT_MAX_DISTANCE private static final String ACT_BENCHMARK private static final String ACT_EXPORT private static final String ACT_TOGGLE_SKEL private static final String ACT_TOGGLE_BISECT private static final float SKEL_DISTANCE_STEP private static final float SKEL_DISTANCE_LEAP private static final float DEFAULT_DISTANCE private float skeletonDistance private boolean modStep private boolean showSkel private boolean showBisectors private final PolygonEditorState polygonEditor private final Node node private PointDrawType movingNodeType private final PointListener pointListener private final ActionListener actionListener private void StraightSkeletonEditor() @Override
    public void simpleInitApp() private void updateSkeletonVis() private void benchmark() private void exportFile() public static void main(String[] args) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap)
SweepTriangulationEditor.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.sweeptriang.SweepTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.tools.polygoneditor.PolygonEditorState, ch.alchemists.jbmesh.util.DebugVisual, ch.alchemists.jbmesh.util.DebugVisualState, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.app.state.AppState, com.jme3.input.KeyInput, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.controls.MouseAxisTrigger, com.jme3.math.Vector2f, com.jme3.math.Vector3f, com.jme3.scene.Node, com.jme3.system.AppSettings, com.simsilica.lemur.GuiGlobals, com.simsilica.lemur.style.BaseStyles, java.util.ArrayList, java.util.List, java.util.Map class SweepTriangulationEditor private static final String STORAGE_PATH private static final String EXPORT_FILE private static final String ACT_MORE_SWEEP private static final String ACT_LESS_SWEEP private static final String ACT_RESET_SWEEP private static final String ACT_TRIANGULATE private static final String ACT_BENCHMARK private static final String ACT_EXPORT private final PolygonEditorState polygonEditor private final DebugVisualState debugVisualState private Node sweepLine private static final float SWEEP_STEP private float sweepLimit private final PointListener pointListener private final ActionListener actionListener private void SweepTriangulationEditor() @Override
    public void simpleInitApp() private void updateTriangulation() private void benchmark() private void exportFile() public static void main(String[] args) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap)
Main.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.conversion.DebugMeshExport, ch.alchemists.jbmesh.conversion.DirectImport, ch.alchemists.jbmesh.operator.MeshOps, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.util.ColorUtil, ch.alchemists.jbmesh.util.Gizmo, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.asset.plugins.FileLocator, com.jme3.bounding.BoundingBox, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.FastMath, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.Spatial, com.jme3.scene.shape.Box, com.jme3.system.AppSettings class Main private final Node node private Spatial spatial private BMesh makeMesh() private void addMesh() @Override
    public void simpleInitApp() private Mesh loadModel() private Geometry createMesh(BMesh bmesh) private Geometry createDebugMesh(BMesh bmesh) private void initCamera(float camElevation, float distanceFactor) @Override
    public void simpleUpdate(float tpf) public static void main(String[] args)
TestMesh.java: Imports: ch.alchemists.jbmesh.conversion.Import, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.lookup.HashGridDeduplication, ch.alchemists.jbmesh.lookup.VertexDeduplication, ch.alchemists.jbmesh.operator.Inset, ch.alchemists.jbmesh.operator.ScaleFace, ch.alchemists.jbmesh.operator.Smooth, ch.alchemists.jbmesh.operator.SubdivideFace, ch.alchemists.jbmesh.operator.bool.Subtract, ch.alchemists.jbmesh.operator.meshgen.DistanceFunction, ch.alchemists.jbmesh.operator.meshgen.MarchingCube, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.Profiler, com.jme3.math.Vector3f, com.jme3.scene.shape.Sphere, java.util.List class TestMesh public static BMesh testSphere() public static BMesh crease() public static void spikes(BMesh bmesh) public static void hollow(BMesh bmesh) public static void subdiv(BMesh bmesh) public static DistanceFunction dfunc() public static void subtract(BMesh bmesh) public static BMesh marchingCubes(BMesh bmesh)
TriangulationEditor.java: Imports: ch.alchemists.jbmesh.operator.triangulation.SeidelTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.tools.polygoneditor.PolygonEditorState, ch.alchemists.jbmesh.util.DebugVisualState, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.input.KeyInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.math.Vector2f, com.jme3.scene.Node, com.jme3.system.AppSettings, com.simsilica.lemur.GuiGlobals, com.simsilica.lemur.style.BaseStyles, java.util.ArrayList, java.util.Map class TriangulationEditor private static final String STORAGE_PATH private static final String EXPORT_FILE private static final String ACT_TRIANGULATE private static final String ACT_BENCHMARK private static final String ACT_EXPORT private final PolygonEditorState polygonEditor private final DebugVisualState debugVisualState private final Node node private final PointListener pointListener private final ActionListener actionListener private void TriangulationEditor() @Override
    public void simpleInitApp() private void updateTriangulation() private void benchmark() private void exportFile() public static void main(String[] args) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap)
StraightSkeletonEditor.java: Imports: ch.alchemists.jbmesh.operator.skeleton.SkeletonVisualization, ch.alchemists.jbmesh.operator.skeleton.StraightSkeleton, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.tools.polygoneditor.PolygonEditorState, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.app.state.AppState, com.jme3.input.KeyInput, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.controls.MouseAxisTrigger, com.jme3.math.ColorRGBA, com.jme3.math.Vector2f, com.jme3.scene.Node, com.jme3.system.AppSettings, com.simsilica.lemur.GuiGlobals, com.simsilica.lemur.style.BaseStyles, java.util.ArrayList, java.util.Map class StraightSkeletonEditor private static final String STORAGE_PATH private static final String EXPORT_FILE private static final String ACT_INC_DISTANCE private static final String ACT_DEC_DISTANCE private static final String ACT_MOD_STEP private static final String ACT_RESET_DISTANCE private static final String ACT_MAX_DISTANCE private static final String ACT_BENCHMARK private static final String ACT_EXPORT private static final String ACT_TOGGLE_SKEL private static final String ACT_TOGGLE_BISECT private static final float SKEL_DISTANCE_STEP private static final float SKEL_DISTANCE_LEAP private static final float DEFAULT_DISTANCE private float skeletonDistance private boolean modStep private boolean showSkel private boolean showBisectors private final PolygonEditorState polygonEditor private final Node node private PointDrawType movingNodeType private final PointListener pointListener private final ActionListener actionListener private void StraightSkeletonEditor() @Override
    public void simpleInitApp() private void updateSkeletonVis() private void benchmark() private void exportFile() public static void main(String[] args) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap)
SweepTriangulationEditor.java: Imports: ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.sweeptriang.SweepTriangulation, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.tools.polygoneditor.PolygonEditorState, ch.alchemists.jbmesh.util.DebugVisual, ch.alchemists.jbmesh.util.DebugVisualState, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, ch.alchemists.jbmesh.util.Profiler, com.jme3.app.SimpleApplication, com.jme3.app.state.AppState, com.jme3.input.KeyInput, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.controls.MouseAxisTrigger, com.jme3.math.Vector2f, com.jme3.math.Vector3f, com.jme3.scene.Node, com.jme3.system.AppSettings, com.simsilica.lemur.GuiGlobals, com.simsilica.lemur.style.BaseStyles, java.util.ArrayList, java.util.List, java.util.Map class SweepTriangulationEditor private static final String STORAGE_PATH private static final String EXPORT_FILE private static final String ACT_MORE_SWEEP private static final String ACT_LESS_SWEEP private static final String ACT_RESET_SWEEP private static final String ACT_TRIANGULATE private static final String ACT_BENCHMARK private static final String ACT_EXPORT private final PolygonEditorState polygonEditor private final DebugVisualState debugVisualState private Node sweepLine private static final float SWEEP_STEP private float sweepLimit private final PointListener pointListener private final ActionListener actionListener private void SweepTriangulationEditor() @Override
    public void simpleInitApp() private void updateTriangulation() private void benchmark() private void exportFile() public static void main(String[] args) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class null @Override
        public void onPointsReset() @Override
        public void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap)

package ch.alchemists.jbmesh.tools.polygoneditor
ToolBar.java: Imports: com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.app.state.BaseAppState, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.MouseButtonTrigger, com.jme3.post.SceneProcessor, com.jme3.profile.AppProfiler, com.jme3.renderer.RenderManager, com.jme3.renderer.ViewPort, com.jme3.renderer.queue.RenderQueue, com.jme3.texture.FrameBuffer, com.simsilica.lemur.Button, com.simsilica.lemur.Container, com.simsilica.lemur.Insets3f, java.util.ArrayList, java.util.List class ToolBar private static final String ACT_MOUSE_CLICK private final List<PolygonEditorTool> tools private PolygonEditorTool activeTool private final PolygonEditorState editor private final Container container private final Container toolContainer private final Container propertyContainer private final ActionListener actionListener @SuppressWarnings("override")
    private final SceneProcessor resizeListener public void ToolBar(PolygonEditorState editor) @Override
    protected void initialize(Application app) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() @Override
    public void update(float tpf) private void rebuild() private void reposition() private void selectTool(PolygonEditorTool tool) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) class null private boolean initialized @Override
        public void initialize(RenderManager rm, ViewPort vp) @Override
        public void reshape(ViewPort vp, int w, int h) @Override
        public boolean isInitialized() public void preFrame(float tpf) public void postQueue(RenderQueue rq) public void postFrame(FrameBuffer out) public void cleanup() public void setProfiler(AppProfiler profiler) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) class null private boolean initialized @Override
        public void initialize(RenderManager rm, ViewPort vp) @Override
        public void reshape(ViewPort vp, int w, int h) @Override
        public boolean isInitialized() public void preFrame(float tpf) public void postQueue(RenderQueue rq) public void postFrame(FrameBuffer out) public void cleanup() public void setProfiler(AppProfiler profiler)
AddPointTool.java: Imports: com.jme3.math.Vector2f class AddPointTool private static final float ADD_INTERVAL private final PolygonEditorState editor private boolean snapToGrid private boolean autoDraw private float tDraw private Vector2f mouseDownPos  void AddPointTool(PolygonEditorState editor) private Vector2f pickAndSnap(Vector2f cursor) private void addPoint(Vector2f p) @Override
    public void mouseDown(Vector2f cursor, int button) @Override
    public void mouseUp(Vector2f cursor, int button) @Override
    public void updateTool(float tpf)
PanZoomState.java: Imports: com.jme3.app.Application, com.jme3.app.state.BaseAppState, com.jme3.input.InputManager, com.jme3.input.KeyInput, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.controls.MouseButtonTrigger, com.jme3.math.Vector2f, com.jme3.math.Vector3f, com.jme3.renderer.Camera class PanZoomState private static final int MOUSE_BACK private static final int MOUSE_FORWARD private static final String ACT_PAN private static final String ACT_ZOOM_IN private static final String ACT_ZOOM_OUT private static final float ZOOM_FACTOR_STEP private Vector3f initialPos private Camera cam private Vector2f panStart private final ActionListener actionListener public void PanZoomState() public void PanZoomState(float initialZ) public void setPos(Vector2f pos) @Override
    protected void initialize(Application app) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() @Override
    public void update(float tpf) private void zoom(float factor)
ToolProperty.java: Imports: com.jme3.scene.Node, com.simsilica.lemur, com.simsilica.lemur.core.VersionedReference class ToolProperty private final String name private T value private final ValueChangedCallback<T> callback public void ToolProperty(String name, T defaultValue, ValueChangedCallback<T> callback) public String getName() public void setValue(T value) public T getValue() public abstract Node getGuiElement() public void update(float tpf) class T interface ValueChangedCallback  void onValueChanged(T value) class T class T class BooleanProperty public void BooleanProperty(String name, boolean defaultValue, ValueChangedCallback<Boolean> callback) @Override
        public Node getGuiElement() class FloatProperty private final float min private final float max private Label label private VersionedReference<Double> ref public void FloatProperty(String name, float defaultValue, float min, float max, ValueChangedCallback<Float> callback) @Override
        public Node getGuiElement() @Override
        public void update(float tpf) private String getText(float val) class T interface ValueChangedCallback  void onValueChanged(T value) class T class T class BooleanProperty public void BooleanProperty(String name, boolean defaultValue, ValueChangedCallback<Boolean> callback) @Override
        public Node getGuiElement() class FloatProperty private final float min private final float max private Label label private VersionedReference<Double> ref public void FloatProperty(String name, float defaultValue, float min, float max, ValueChangedCallback<Float> callback) @Override
        public Node getGuiElement() @Override
        public void update(float tpf) private String getText(float val)
RemovePointTool.java: Imports: ch.alchemists.jbmesh.util.BasicShapes, com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.asset.AssetManager, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.Vector2f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Node class RemovePointTool private static final float REMOVE_INTERVAL private final PolygonEditorState editor private float size private boolean removing private float tDraw private final Node rootNode private final Geometry selectionCircle  void RemovePointTool(PolygonEditorState editor, Application app) private static Geometry createSelectionCircle(AssetManager assetManager) private void removePointsInRange(Vector2f center) @Override
    public void onActivate() @Override
    public void onDeactivate() @Override
    public void mouseDown(Vector2f cursor, int button) @Override
    public void mouseUp(Vector2f cursor, int button) @Override
    public void updateTool(float tpf)
PolygonEditorTool.java: Imports: com.jme3.math.Vector2f, java.util.ArrayList, java.util.Collections, java.util.List class PolygonEditorTool private final String name private final List<ToolProperty<?>> properties protected void PolygonEditorTool(String name) public String getName() protected void addProperty(ToolProperty<?> property) public List<ToolProperty<?>> getProperties() public void onActivate() public void onDeactivate() public void mouseDown(Vector2f cursor, int button) public void mouseUp(Vector2f cursor, int button) public void mouseScroll(int amount) public final void update(float tpf) public void updateTool(float tpf)
PolygonEditorState.java: Imports: ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.BasicShapes, ch.alchemists.jbmesh.util.Gizmo, com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.app.state.BaseAppState, com.jme3.asset.AssetManager, com.jme3.font.BitmapFont, com.jme3.font.BitmapText, com.jme3.input.InputManager, com.jme3.input.KeyInput, com.jme3.input.RawInputListener, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.event, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math, com.jme3.renderer.Camera, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.shape.Quad, com.jme3.texture.Texture, java.io, java.nio.file.Path, java.nio.file.Paths, java.util class PolygonEditorState private static final String ACT_RESET_POINTS private static final String ACT_SUBDIVIDE private static final String ACT_PERTURB private static final String ACT_RELOAD_FILE private static final String DEFAULT_EXPORT_FILE private Path storageBasePath private String currentFile private final PointListener listener private final Plane plane private final Map<Integer, ArrayList<Vector2f>> pointMap private int currentPolygon private static final float BG_SIZE private Geometry bg private BitmapFont font private PointDrawType defaultPointType private PanZoomState panZoomState private ToolBar toolBar private Gizmo gizmo private BitmapText cursorPositionLabel private BitmapText vertexCountLabel private final ActionListener actionListener @SuppressWarnings("override")
    private final RawInputListener numberInputListener public void PolygonEditorState(PointListener listener) public List<Vector2f> getPoints() public ArrayList<Vector2f> getPoints(int polygonIndex) public Collection<List<Vector2f>> getAllPoints() public void setStoragePath(String path) @Override
    protected void initialize(Application app) private void setupBackground(AssetManager assetManager, Node rootNode) private void setupInput(InputManager inputManager) private void setupCursorPositionLabel(Node guiNode) private void setupVertexCountLabel(Node guiNode) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() @Override
    public void update(float tpf) public Face createBMeshFace(BMesh bmesh) public Face createBMeshFace(BMesh bmesh, int polygonIndex) public Face createBMeshFace(BMesh bmesh, List<Vector2f> points) public Geometry createLineGeom(BMesh bmesh, ColorRGBA color) public Vector2f getCursorPosition() public Vector2f pick(Vector2f cursor) public void updatePoints() public void createPointVis(PointDrawType type, Vector3f p, String text) public void createPointVis(PointDrawType type, Vector2f p, String text) private String getFilePath(String file) public void importFromDefaultFile() public void importPoints(String file) public void exportToDefaultFile() public void exportPoints(String file) public void scalePoints(int polygonIndex, float scale) public void reversePoints(int polygonIndex) public void subdivide(int polygonIndex) public void perturb(int polygonIndex) private void centerView() interface PointListener  void onPointsReset()  void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class PointDrawType public final Node container public final Mesh mesh public final Material mat public final float fontSize public ColorRGBA textColor public void PointDrawType(AssetManager assetManager, ColorRGBA color, float pointSize, float fontSize) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) private void onPressed(String name) class null @Override
        public void onKeyEvent(KeyInputEvent evt) public void beginInput() public void endInput() public void onJoyAxisEvent(JoyAxisEvent evt) public void onJoyButtonEvent(JoyButtonEvent evt) public void onMouseMotionEvent(MouseMotionEvent evt) public void onMouseButtonEvent(MouseButtonEvent evt) public void onTouchEvent(TouchEvent evt) interface PointListener  void onPointsReset()  void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class PointDrawType public final Node container public final Mesh mesh public final Material mat public final float fontSize public ColorRGBA textColor public void PointDrawType(AssetManager assetManager, ColorRGBA color, float pointSize, float fontSize) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) private void onPressed(String name) class null @Override
        public void onKeyEvent(KeyInputEvent evt) public void beginInput() public void endInput() public void onJoyAxisEvent(JoyAxisEvent evt) public void onJoyButtonEvent(JoyButtonEvent evt) public void onMouseMotionEvent(MouseMotionEvent evt) public void onMouseButtonEvent(MouseButtonEvent evt) public void onTouchEvent(TouchEvent evt)
ToolBar.java: Imports: com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.app.state.BaseAppState, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.MouseButtonTrigger, com.jme3.post.SceneProcessor, com.jme3.profile.AppProfiler, com.jme3.renderer.RenderManager, com.jme3.renderer.ViewPort, com.jme3.renderer.queue.RenderQueue, com.jme3.texture.FrameBuffer, com.simsilica.lemur.Button, com.simsilica.lemur.Container, com.simsilica.lemur.Insets3f, java.util.ArrayList, java.util.List class ToolBar private static final String ACT_MOUSE_CLICK private final List<PolygonEditorTool> tools private PolygonEditorTool activeTool private final PolygonEditorState editor private final Container container private final Container toolContainer private final Container propertyContainer private final ActionListener actionListener @SuppressWarnings("override")
    private final SceneProcessor resizeListener public void ToolBar(PolygonEditorState editor) @Override
    protected void initialize(Application app) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() @Override
    public void update(float tpf) private void rebuild() private void reposition() private void selectTool(PolygonEditorTool tool) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) class null private boolean initialized @Override
        public void initialize(RenderManager rm, ViewPort vp) @Override
        public void reshape(ViewPort vp, int w, int h) @Override
        public boolean isInitialized() public void preFrame(float tpf) public void postQueue(RenderQueue rq) public void postFrame(FrameBuffer out) public void cleanup() public void setProfiler(AppProfiler profiler) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) class null private boolean initialized @Override
        public void initialize(RenderManager rm, ViewPort vp) @Override
        public void reshape(ViewPort vp, int w, int h) @Override
        public boolean isInitialized() public void preFrame(float tpf) public void postQueue(RenderQueue rq) public void postFrame(FrameBuffer out) public void cleanup() public void setProfiler(AppProfiler profiler)
AddPointTool.java: Imports: com.jme3.math.Vector2f class AddPointTool private static final float ADD_INTERVAL private final PolygonEditorState editor private boolean snapToGrid private boolean autoDraw private float tDraw private Vector2f mouseDownPos  void AddPointTool(PolygonEditorState editor) private Vector2f pickAndSnap(Vector2f cursor) private void addPoint(Vector2f p) @Override
    public void mouseDown(Vector2f cursor, int button) @Override
    public void mouseUp(Vector2f cursor, int button) @Override
    public void updateTool(float tpf)
PanZoomState.java: Imports: com.jme3.app.Application, com.jme3.app.state.BaseAppState, com.jme3.input.InputManager, com.jme3.input.KeyInput, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.controls.MouseButtonTrigger, com.jme3.math.Vector2f, com.jme3.math.Vector3f, com.jme3.renderer.Camera class PanZoomState private static final int MOUSE_BACK private static final int MOUSE_FORWARD private static final String ACT_PAN private static final String ACT_ZOOM_IN private static final String ACT_ZOOM_OUT private static final float ZOOM_FACTOR_STEP private Vector3f initialPos private Camera cam private Vector2f panStart private final ActionListener actionListener public void PanZoomState() public void PanZoomState(float initialZ) public void setPos(Vector2f pos) @Override
    protected void initialize(Application app) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() @Override
    public void update(float tpf) private void zoom(float factor)
ToolProperty.java: Imports: com.jme3.scene.Node, com.simsilica.lemur, com.simsilica.lemur.core.VersionedReference class ToolProperty private final String name private T value private final ValueChangedCallback<T> callback public void ToolProperty(String name, T defaultValue, ValueChangedCallback<T> callback) public String getName() public void setValue(T value) public T getValue() public abstract Node getGuiElement() public void update(float tpf) class T interface ValueChangedCallback  void onValueChanged(T value) class T class T class BooleanProperty public void BooleanProperty(String name, boolean defaultValue, ValueChangedCallback<Boolean> callback) @Override
        public Node getGuiElement() class FloatProperty private final float min private final float max private Label label private VersionedReference<Double> ref public void FloatProperty(String name, float defaultValue, float min, float max, ValueChangedCallback<Float> callback) @Override
        public Node getGuiElement() @Override
        public void update(float tpf) private String getText(float val) class T interface ValueChangedCallback  void onValueChanged(T value) class T class T class BooleanProperty public void BooleanProperty(String name, boolean defaultValue, ValueChangedCallback<Boolean> callback) @Override
        public Node getGuiElement() class FloatProperty private final float min private final float max private Label label private VersionedReference<Double> ref public void FloatProperty(String name, float defaultValue, float min, float max, ValueChangedCallback<Float> callback) @Override
        public Node getGuiElement() @Override
        public void update(float tpf) private String getText(float val)
RemovePointTool.java: Imports: ch.alchemists.jbmesh.util.BasicShapes, com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.asset.AssetManager, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.Vector2f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Node class RemovePointTool private static final float REMOVE_INTERVAL private final PolygonEditorState editor private float size private boolean removing private float tDraw private final Node rootNode private final Geometry selectionCircle  void RemovePointTool(PolygonEditorState editor, Application app) private static Geometry createSelectionCircle(AssetManager assetManager) private void removePointsInRange(Vector2f center) @Override
    public void onActivate() @Override
    public void onDeactivate() @Override
    public void mouseDown(Vector2f cursor, int button) @Override
    public void mouseUp(Vector2f cursor, int button) @Override
    public void updateTool(float tpf)
PolygonEditorTool.java: Imports: com.jme3.math.Vector2f, java.util.ArrayList, java.util.Collections, java.util.List class PolygonEditorTool private final String name private final List<ToolProperty<?>> properties protected void PolygonEditorTool(String name) public String getName() protected void addProperty(ToolProperty<?> property) public List<ToolProperty<?>> getProperties() public void onActivate() public void onDeactivate() public void mouseDown(Vector2f cursor, int button) public void mouseUp(Vector2f cursor, int button) public void mouseScroll(int amount) public final void update(float tpf) public void updateTool(float tpf)
PolygonEditorState.java: Imports: ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.BasicShapes, ch.alchemists.jbmesh.util.Gizmo, com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.app.state.BaseAppState, com.jme3.asset.AssetManager, com.jme3.font.BitmapFont, com.jme3.font.BitmapText, com.jme3.input.InputManager, com.jme3.input.KeyInput, com.jme3.input.RawInputListener, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.event, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math, com.jme3.renderer.Camera, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.shape.Quad, com.jme3.texture.Texture, java.io, java.nio.file.Path, java.nio.file.Paths, java.util class PolygonEditorState private static final String ACT_RESET_POINTS private static final String ACT_SUBDIVIDE private static final String ACT_PERTURB private static final String ACT_RELOAD_FILE private static final String DEFAULT_EXPORT_FILE private Path storageBasePath private String currentFile private final PointListener listener private final Plane plane private final Map<Integer, ArrayList<Vector2f>> pointMap private int currentPolygon private static final float BG_SIZE private Geometry bg private BitmapFont font private PointDrawType defaultPointType private PanZoomState panZoomState private ToolBar toolBar private Gizmo gizmo private BitmapText cursorPositionLabel private BitmapText vertexCountLabel private final ActionListener actionListener @SuppressWarnings("override")
    private final RawInputListener numberInputListener public void PolygonEditorState(PointListener listener) public List<Vector2f> getPoints() public ArrayList<Vector2f> getPoints(int polygonIndex) public Collection<List<Vector2f>> getAllPoints() public void setStoragePath(String path) @Override
    protected void initialize(Application app) private void setupBackground(AssetManager assetManager, Node rootNode) private void setupInput(InputManager inputManager) private void setupCursorPositionLabel(Node guiNode) private void setupVertexCountLabel(Node guiNode) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() @Override
    public void update(float tpf) public Face createBMeshFace(BMesh bmesh) public Face createBMeshFace(BMesh bmesh, int polygonIndex) public Face createBMeshFace(BMesh bmesh, List<Vector2f> points) public Geometry createLineGeom(BMesh bmesh, ColorRGBA color) public Vector2f getCursorPosition() public Vector2f pick(Vector2f cursor) public void updatePoints() public void createPointVis(PointDrawType type, Vector3f p, String text) public void createPointVis(PointDrawType type, Vector2f p, String text) private String getFilePath(String file) public void importFromDefaultFile() public void importPoints(String file) public void exportToDefaultFile() public void exportPoints(String file) public void scalePoints(int polygonIndex, float scale) public void reversePoints(int polygonIndex) public void subdivide(int polygonIndex) public void perturb(int polygonIndex) private void centerView() interface PointListener  void onPointsReset()  void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class PointDrawType public final Node container public final Mesh mesh public final Material mat public final float fontSize public ColorRGBA textColor public void PointDrawType(AssetManager assetManager, ColorRGBA color, float pointSize, float fontSize) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) private void onPressed(String name) class null @Override
        public void onKeyEvent(KeyInputEvent evt) public void beginInput() public void endInput() public void onJoyAxisEvent(JoyAxisEvent evt) public void onJoyButtonEvent(JoyButtonEvent evt) public void onMouseMotionEvent(MouseMotionEvent evt) public void onMouseButtonEvent(MouseButtonEvent evt) public void onTouchEvent(TouchEvent evt) interface PointListener  void onPointsReset()  void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class PointDrawType public final Node container public final Mesh mesh public final Material mat public final float fontSize public ColorRGBA textColor public void PointDrawType(AssetManager assetManager, ColorRGBA color, float pointSize, float fontSize) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) private void onPressed(String name) class null @Override
        public void onKeyEvent(KeyInputEvent evt) public void beginInput() public void endInput() public void onJoyAxisEvent(JoyAxisEvent evt) public void onJoyButtonEvent(JoyButtonEvent evt) public void onMouseMotionEvent(MouseMotionEvent evt) public void onMouseButtonEvent(MouseButtonEvent evt) public void onTouchEvent(TouchEvent evt)
ToolBar.java: Imports: com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.app.state.BaseAppState, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.MouseButtonTrigger, com.jme3.post.SceneProcessor, com.jme3.profile.AppProfiler, com.jme3.renderer.RenderManager, com.jme3.renderer.ViewPort, com.jme3.renderer.queue.RenderQueue, com.jme3.texture.FrameBuffer, com.simsilica.lemur.Button, com.simsilica.lemur.Container, com.simsilica.lemur.Insets3f, java.util.ArrayList, java.util.List class ToolBar private static final String ACT_MOUSE_CLICK private final List<PolygonEditorTool> tools private PolygonEditorTool activeTool private final PolygonEditorState editor private final Container container private final Container toolContainer private final Container propertyContainer private final ActionListener actionListener @SuppressWarnings("override")
    private final SceneProcessor resizeListener public void ToolBar(PolygonEditorState editor) @Override
    protected void initialize(Application app) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() @Override
    public void update(float tpf) private void rebuild() private void reposition() private void selectTool(PolygonEditorTool tool) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) class null private boolean initialized @Override
        public void initialize(RenderManager rm, ViewPort vp) @Override
        public void reshape(ViewPort vp, int w, int h) @Override
        public boolean isInitialized() public void preFrame(float tpf) public void postQueue(RenderQueue rq) public void postFrame(FrameBuffer out) public void cleanup() public void setProfiler(AppProfiler profiler) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) class null private boolean initialized @Override
        public void initialize(RenderManager rm, ViewPort vp) @Override
        public void reshape(ViewPort vp, int w, int h) @Override
        public boolean isInitialized() public void preFrame(float tpf) public void postQueue(RenderQueue rq) public void postFrame(FrameBuffer out) public void cleanup() public void setProfiler(AppProfiler profiler)
AddPointTool.java: Imports: com.jme3.math.Vector2f class AddPointTool private static final float ADD_INTERVAL private final PolygonEditorState editor private boolean snapToGrid private boolean autoDraw private float tDraw private Vector2f mouseDownPos  void AddPointTool(PolygonEditorState editor) private Vector2f pickAndSnap(Vector2f cursor) private void addPoint(Vector2f p) @Override
    public void mouseDown(Vector2f cursor, int button) @Override
    public void mouseUp(Vector2f cursor, int button) @Override
    public void updateTool(float tpf)
PanZoomState.java: Imports: com.jme3.app.Application, com.jme3.app.state.BaseAppState, com.jme3.input.InputManager, com.jme3.input.KeyInput, com.jme3.input.MouseInput, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.controls.MouseButtonTrigger, com.jme3.math.Vector2f, com.jme3.math.Vector3f, com.jme3.renderer.Camera class PanZoomState private static final int MOUSE_BACK private static final int MOUSE_FORWARD private static final String ACT_PAN private static final String ACT_ZOOM_IN private static final String ACT_ZOOM_OUT private static final float ZOOM_FACTOR_STEP private Vector3f initialPos private Camera cam private Vector2f panStart private final ActionListener actionListener public void PanZoomState() public void PanZoomState(float initialZ) public void setPos(Vector2f pos) @Override
    protected void initialize(Application app) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() @Override
    public void update(float tpf) private void zoom(float factor)
ToolProperty.java: Imports: com.jme3.scene.Node, com.simsilica.lemur, com.simsilica.lemur.core.VersionedReference class ToolProperty private final String name private T value private final ValueChangedCallback<T> callback public void ToolProperty(String name, T defaultValue, ValueChangedCallback<T> callback) public String getName() public void setValue(T value) public T getValue() public abstract Node getGuiElement() public void update(float tpf) class T interface ValueChangedCallback  void onValueChanged(T value) class T class T class BooleanProperty public void BooleanProperty(String name, boolean defaultValue, ValueChangedCallback<Boolean> callback) @Override
        public Node getGuiElement() class FloatProperty private final float min private final float max private Label label private VersionedReference<Double> ref public void FloatProperty(String name, float defaultValue, float min, float max, ValueChangedCallback<Float> callback) @Override
        public Node getGuiElement() @Override
        public void update(float tpf) private String getText(float val) class T interface ValueChangedCallback  void onValueChanged(T value) class T class T class BooleanProperty public void BooleanProperty(String name, boolean defaultValue, ValueChangedCallback<Boolean> callback) @Override
        public Node getGuiElement() class FloatProperty private final float min private final float max private Label label private VersionedReference<Double> ref public void FloatProperty(String name, float defaultValue, float min, float max, ValueChangedCallback<Float> callback) @Override
        public Node getGuiElement() @Override
        public void update(float tpf) private String getText(float val)
RemovePointTool.java: Imports: ch.alchemists.jbmesh.util.BasicShapes, com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.asset.AssetManager, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.Vector2f, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Node class RemovePointTool private static final float REMOVE_INTERVAL private final PolygonEditorState editor private float size private boolean removing private float tDraw private final Node rootNode private final Geometry selectionCircle  void RemovePointTool(PolygonEditorState editor, Application app) private static Geometry createSelectionCircle(AssetManager assetManager) private void removePointsInRange(Vector2f center) @Override
    public void onActivate() @Override
    public void onDeactivate() @Override
    public void mouseDown(Vector2f cursor, int button) @Override
    public void mouseUp(Vector2f cursor, int button) @Override
    public void updateTool(float tpf)
PolygonEditorTool.java: Imports: com.jme3.math.Vector2f, java.util.ArrayList, java.util.Collections, java.util.List class PolygonEditorTool private final String name private final List<ToolProperty<?>> properties protected void PolygonEditorTool(String name) public String getName() protected void addProperty(ToolProperty<?> property) public List<ToolProperty<?>> getProperties() public void onActivate() public void onDeactivate() public void mouseDown(Vector2f cursor, int button) public void mouseUp(Vector2f cursor, int button) public void mouseScroll(int amount) public final void update(float tpf) public void updateTool(float tpf)
PolygonEditorState.java: Imports: ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.BasicShapes, ch.alchemists.jbmesh.util.Gizmo, com.jme3.app.Application, com.jme3.app.SimpleApplication, com.jme3.app.state.BaseAppState, com.jme3.asset.AssetManager, com.jme3.font.BitmapFont, com.jme3.font.BitmapText, com.jme3.input.InputManager, com.jme3.input.KeyInput, com.jme3.input.RawInputListener, com.jme3.input.controls.ActionListener, com.jme3.input.controls.KeyTrigger, com.jme3.input.event, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math, com.jme3.renderer.Camera, com.jme3.renderer.queue.RenderQueue, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.Node, com.jme3.scene.shape.Quad, com.jme3.texture.Texture, java.io, java.nio.file.Path, java.nio.file.Paths, java.util class PolygonEditorState private static final String ACT_RESET_POINTS private static final String ACT_SUBDIVIDE private static final String ACT_PERTURB private static final String ACT_RELOAD_FILE private static final String DEFAULT_EXPORT_FILE private Path storageBasePath private String currentFile private final PointListener listener private final Plane plane private final Map<Integer, ArrayList<Vector2f>> pointMap private int currentPolygon private static final float BG_SIZE private Geometry bg private BitmapFont font private PointDrawType defaultPointType private PanZoomState panZoomState private ToolBar toolBar private Gizmo gizmo private BitmapText cursorPositionLabel private BitmapText vertexCountLabel private final ActionListener actionListener @SuppressWarnings("override")
    private final RawInputListener numberInputListener public void PolygonEditorState(PointListener listener) public List<Vector2f> getPoints() public ArrayList<Vector2f> getPoints(int polygonIndex) public Collection<List<Vector2f>> getAllPoints() public void setStoragePath(String path) @Override
    protected void initialize(Application app) private void setupBackground(AssetManager assetManager, Node rootNode) private void setupInput(InputManager inputManager) private void setupCursorPositionLabel(Node guiNode) private void setupVertexCountLabel(Node guiNode) @Override
    protected void cleanup(Application app) @Override
    protected void onEnable() @Override
    protected void onDisable() @Override
    public void update(float tpf) public Face createBMeshFace(BMesh bmesh) public Face createBMeshFace(BMesh bmesh, int polygonIndex) public Face createBMeshFace(BMesh bmesh, List<Vector2f> points) public Geometry createLineGeom(BMesh bmesh, ColorRGBA color) public Vector2f getCursorPosition() public Vector2f pick(Vector2f cursor) public void updatePoints() public void createPointVis(PointDrawType type, Vector3f p, String text) public void createPointVis(PointDrawType type, Vector2f p, String text) private String getFilePath(String file) public void importFromDefaultFile() public void importPoints(String file) public void exportToDefaultFile() public void exportPoints(String file) public void scalePoints(int polygonIndex, float scale) public void reversePoints(int polygonIndex) public void subdivide(int polygonIndex) public void perturb(int polygonIndex) private void centerView() interface PointListener  void onPointsReset()  void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class PointDrawType public final Node container public final Mesh mesh public final Material mat public final float fontSize public ColorRGBA textColor public void PointDrawType(AssetManager assetManager, ColorRGBA color, float pointSize, float fontSize) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) private void onPressed(String name) class null @Override
        public void onKeyEvent(KeyInputEvent evt) public void beginInput() public void endInput() public void onJoyAxisEvent(JoyAxisEvent evt) public void onJoyButtonEvent(JoyButtonEvent evt) public void onMouseMotionEvent(MouseMotionEvent evt) public void onMouseButtonEvent(MouseButtonEvent evt) public void onTouchEvent(TouchEvent evt) interface PointListener  void onPointsReset()  void onPointsUpdated(Map<Integer, ArrayList<Vector2f>> pointMap) class PointDrawType public final Node container public final Mesh mesh public final Material mat public final float fontSize public ColorRGBA textColor public void PointDrawType(AssetManager assetManager, ColorRGBA color, float pointSize, float fontSize) class null @Override
        public void onAction(String name, boolean isPressed, float tpf) private void onPressed(String name) class null @Override
        public void onKeyEvent(KeyInputEvent evt) public void beginInput() public void endInput() public void onJoyAxisEvent(JoyAxisEvent evt) public void onJoyButtonEvent(JoyButtonEvent evt) public void onMouseMotionEvent(MouseMotionEvent evt) public void onMouseButtonEvent(MouseButtonEvent evt) public void onTouchEvent(TouchEvent evt)

package ch.alchemists.jbmesh.examples
Normals.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.DebugNormals, com.jme3.app.SimpleApplication, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh class Normals private BMesh createMesh() private void generateNormalsFlat(BMesh bmesh) private void generateNormalsAuto(BMesh bmesh) @Override
    public void simpleInitApp() private void setupLight() public static void main(String[] args)
ExtrudeHelix.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.operator.ExtrudePath, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.BasicShapes, ch.alchemists.jbmesh.util.Gizmo, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.app.SimpleApplication, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.FastMath, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.system.AppSettings class ExtrudeHelix private final float helixRadius private final float helixLength private final int rounds private final int roundSamples private Face createDisc(BMesh bmesh, PlanarCoordinateSystem coordSys) private Face createCross(BMesh bmesh, PlanarCoordinateSystem coordSys) private void extrudeHelix(BMesh bmesh, Face face, PlanarCoordinateSystem coordSys) @Override
    public void simpleInitApp() private void setupLight() public static void main(String[] args) class null @Override
            protected void setTangent(int i, Vector3f tangent, Vector3f normal) class null @Override
            protected void setTangent(int i, Vector3f tangent, Vector3f normal)
UserAttributes.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element, com.jme3.math.Vector2f class UserAttributes class LongAttribute public void LongAttribute(String name) public long get(E element) public void set(E element, long l) @Override
        public boolean equals(E a, E b) @Override
        protected long[] alloc(int size) public static LongAttribute<E> get(String name, BMeshData<E> meshData) class E class E class E class E class Vec2TupleAttribute public void Vec2TupleAttribute(String name) public Vector2f getA(E element) public Vector2f getB(E element) public void setA(E element, Vector2f vec) public void setB(E element, Vector2f vec) @Override
        public boolean equals(E a, E b) @Override
        protected Vector2f[] alloc(int size) @Override
        public void copy(E from, E to) class E class E class LongAttribute public void LongAttribute(String name) public long get(E element) public void set(E element, long l) @Override
        public boolean equals(E a, E b) @Override
        protected long[] alloc(int size) public static LongAttribute<E> get(String name, BMeshData<E> meshData) class E class E class E class E class Vec2TupleAttribute public void Vec2TupleAttribute(String name) public Vector2f getA(E element) public Vector2f getB(E element) public void setA(E element, Vector2f vec) public void setB(E element, Vector2f vec) @Override
        public boolean equals(E a, E b) @Override
        protected Vector2f[] alloc(int size) @Override
        public void copy(E from, E to) class E class E
AttributeExport.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ColorAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer class AttributeExport private BMesh createMesh() private Mesh exportExplicit(BMesh bmesh) private Mesh exportImplicit(BMesh bmesh) @Override
    public void simpleInitApp() public static void main(String[] args)
BasicAttributes.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ColorAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh class BasicAttributes private BMesh createMesh() @Override
    public void simpleInitApp() public static void main(String[] args)
BasicMeshImport.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.conversion.Import, ch.alchemists.jbmesh.structure.BMesh, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.shape.Torus class BasicMeshImport @Override
    public void simpleInitApp() public static void main(String[] args)
BasicMeshBuilding.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh class BasicMeshBuilding private BMesh createMesh() @Override
    public void simpleInitApp() public static void main(String[] args)
BasicMeshBuilding3D.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.ExtrudeFace, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.BasicShapes, ch.alchemists.jbmesh.util.DebugNormals, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.app.SimpleApplication, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh class BasicMeshBuilding3D private BMesh createBox(float sizeX, float sizeY, float sizeZ) private BMesh createExtrudedCylinder(float radius, float height) @Override
    public void simpleInitApp() private void setupLight() public static void main(String[] args)
Normals.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.DebugNormals, com.jme3.app.SimpleApplication, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh class Normals private BMesh createMesh() private void generateNormalsFlat(BMesh bmesh) private void generateNormalsAuto(BMesh bmesh) @Override
    public void simpleInitApp() private void setupLight() public static void main(String[] args)
ExtrudeHelix.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.operator.ExtrudePath, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.BasicShapes, ch.alchemists.jbmesh.util.Gizmo, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.app.SimpleApplication, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.FastMath, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.system.AppSettings class ExtrudeHelix private final float helixRadius private final float helixLength private final int rounds private final int roundSamples private Face createDisc(BMesh bmesh, PlanarCoordinateSystem coordSys) private Face createCross(BMesh bmesh, PlanarCoordinateSystem coordSys) private void extrudeHelix(BMesh bmesh, Face face, PlanarCoordinateSystem coordSys) @Override
    public void simpleInitApp() private void setupLight() public static void main(String[] args) class null @Override
            protected void setTangent(int i, Vector3f tangent, Vector3f normal) class null @Override
            protected void setTangent(int i, Vector3f tangent, Vector3f normal)
UserAttributes.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element, com.jme3.math.Vector2f class UserAttributes class LongAttribute public void LongAttribute(String name) public long get(E element) public void set(E element, long l) @Override
        public boolean equals(E a, E b) @Override
        protected long[] alloc(int size) public static LongAttribute<E> get(String name, BMeshData<E> meshData) class E class E class E class E class Vec2TupleAttribute public void Vec2TupleAttribute(String name) public Vector2f getA(E element) public Vector2f getB(E element) public void setA(E element, Vector2f vec) public void setB(E element, Vector2f vec) @Override
        public boolean equals(E a, E b) @Override
        protected Vector2f[] alloc(int size) @Override
        public void copy(E from, E to) class E class E class LongAttribute public void LongAttribute(String name) public long get(E element) public void set(E element, long l) @Override
        public boolean equals(E a, E b) @Override
        protected long[] alloc(int size) public static LongAttribute<E> get(String name, BMeshData<E> meshData) class E class E class E class E class Vec2TupleAttribute public void Vec2TupleAttribute(String name) public Vector2f getA(E element) public Vector2f getB(E element) public void setA(E element, Vector2f vec) public void setB(E element, Vector2f vec) @Override
        public boolean equals(E a, E b) @Override
        protected Vector2f[] alloc(int size) @Override
        public void copy(E from, E to) class E class E
AttributeExport.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ColorAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer class AttributeExport private BMesh createMesh() private Mesh exportExplicit(BMesh bmesh) private Mesh exportImplicit(BMesh bmesh) @Override
    public void simpleInitApp() public static void main(String[] args)
BasicAttributes.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ColorAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh class BasicAttributes private BMesh createMesh() @Override
    public void simpleInitApp() public static void main(String[] args)
BasicMeshImport.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.conversion.Import, ch.alchemists.jbmesh.structure.BMesh, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.shape.Torus class BasicMeshImport @Override
    public void simpleInitApp() public static void main(String[] args)
BasicMeshBuilding.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh class BasicMeshBuilding private BMesh createMesh() @Override
    public void simpleInitApp() public static void main(String[] args)
BasicMeshBuilding3D.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.ExtrudeFace, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.BasicShapes, ch.alchemists.jbmesh.util.DebugNormals, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.app.SimpleApplication, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh class BasicMeshBuilding3D private BMesh createBox(float sizeX, float sizeY, float sizeZ) private BMesh createExtrudedCylinder(float radius, float height) @Override
    public void simpleInitApp() private void setupLight() public static void main(String[] args)
Normals.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.FaceOps, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Loop, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.DebugNormals, com.jme3.app.SimpleApplication, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh class Normals private BMesh createMesh() private void generateNormalsFlat(BMesh bmesh) private void generateNormalsAuto(BMesh bmesh) @Override
    public void simpleInitApp() private void setupLight() public static void main(String[] args)
ExtrudeHelix.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.operator.ExtrudePath, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.BasicShapes, ch.alchemists.jbmesh.util.Gizmo, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.app.SimpleApplication, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.material.RenderState, com.jme3.math.ColorRGBA, com.jme3.math.FastMath, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.system.AppSettings class ExtrudeHelix private final float helixRadius private final float helixLength private final int rounds private final int roundSamples private Face createDisc(BMesh bmesh, PlanarCoordinateSystem coordSys) private Face createCross(BMesh bmesh, PlanarCoordinateSystem coordSys) private void extrudeHelix(BMesh bmesh, Face face, PlanarCoordinateSystem coordSys) @Override
    public void simpleInitApp() private void setupLight() public static void main(String[] args) class null @Override
            protected void setTangent(int i, Vector3f tangent, Vector3f normal) class null @Override
            protected void setTangent(int i, Vector3f tangent, Vector3f normal)
UserAttributes.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.Element, com.jme3.math.Vector2f class UserAttributes class LongAttribute public void LongAttribute(String name) public long get(E element) public void set(E element, long l) @Override
        public boolean equals(E a, E b) @Override
        protected long[] alloc(int size) public static LongAttribute<E> get(String name, BMeshData<E> meshData) class E class E class E class E class Vec2TupleAttribute public void Vec2TupleAttribute(String name) public Vector2f getA(E element) public Vector2f getB(E element) public void setA(E element, Vector2f vec) public void setB(E element, Vector2f vec) @Override
        public boolean equals(E a, E b) @Override
        protected Vector2f[] alloc(int size) @Override
        public void copy(E from, E to) class E class E class LongAttribute public void LongAttribute(String name) public long get(E element) public void set(E element, long l) @Override
        public boolean equals(E a, E b) @Override
        protected long[] alloc(int size) public static LongAttribute<E> get(String name, BMeshData<E> meshData) class E class E class E class E class Vec2TupleAttribute public void Vec2TupleAttribute(String name) public Vector2f getA(E element) public Vector2f getB(E element) public void setA(E element, Vector2f vec) public void setB(E element, Vector2f vec) @Override
        public boolean equals(E a, E b) @Override
        protected Vector2f[] alloc(int size) @Override
        public void copy(E from, E to) class E class E
AttributeExport.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.conversion.LineExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ColorAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Edge, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.VertexBuffer class AttributeExport private BMesh createMesh() private Mesh exportExplicit(BMesh bmesh) private Mesh exportImplicit(BMesh bmesh) @Override
    public void simpleInitApp() public static void main(String[] args)
BasicAttributes.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.ColorAttribute, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Vertex, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh class BasicAttributes private BMesh createMesh() @Override
    public void simpleInitApp() public static void main(String[] args)
BasicMeshImport.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.conversion.Import, ch.alchemists.jbmesh.structure.BMesh, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh, com.jme3.scene.shape.Torus class BasicMeshImport @Override
    public void simpleInitApp() public static void main(String[] args)
BasicMeshBuilding.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, com.jme3.app.SimpleApplication, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.scene.Geometry, com.jme3.scene.Mesh class BasicMeshBuilding private BMesh createMesh() @Override
    public void simpleInitApp() public static void main(String[] args)
BasicMeshBuilding3D.java: Imports: ch.alchemists.jbmesh.conversion.BMeshJmeExport, ch.alchemists.jbmesh.data.BMeshAttribute, ch.alchemists.jbmesh.data.property.Vec3Attribute, ch.alchemists.jbmesh.operator.ExtrudeFace, ch.alchemists.jbmesh.operator.normalgen.NormalGenerator, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.structure.Face, ch.alchemists.jbmesh.structure.Vertex, ch.alchemists.jbmesh.util.BasicShapes, ch.alchemists.jbmesh.util.DebugNormals, ch.alchemists.jbmesh.util.PlanarCoordinateSystem, com.jme3.app.SimpleApplication, com.jme3.light.AmbientLight, com.jme3.light.DirectionalLight, com.jme3.material.Material, com.jme3.material.Materials, com.jme3.math.ColorRGBA, com.jme3.math.Vector3f, com.jme3.scene.Geometry, com.jme3.scene.Mesh class BasicMeshBuilding3D private BMesh createBox(float sizeX, float sizeY, float sizeZ) private BMesh createExtrudedCylinder(float radius, float height) @Override
    public void simpleInitApp() private void setupLight() public static void main(String[] args)

package ch.alchemists.jbmesh.benchmarks
BMeshDataBenchmark.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Profiler, java.util.ArrayList, java.util.Random class BMeshDataBenchmark private static final long SEED private static final float DESTROY_AMOUNT private final int numElements private final int numDestroy private final ArrayList<BenchElement> elements private final int[] randomAccessPattern private void BMeshDataBenchmark(int numElements) private void run() private static void run(BMeshDataBenchmark[] benches, int rounds) public static void main(String[] args) class BenchElement @Override
        protected void releaseElement() class BenchElement @Override
        protected void releaseElement()
ConversionBenchmark.java: Imports: ch.alchemists.jbmesh.conversion.DirectImport, ch.alchemists.jbmesh.conversion.Import, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.util.Profiler, com.jme3.scene.Mesh, com.jme3.scene.shape.Torus, java.util.function.Function class ConversionBenchmark private static final Mesh in1 private static final Mesh in2 private static final Mesh in3 private static final Mesh in4 private static void run(String name, Function<Mesh, BMesh> func) public static void main(String[] args)
FloatBufferBenchmark.java: Imports: com.jme3.util.BufferUtils, java.nio.ByteBuffer, java.nio.ByteOrder, java.nio.FloatBuffer, java.util.Random, ch.alchemists.jbmesh.util.Profiler class FloatBufferBenchmark private static final long SEED private final int bytes final int sparseSize private final float[] data private final int[] randomAccessPattern public void FloatBufferBenchmark(int bytes) public void heapBuffer() public void directBuffer() public void directBufferNativeOrder() public void jmeBuffer() private void buffer(FloatBuffer fb) private void bufferMod(FloatBuffer fb) private void array() public static void main(String[] args) private static void runWithSize(String name, int size)
BMeshDataBenchmark.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Profiler, java.util.ArrayList, java.util.Random class BMeshDataBenchmark private static final long SEED private static final float DESTROY_AMOUNT private final int numElements private final int numDestroy private final ArrayList<BenchElement> elements private final int[] randomAccessPattern private void BMeshDataBenchmark(int numElements) private void run() private static void run(BMeshDataBenchmark[] benches, int rounds) public static void main(String[] args) class BenchElement @Override
        protected void releaseElement() class BenchElement @Override
        protected void releaseElement()
ConversionBenchmark.java: Imports: ch.alchemists.jbmesh.conversion.DirectImport, ch.alchemists.jbmesh.conversion.Import, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.util.Profiler, com.jme3.scene.Mesh, com.jme3.scene.shape.Torus, java.util.function.Function class ConversionBenchmark private static final Mesh in1 private static final Mesh in2 private static final Mesh in3 private static final Mesh in4 private static void run(String name, Function<Mesh, BMesh> func) public static void main(String[] args)
FloatBufferBenchmark.java: Imports: com.jme3.util.BufferUtils, java.nio.ByteBuffer, java.nio.ByteOrder, java.nio.FloatBuffer, java.util.Random, ch.alchemists.jbmesh.util.Profiler class FloatBufferBenchmark private static final long SEED private final int bytes final int sparseSize private final float[] data private final int[] randomAccessPattern public void FloatBufferBenchmark(int bytes) public void heapBuffer() public void directBuffer() public void directBufferNativeOrder() public void jmeBuffer() private void buffer(FloatBuffer fb) private void bufferMod(FloatBuffer fb) private void array() public static void main(String[] args) private static void runWithSize(String name, int size)
BMeshDataBenchmark.java: Imports: ch.alchemists.jbmesh.data.BMeshData, ch.alchemists.jbmesh.data.Element, ch.alchemists.jbmesh.util.Profiler, java.util.ArrayList, java.util.Random class BMeshDataBenchmark private static final long SEED private static final float DESTROY_AMOUNT private final int numElements private final int numDestroy private final ArrayList<BenchElement> elements private final int[] randomAccessPattern private void BMeshDataBenchmark(int numElements) private void run() private static void run(BMeshDataBenchmark[] benches, int rounds) public static void main(String[] args) class BenchElement @Override
        protected void releaseElement() class BenchElement @Override
        protected void releaseElement()
ConversionBenchmark.java: Imports: ch.alchemists.jbmesh.conversion.DirectImport, ch.alchemists.jbmesh.conversion.Import, ch.alchemists.jbmesh.structure.BMesh, ch.alchemists.jbmesh.util.Profiler, com.jme3.scene.Mesh, com.jme3.scene.shape.Torus, java.util.function.Function class ConversionBenchmark private static final Mesh in1 private static final Mesh in2 private static final Mesh in3 private static final Mesh in4 private static void run(String name, Function<Mesh, BMesh> func) public static void main(String[] args)
FloatBufferBenchmark.java: Imports: com.jme3.util.BufferUtils, java.nio.ByteBuffer, java.nio.ByteOrder, java.nio.FloatBuffer, java.util.Random, ch.alchemists.jbmesh.util.Profiler class FloatBufferBenchmark private static final long SEED private final int bytes final int sparseSize private final float[] data private final int[] randomAccessPattern public void FloatBufferBenchmark(int bytes) public void heapBuffer() public void directBuffer() public void directBufferNativeOrder() public void jmeBuffer() private void buffer(FloatBuffer fb) private void bufferMod(FloatBuffer fb) private void array() public static void main(String[] args) private static void runWithSize(String name, int size)

